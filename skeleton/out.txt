./kma_bud: Running in correctness mode


 REQUEST NUMBER 1 TO ALLOCATE BLOCK OF SIZE 418
Adjusted size to: 512
Pointer 0 location is (nil) 
Pointer 1 location is (nil) 
Pointer 2 location is (nil) 
Pointer 3 location is (nil) 
Pointer 4 location is (nil) 
Pointer 5 location is (nil) 
Pointer 6 location is (nil) 
Pointer 7 location is (nil) 
Pointer 8 location is (nil) 
global Ptr points to : 0xb527c000
bitmap page: 0xb527c000 points to (nil) 
bitmap page: 0xb527c000 points to : (nil) 
global ptr points to 0xb527c000 
END OF INITIALIZING BOOK KEEPING -----------------

RETURN ADDRESS (nil)
adding page node for the page located at 0xb527e000 and pagePtr 0x98eb2e8 
Page where we add the node is 0xb527c000 
empty list starts at 0xb527c03c 
added page node at 0xb527c03c and pagePtr points to 0x98eb2e8 
created new node at 0xb528004c whose previous is 0xb528003c and size is 16 so prev+16 =0xb528004c 
removing node 0xb528003c of size 4096 
created new node at 0xb528204c whose previous is 0xb528203c and size is 16 so prev+16 =0xb528204c 
removing node 0xb528203c of size 2048 
created new node at 0xb528404c whose previous is 0xb528403c and size is 16 so prev+16 =0xb528404c 
removing node 0xb528403c of size 1024 
created new node at 0xb528604c whose previous is 0xb528603c and size is 16 so prev+16 =0xb528604c 
RETURN ADDRESS IS ----------------------->>>>>0xb528603c-> 0xb527e000
removing node 0xb528603c of size 512 


 REQUEST NUMBER 2 TO ALLOCATE BLOCK OF SIZE 895
Adjusted size to: 1024
RETURN ADDRESS 0xb528403c
RETURN ADDRESS IS ----------------------->>>>> 0xb527e400
removing node 0xb528403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 3 TO ALLOCATE BLOCK OF SIZE 4671
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98eb318 and page at 0xb5284000 
adding page node for the page located at 0xb5284000 and pagePtr 0x98eb318 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 1 
stepping through nodes 
 we have 1 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c03c and the new one at 0xb527c068 
New page node points to data page 0xb5284000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 2 
RETURN ADDRESS IS 0xb5284000 


 REQUEST NUMBER 4 TO ALLOCATE BLOCK OF SIZE 4765
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98ecab0 and page at 0xb5288000 
adding page node for the page located at 0xb5288000 and pagePtr 0x98ecab0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 2 
stepping through nodes 
 we have 2 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c068 and the new one at 0xb527c094 
New page node points to data page 0xb5288000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 3 
RETURN ADDRESS IS 0xb5288000 


 REQUEST NUMBER 5 TO ALLOCATE BLOCK OF SIZE 401
Adjusted size to: 512
RETURN ADDRESS 0xb528603c
RETURN ADDRESS IS ----------------------->>>>> 0xb527e200
removing node 0xb528603c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 6 TO ALLOCATE BLOCK OF SIZE 844
Adjusted size to: 1024
removing node 0xb528203c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb528204c whose previous is 0xb528203c and size is 16 so prev+16 =0xb528204c 
RETURN ADDRESS 0xb528203c
RETURN ADDRESS IS ----------------------->>>>> 0xb527e800
removing node 0xb528203c of size 1024 


 REQUEST NUMBER 7 TO ALLOCATE BLOCK OF SIZE 198
Adjusted size to: 256
removing node 0xb528203c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb528204c whose previous is 0xb528203c and size is 16 so prev+16 =0xb528204c 
removing node 0xb528203c of size 512 
created new node at 0xb528604c whose previous is 0xb528603c and size is 16 so prev+16 =0xb528604c 
RETURN ADDRESS 0xb528603c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ec00
removing node 0xb528603c of size 256 


 REQUEST NUMBER 8 TO ALLOCATE BLOCK OF SIZE 218
Adjusted size to: 256
RETURN ADDRESS 0xb528603c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ed00
removing node 0xb528603c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 9 TO ALLOCATE BLOCK OF SIZE 43
Adjusted size to: 64
removing node 0xb528203c of size 512 
*** freeing page for lists of size 4
created new node at 0xb528204c whose previous is 0xb528203c and size is 16 so prev+16 =0xb528204c 
removing node 0xb528203c of size 256 
created new node at 0xb528604c whose previous is 0xb528603c and size is 16 so prev+16 =0xb528604c 
removing node 0xb528603c of size 128 
created new node at 0xb528a04c whose previous is 0xb528a03c and size is 16 so prev+16 =0xb528a04c 
RETURN ADDRESS 0xb528a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ee00
removing node 0xb528a03c of size 64 


 REQUEST NUMBER 10 TO ALLOCATE BLOCK OF SIZE 722
Adjusted size to: 1024
removing node 0xb528003c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb528004c whose previous is 0xb528003c and size is 16 so prev+16 =0xb528004c 
removing node 0xb528003c of size 2048 
created new node at 0xb528c04c whose previous is 0xb528c03c and size is 16 so prev+16 =0xb528c04c 
RETURN ADDRESS 0xb528c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb527f000
removing node 0xb528c03c of size 1024 


 REQUEST NUMBER 11 TO ALLOCATE BLOCK OF SIZE 1777
Adjusted size to: 2048
RETURN ADDRESS 0xb528003c
RETURN ADDRESS IS ----------------------->>>>> 0xb527f800
removing node 0xb528003c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 12 TO ALLOCATE BLOCK OF SIZE 571
Adjusted size to: 1024
RETURN ADDRESS 0xb528c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb527f400
removing node 0xb528c03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 13 TO ALLOCATE BLOCK OF SIZE 30
Adjusted size to: 32
removing node 0xb528a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb528a04c whose previous is 0xb528a03c and size is 16 so prev+16 =0xb528a04c 
RETURN ADDRESS 0xb528a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ee40
removing node 0xb528a03c of size 32 


 REQUEST NUMBER 14 TO ALLOCATE BLOCK OF SIZE 2054
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb528c000 and pagePtr 0x98eb2f8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 3 
stepping through nodes 
 we have 3 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c094 and the new one at 0xb527c0c0 
New page node points to data page 0xb528c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 4 
created new node at 0xb528004c whose previous is 0xb528003c and size is 16 so prev+16 =0xb528004c 
RETURN ADDRESS IS ----------------------->>>>>0xb528003c-> 0xb528c000
removing node 0xb528003c of size 4096 


 REQUEST NUMBER 15 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb528a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ee60
removing node 0xb528a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 16 TO ALLOCATE BLOCK OF SIZE 300
Adjusted size to: 512
removing node 0xb528003c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb528004c whose previous is 0xb528003c and size is 16 so prev+16 =0xb528004c 
removing node 0xb528003c of size 2048 
created new node at 0xb528a04c whose previous is 0xb528a03c and size is 16 so prev+16 =0xb528a04c 
removing node 0xb528a03c of size 1024 
created new node at 0xb528e04c whose previous is 0xb528e03c and size is 16 so prev+16 =0xb528e04c 
RETURN ADDRESS 0xb528e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d000
removing node 0xb528e03c of size 512 


 REQUEST NUMBER 17 TO ALLOCATE BLOCK OF SIZE 643
Adjusted size to: 1024
RETURN ADDRESS 0xb528a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d400
removing node 0xb528a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 18 TO ALLOCATE BLOCK OF SIZE 233
Adjusted size to: 256
RETURN ADDRESS 0xb528203c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ef00
removing node 0xb528203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 19 TO ALLOCATE BLOCK OF SIZE 24
Adjusted size to: 32
removing node 0xb528603c of size 128 
*** freeing page for lists of size 2
created new node at 0xb528604c whose previous is 0xb528603c and size is 16 so prev+16 =0xb528604c 
removing node 0xb528603c of size 64 
created new node at 0xb528204c whose previous is 0xb528203c and size is 16 so prev+16 =0xb528204c 
RETURN ADDRESS 0xb528203c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ee80
removing node 0xb528203c of size 32 


 REQUEST NUMBER 20 TO ALLOCATE BLOCK OF SIZE 7911
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98ee400 and page at 0xb528a000 
adding page node for the page located at 0xb528a000 and pagePtr 0x98ee400 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 4 
stepping through nodes 
 we have 4 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c0c0 and the new one at 0xb527c0ec 
New page node points to data page 0xb528a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 5 
RETURN ADDRESS IS 0xb528a000 


 REQUEST NUMBER 21 TO ALLOCATE BLOCK OF SIZE 479
Adjusted size to: 512
RETURN ADDRESS 0xb528e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d200
removing node 0xb528e03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 22 TO ALLOCATE BLOCK OF SIZE 168
Adjusted size to: 256
removing node 0xb528003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb528004c whose previous is 0xb528003c and size is 16 so prev+16 =0xb528004c 
removing node 0xb528003c of size 1024 
created new node at 0xb528e04c whose previous is 0xb528e03c and size is 16 so prev+16 =0xb528e04c 
removing node 0xb528e03c of size 512 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d800
removing node 0xb529003c of size 256 


 REQUEST NUMBER 23 TO ALLOCATE BLOCK OF SIZE 443
Adjusted size to: 512
RETURN ADDRESS 0xb528e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb528da00
removing node 0xb528e03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 24 TO ALLOCATE BLOCK OF SIZE 862
Adjusted size to: 1024
RETURN ADDRESS 0xb528003c
RETURN ADDRESS IS ----------------------->>>>> 0xb528dc00
removing node 0xb528003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 25 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
RETURN ADDRESS 0xb528203c
RETURN ADDRESS IS ----------------------->>>>> 0xb527eea0
removing node 0xb528203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 26 TO ALLOCATE BLOCK OF SIZE 3360
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5282000 and pagePtr 0x98ee440 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 5 
stepping through nodes 
 we have 5 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c0ec and the new one at 0xb527c118 
New page node points to data page 0xb5282000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 6 
created new node at 0xb528004c whose previous is 0xb528003c and size is 16 so prev+16 =0xb528004c 
RETURN ADDRESS IS ----------------------->>>>>0xb528003c-> 0xb5282000
removing node 0xb528003c of size 4096 


 REQUEST NUMBER 27 TO ALLOCATE BLOCK OF SIZE 4829
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f3170 and page at 0xb528e000 
adding page node for the page located at 0xb528e000 and pagePtr 0x98f3170 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 6 
stepping through nodes 
 we have 6 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c118 and the new one at 0xb527c144 
New page node points to data page 0xb528e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 7 
RETURN ADDRESS IS 0xb528e000 


 REQUEST NUMBER 28 TO ALLOCATE BLOCK OF SIZE 3652
Adjusted size to: 4096
RETURN ADDRESS 0xb528003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5283000
removing node 0xb528003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 29 TO ALLOCATE BLOCK OF SIZE 103
Adjusted size to: 128
removing node 0xb529003c of size 256 
*** freeing page for lists of size 3
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d900
removing node 0xb529003c of size 128 


 REQUEST NUMBER 30 TO ALLOCATE BLOCK OF SIZE 153
Adjusted size to: 256
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5280000 and pagePtr 0x98ef8b0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 7 
stepping through nodes 
 we have 7 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c144 and the new one at 0xb527c170 
New page node points to data page 0xb5280000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 8 
created new node at 0xb529204c whose previous is 0xb529203c and size is 16 so prev+16 =0xb529204c 
removing node 0xb529203c of size 4096 
created new node at 0xb529404c whose previous is 0xb529403c and size is 16 so prev+16 =0xb529404c 
removing node 0xb529403c of size 2048 
created new node at 0xb529604c whose previous is 0xb529603c and size is 16 so prev+16 =0xb529604c 
removing node 0xb529603c of size 1024 
created new node at 0xb529804c whose previous is 0xb529803c and size is 16 so prev+16 =0xb529804c 
removing node 0xb529803c of size 512 
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb529a03c-> 0xb5280000
removing node 0xb529a03c of size 256 


 REQUEST NUMBER 31 TO ALLOCATE BLOCK OF SIZE 166
Adjusted size to: 256
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5280100
removing node 0xb529a03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 32 TO ALLOCATE BLOCK OF SIZE 3982
Adjusted size to: 4096
RETURN ADDRESS 0xb529203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5281000
removing node 0xb529203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 33 TO ALLOCATE BLOCK OF SIZE 290
Adjusted size to: 512
RETURN ADDRESS 0xb529803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5280200
removing node 0xb529803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 34 TO ALLOCATE BLOCK OF SIZE 1083
Adjusted size to: 2048
RETURN ADDRESS 0xb529403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5280800
removing node 0xb529403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 35 TO ALLOCATE BLOCK OF SIZE 633
Adjusted size to: 1024
RETURN ADDRESS 0xb529603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5280400
removing node 0xb529603c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 36 TO ALLOCATE BLOCK OF SIZE 2514
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5296000 and pagePtr 0x98f5320 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 8 
stepping through nodes 
 we have 8 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c170 and the new one at 0xb527c19c 
New page node points to data page 0xb5296000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 9 
created new node at 0xb529404c whose previous is 0xb529403c and size is 16 so prev+16 =0xb529404c 
RETURN ADDRESS IS ----------------------->>>>>0xb529403c-> 0xb5296000
removing node 0xb529403c of size 4096 


 REQUEST NUMBER 37 TO ALLOCATE BLOCK OF SIZE 60
Adjusted size to: 64
RETURN ADDRESS 0xb528603c
RETURN ADDRESS IS ----------------------->>>>> 0xb527eec0
removing node 0xb528603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 38 TO ALLOCATE BLOCK OF SIZE 132
Adjusted size to: 256
removing node 0xb529403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb529404c whose previous is 0xb529403c and size is 16 so prev+16 =0xb529404c 
removing node 0xb529403c of size 2048 
created new node at 0xb528604c whose previous is 0xb528603c and size is 16 so prev+16 =0xb528604c 
removing node 0xb528603c of size 1024 
created new node at 0xb529804c whose previous is 0xb529803c and size is 16 so prev+16 =0xb529804c 
removing node 0xb529803c of size 512 
created new node at 0xb529204c whose previous is 0xb529203c and size is 16 so prev+16 =0xb529204c 
RETURN ADDRESS 0xb529203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297000
removing node 0xb529203c of size 256 


 REQUEST NUMBER 39 TO ALLOCATE BLOCK OF SIZE 1568
Adjusted size to: 2048
RETURN ADDRESS 0xb529403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297800
removing node 0xb529403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 40 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
removing node 0xb529003c of size 128 
*** freeing page for lists of size 2
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 64 
created new node at 0xb529404c whose previous is 0xb529403c and size is 16 so prev+16 =0xb529404c 
RETURN ADDRESS 0xb529403c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d980
removing node 0xb529403c of size 32 


 REQUEST NUMBER 41 TO ALLOCATE BLOCK OF SIZE 193
Adjusted size to: 256
RETURN ADDRESS 0xb529203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297100
removing node 0xb529203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 42 TO ALLOCATE BLOCK OF SIZE 522
Adjusted size to: 1024
RETURN ADDRESS 0xb528603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297400
removing node 0xb528603c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 43 TO ALLOCATE BLOCK OF SIZE 1133
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5286000 and pagePtr 0x98eb328 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 9 
stepping through nodes 
 we have 9 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c19c and the new one at 0xb527c1c8 
New page node points to data page 0xb5286000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 10 
created new node at 0xb529204c whose previous is 0xb529203c and size is 16 so prev+16 =0xb529204c 
removing node 0xb529203c of size 4096 
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb529a03c-> 0xb5286000
removing node 0xb529a03c of size 2048 


 REQUEST NUMBER 44 TO ALLOCATE BLOCK OF SIZE 1543
Adjusted size to: 2048
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5286800
removing node 0xb529a03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 45 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
RETURN ADDRESS 0xb529403c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d9a0
removing node 0xb529403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 46 TO ALLOCATE BLOCK OF SIZE 34
Adjusted size to: 64
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d9c0
removing node 0xb529003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 47 TO ALLOCATE BLOCK OF SIZE 4926
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f1e60 and page at 0xb5290000 
adding page node for the page located at 0xb5290000 and pagePtr 0x98f1e60 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 10 
stepping through nodes 
 we have 10 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c1c8 and the new one at 0xb527c1f4 
New page node points to data page 0xb5290000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 11 
RETURN ADDRESS IS 0xb5290000 


 REQUEST NUMBER 48 TO ALLOCATE BLOCK OF SIZE 32
Adjusted size to: 32
removing node 0xb529803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb529804c whose previous is 0xb529803c and size is 16 so prev+16 =0xb529804c 
removing node 0xb529803c of size 256 
created new node at 0xb529404c whose previous is 0xb529403c and size is 16 so prev+16 =0xb529404c 
removing node 0xb529403c of size 128 
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
removing node 0xb529a03c of size 64 
created new node at 0xb529c04c whose previous is 0xb529c03c and size is 16 so prev+16 =0xb529c04c 
RETURN ADDRESS 0xb529c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297200
removing node 0xb529c03c of size 32 


 REQUEST NUMBER 49 TO ALLOCATE BLOCK OF SIZE 48
Adjusted size to: 64
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297240
removing node 0xb529a03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 50 TO ALLOCATE BLOCK OF SIZE 851
Adjusted size to: 1024
removing node 0xb529203c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb529204c whose previous is 0xb529203c and size is 16 so prev+16 =0xb529204c 
removing node 0xb529203c of size 2048 
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5287000
removing node 0xb529a03c of size 1024 


 REQUEST NUMBER 51 TO ALLOCATE BLOCK OF SIZE 176
Adjusted size to: 256
RETURN ADDRESS 0xb529803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297300
removing node 0xb529803c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 52 TO ALLOCATE BLOCK OF SIZE 216
Adjusted size to: 256
removing node 0xb529a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
removing node 0xb529a03c of size 512 
created new node at 0xb529804c whose previous is 0xb529803c and size is 16 so prev+16 =0xb529804c 
RETURN ADDRESS 0xb529803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5287400
removing node 0xb529803c of size 256 


 REQUEST NUMBER 53 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
RETURN ADDRESS 0xb529c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297220
removing node 0xb529c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 54 TO ALLOCATE BLOCK OF SIZE 46
Adjusted size to: 64
removing node 0xb529403c of size 128 
*** freeing page for lists of size 2
created new node at 0xb529404c whose previous is 0xb529403c and size is 16 so prev+16 =0xb529404c 
RETURN ADDRESS 0xb529403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297280
removing node 0xb529403c of size 64 


 REQUEST NUMBER 55 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb529403c of size 64 
*** freeing page for lists of size 1
created new node at 0xb529404c whose previous is 0xb529403c and size is 16 so prev+16 =0xb529404c 
RETURN ADDRESS 0xb529403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52972c0
removing node 0xb529403c of size 32 


 REQUEST NUMBER 56 TO ALLOCATE BLOCK OF SIZE 4281
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98fa3b8 and page at 0xb529c000 
adding page node for the page located at 0xb529c000 and pagePtr 0x98fa3b8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 11 
stepping through nodes 
 we have 11 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c1f4 and the new one at 0xb527c220 
New page node points to data page 0xb529c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 12 
RETURN ADDRESS IS 0xb529c000 


 REQUEST NUMBER 57 TO ALLOCATE BLOCK OF SIZE 1881
Adjusted size to: 2048
RETURN ADDRESS 0xb529203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5287800
removing node 0xb529203c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 58 TO ALLOCATE BLOCK OF SIZE 25
Adjusted size to: 32
RETURN ADDRESS 0xb529403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52972e0
removing node 0xb529403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 59 TO ALLOCATE BLOCK OF SIZE 371
Adjusted size to: 512
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5287600
removing node 0xb529a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 60 TO ALLOCATE BLOCK OF SIZE 55
Adjusted size to: 64
removing node 0xb529803c of size 256 
*** freeing page for lists of size 3
created new node at 0xb529804c whose previous is 0xb529803c and size is 16 so prev+16 =0xb529804c 
removing node 0xb529803c of size 128 
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5287500
removing node 0xb529a03c of size 64 


 REQUEST NUMBER 61 TO ALLOCATE BLOCK OF SIZE 3252
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5294000 and pagePtr 0x98f7fe0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 12 
stepping through nodes 
 we have 12 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c220 and the new one at 0xb527c24c 
New page node points to data page 0xb5294000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 13 
created new node at 0xb529204c whose previous is 0xb529203c and size is 16 so prev+16 =0xb529204c 
RETURN ADDRESS IS ----------------------->>>>>0xb529203c-> 0xb5294000
removing node 0xb529203c of size 4096 


 REQUEST NUMBER 62 TO ALLOCATE BLOCK OF SIZE 1180
Adjusted size to: 2048
removing node 0xb529203c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb529204c whose previous is 0xb529203c and size is 16 so prev+16 =0xb529204c 
RETURN ADDRESS 0xb529203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5295000
removing node 0xb529203c of size 2048 


 REQUEST NUMBER 63 TO ALLOCATE BLOCK OF SIZE 75
Adjusted size to: 128
RETURN ADDRESS 0xb529803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5287580
removing node 0xb529803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 64 TO ALLOCATE BLOCK OF SIZE 1439
Adjusted size to: 2048
RETURN ADDRESS 0xb529203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5295800
removing node 0xb529203c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 65 TO ALLOCATE BLOCK OF SIZE 3693
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5292000 and pagePtr 0x98f5340 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 13 
stepping through nodes 
 we have 13 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c24c and the new one at 0xb527c278 
New page node points to data page 0xb5292000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 14 
created new node at 0xb529804c whose previous is 0xb529803c and size is 16 so prev+16 =0xb529804c 
RETURN ADDRESS IS ----------------------->>>>>0xb529803c-> 0xb5292000
removing node 0xb529803c of size 4096 


 REQUEST NUMBER 66 TO ALLOCATE BLOCK OF SIZE 2122
Adjusted size to: 4096
RETURN ADDRESS 0xb529803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5293000
removing node 0xb529803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 67 TO ALLOCATE BLOCK OF SIZE 865
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5298000 and pagePtr 0x98f5350 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 14 
stepping through nodes 
 we have 14 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c278 and the new one at 0xb527c2a4 
New page node points to data page 0xb5298000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 15 
created new node at 0xb529e04c whose previous is 0xb529e03c and size is 16 so prev+16 =0xb529e04c 
removing node 0xb529e03c of size 4096 
created new node at 0xb52a004c whose previous is 0xb52a003c and size is 16 so prev+16 =0xb52a004c 
removing node 0xb52a003c of size 2048 
created new node at 0xb52a204c whose previous is 0xb52a203c and size is 16 so prev+16 =0xb52a204c 
RETURN ADDRESS IS ----------------------->>>>>0xb52a203c-> 0xb5298000
removing node 0xb52a203c of size 1024 


 REQUEST NUMBER 68 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
removing node 0xb529a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5287540
removing node 0xb529a03c of size 32 


 REQUEST NUMBER 69 TO ALLOCATE BLOCK OF SIZE 4147
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98fef88 and page at 0xb52a4000 
adding page node for the page located at 0xb52a4000 and pagePtr 0x98fef88 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 15 
stepping through nodes 
 we have 15 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c2a4 and the new one at 0xb527c2d0 
New page node points to data page 0xb52a4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 16 
RETURN ADDRESS IS 0xb52a4000 


 REQUEST NUMBER 70 TO ALLOCATE BLOCK OF SIZE 2744
Adjusted size to: 4096
RETURN ADDRESS 0xb529e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5299000
removing node 0xb529e03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 71 TO ALLOCATE BLOCK OF SIZE 109
Adjusted size to: 128
removing node 0xb52a203c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52a204c whose previous is 0xb52a203c and size is 16 so prev+16 =0xb52a204c 
removing node 0xb52a203c of size 512 
created new node at 0xb529e04c whose previous is 0xb529e03c and size is 16 so prev+16 =0xb529e04c 
removing node 0xb529e03c of size 256 
created new node at 0xb52a604c whose previous is 0xb52a603c and size is 16 so prev+16 =0xb52a604c 
RETURN ADDRESS 0xb52a603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298400
removing node 0xb52a603c of size 128 


 REQUEST NUMBER 72 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5287560
removing node 0xb529a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 73 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
removing node 0xb52a603c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52a604c whose previous is 0xb52a603c and size is 16 so prev+16 =0xb52a604c 
RETURN ADDRESS 0xb52a603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298480
removing node 0xb52a603c of size 64 


 REQUEST NUMBER 74 TO ALLOCATE BLOCK OF SIZE 899
Adjusted size to: 1024
removing node 0xb52a003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52a004c whose previous is 0xb52a003c and size is 16 so prev+16 =0xb52a004c 
RETURN ADDRESS 0xb52a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298800
removing node 0xb52a003c of size 1024 


 REQUEST NUMBER 75 TO ALLOCATE BLOCK OF SIZE 1023
Adjusted size to: 1024
RETURN ADDRESS 0xb52a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298c00
removing node 0xb52a003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 76 TO ALLOCATE BLOCK OF SIZE 92
Adjusted size to: 128
removing node 0xb529e03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb529e04c whose previous is 0xb529e03c and size is 16 so prev+16 =0xb529e04c 
RETURN ADDRESS 0xb529e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298500
removing node 0xb529e03c of size 128 


 REQUEST NUMBER 77 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
removing node 0xb52a603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52a604c whose previous is 0xb52a603c and size is 16 so prev+16 =0xb52a604c 
RETURN ADDRESS 0xb52a603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52984c0
removing node 0xb52a603c of size 32 


 REQUEST NUMBER 78 TO ALLOCATE BLOCK OF SIZE 30
Adjusted size to: 32
RETURN ADDRESS 0xb52a603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52984e0
removing node 0xb52a603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 79 TO ALLOCATE BLOCK OF SIZE 103
Adjusted size to: 128
RETURN ADDRESS 0xb529e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298580
removing node 0xb529e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 80 TO ALLOCATE BLOCK OF SIZE 832
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb529e000 and pagePtr 0x98febd8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 16 
stepping through nodes 
 we have 16 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c2d0 and the new one at 0xb527c2fc 
New page node points to data page 0xb529e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 17 
created new node at 0xb52a604c whose previous is 0xb52a603c and size is 16 so prev+16 =0xb52a604c 
removing node 0xb52a603c of size 4096 
created new node at 0xb52a004c whose previous is 0xb52a003c and size is 16 so prev+16 =0xb52a004c 
removing node 0xb52a003c of size 2048 
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb529a03c-> 0xb529e000
removing node 0xb529a03c of size 1024 


 REQUEST NUMBER 81 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb52a203c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52a204c whose previous is 0xb52a203c and size is 16 so prev+16 =0xb52a204c 
removing node 0xb52a203c of size 256 
created new node at 0xb52a804c whose previous is 0xb52a803c and size is 16 so prev+16 =0xb52a804c 
removing node 0xb52a803c of size 128 
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
removing node 0xb52aa03c of size 64 
created new node at 0xb52ac04c whose previous is 0xb52ac03c and size is 16 so prev+16 =0xb52ac04c 
RETURN ADDRESS 0xb52ac03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298600
removing node 0xb52ac03c of size 32 


 REQUEST NUMBER 82 TO ALLOCATE BLOCK OF SIZE 358
Adjusted size to: 512
removing node 0xb529a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529e400
removing node 0xb529a03c of size 512 


 REQUEST NUMBER 83 TO ALLOCATE BLOCK OF SIZE 2302
Adjusted size to: 4096
RETURN ADDRESS 0xb52a603c
RETURN ADDRESS IS ----------------------->>>>> 0xb529f000
removing node 0xb52a603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 84 TO ALLOCATE BLOCK OF SIZE 99
Adjusted size to: 128
RETURN ADDRESS 0xb52a803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298680
removing node 0xb52a803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 85 TO ALLOCATE BLOCK OF SIZE 507
Adjusted size to: 512
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529e600
removing node 0xb529a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 86 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
RETURN ADDRESS 0xb52ac03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298620
removing node 0xb52ac03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 87 TO ALLOCATE BLOCK OF SIZE 3497
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52ac000 and pagePtr 0x9901768 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 17 
stepping through nodes 
 we have 17 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c2fc and the new one at 0xb527c328 
New page node points to data page 0xb52ac000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 18 
created new node at 0xb529a04c whose previous is 0xb529a03c and size is 16 so prev+16 =0xb529a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb529a03c-> 0xb52ac000
removing node 0xb529a03c of size 4096 


 REQUEST NUMBER 88 TO ALLOCATE BLOCK OF SIZE 53
Adjusted size to: 64
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298640
removing node 0xb52aa03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 89 TO ALLOCATE BLOCK OF SIZE 3718
Adjusted size to: 4096
RETURN ADDRESS 0xb529a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ad000
removing node 0xb529a03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 90 TO ALLOCATE BLOCK OF SIZE 3015
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb529a000 and pagePtr 0x99013f0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 18 
stepping through nodes 
 we have 18 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c328 and the new one at 0xb527c354 
New page node points to data page 0xb529a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 19 
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52aa03c-> 0xb529a000
removing node 0xb52aa03c of size 4096 


 REQUEST NUMBER 91 TO ALLOCATE BLOCK OF SIZE 4304
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9901748 and page at 0xb52a8000 
adding page node for the page located at 0xb52a8000 and pagePtr 0x9901748 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 19 
stepping through nodes 
 we have 19 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c354 and the new one at 0xb527c380 
New page node points to data page 0xb52a8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 20 
RETURN ADDRESS IS 0xb52a8000 


 REQUEST NUMBER 92 TO ALLOCATE BLOCK OF SIZE 37
Adjusted size to: 64
removing node 0xb52a203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52a204c whose previous is 0xb52a203c and size is 16 so prev+16 =0xb52a204c 
removing node 0xb52a203c of size 128 
created new node at 0xb52a604c whose previous is 0xb52a603c and size is 16 so prev+16 =0xb52a604c 
RETURN ADDRESS 0xb52a603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298700
removing node 0xb52a603c of size 64 


 REQUEST NUMBER 93 TO ALLOCATE BLOCK OF SIZE 77
Adjusted size to: 128
RETURN ADDRESS 0xb52a203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298780
removing node 0xb52a203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 94 TO ALLOCATE BLOCK OF SIZE 905
Adjusted size to: 1024
removing node 0xb52a003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52a004c whose previous is 0xb52a003c and size is 16 so prev+16 =0xb52a004c 
RETURN ADDRESS 0xb52a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb529e800
removing node 0xb52a003c of size 1024 


 REQUEST NUMBER 95 TO ALLOCATE BLOCK OF SIZE 6558
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98febf8 and page at 0xb52a2000 
adding page node for the page located at 0xb52a2000 and pagePtr 0x98febf8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 20 
stepping through nodes 
 we have 20 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c380 and the new one at 0xb527c3ac 
New page node points to data page 0xb52a2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 21 
RETURN ADDRESS IS 0xb52a2000 


 REQUEST NUMBER 96 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
removing node 0xb52a603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52a604c whose previous is 0xb52a603c and size is 16 so prev+16 =0xb52a604c 
RETURN ADDRESS 0xb52a603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298740
removing node 0xb52a603c of size 32 


 REQUEST NUMBER 97 TO ALLOCATE BLOCK OF SIZE 102
Adjusted size to: 128
removing node 0xb52a003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52a004c whose previous is 0xb52a003c and size is 16 so prev+16 =0xb52a004c 
removing node 0xb52a003c of size 512 
created new node at 0xb52ae04c whose previous is 0xb52ae03c and size is 16 so prev+16 =0xb52ae04c 
removing node 0xb52ae03c of size 256 
created new node at 0xb52b004c whose previous is 0xb52b003c and size is 16 so prev+16 =0xb52b004c 
RETURN ADDRESS 0xb52b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb529ec00
removing node 0xb52b003c of size 128 


 REQUEST NUMBER 98 TO ALLOCATE BLOCK OF SIZE 1043
Adjusted size to: 2048
removing node 0xb52aa03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529b000
removing node 0xb52aa03c of size 2048 


 REQUEST NUMBER 99 TO ALLOCATE BLOCK OF SIZE 4992
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9908038 and page at 0xb52b2000 
adding page node for the page located at 0xb52b2000 and pagePtr 0x9908038 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 21 
stepping through nodes 
 we have 21 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c3ac and the new one at 0xb527c3d8 
New page node points to data page 0xb52b2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 22 
RETURN ADDRESS IS 0xb52b2000 


 REQUEST NUMBER 100 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
RETURN ADDRESS 0xb52a603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5298760
removing node 0xb52a603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 101 TO ALLOCATE BLOCK OF SIZE 240
Adjusted size to: 256
RETURN ADDRESS 0xb52ae03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529ed00
removing node 0xb52ae03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 102 TO ALLOCATE BLOCK OF SIZE 4474
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9907b90 and page at 0xb52ae000 
adding page node for the page located at 0xb52ae000 and pagePtr 0x9907b90 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 22 
stepping through nodes 
 we have 22 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c3d8 and the new one at 0xb527c404 
New page node points to data page 0xb52ae000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 23 
RETURN ADDRESS IS 0xb52ae000 


 REQUEST NUMBER 103 TO ALLOCATE BLOCK OF SIZE 3546
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52a6000 and pagePtr 0x9901758 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 23 
stepping through nodes 
 we have 23 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c404 and the new one at 0xb527c430 
New page node points to data page 0xb52a6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 24 
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
RETURN ADDRESS IS ----------------------->>>>>0xb52b403c-> 0xb52a6000
removing node 0xb52b403c of size 4096 


 REQUEST NUMBER 104 TO ALLOCATE BLOCK OF SIZE 1977
Adjusted size to: 2048
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529b800
removing node 0xb52aa03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 105 TO ALLOCATE BLOCK OF SIZE 31
Adjusted size to: 32
removing node 0xb52b003c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52b004c whose previous is 0xb52b003c and size is 16 so prev+16 =0xb52b004c 
removing node 0xb52b003c of size 64 
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529ec80
removing node 0xb52aa03c of size 32 


 REQUEST NUMBER 106 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529eca0
removing node 0xb52aa03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 107 TO ALLOCATE BLOCK OF SIZE 724
Adjusted size to: 1024
removing node 0xb52b403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
removing node 0xb52b403c of size 2048 
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7000
removing node 0xb52aa03c of size 1024 


 REQUEST NUMBER 108 TO ALLOCATE BLOCK OF SIZE 71
Adjusted size to: 128
removing node 0xb52a003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52a004c whose previous is 0xb52a003c and size is 16 so prev+16 =0xb52a004c 
removing node 0xb52a003c of size 256 
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb529ee00
removing node 0xb52b603c of size 128 


 REQUEST NUMBER 109 TO ALLOCATE BLOCK OF SIZE 68
Adjusted size to: 128
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb529ee80
removing node 0xb52b603c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 110 TO ALLOCATE BLOCK OF SIZE 49
Adjusted size to: 64
RETURN ADDRESS 0xb52b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb529ecc0
removing node 0xb52b003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 111 TO ALLOCATE BLOCK OF SIZE 205
Adjusted size to: 256
RETURN ADDRESS 0xb52a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb529ef00
removing node 0xb52a003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 112 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb52aa03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
removing node 0xb52aa03c of size 512 
created new node at 0xb52a004c whose previous is 0xb52a003c and size is 16 so prev+16 =0xb52a004c 
removing node 0xb52a003c of size 256 
created new node at 0xb52b004c whose previous is 0xb52b003c and size is 16 so prev+16 =0xb52b004c 
removing node 0xb52b003c of size 128 
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
removing node 0xb52b603c of size 64 
created new node at 0xb52b804c whose previous is 0xb52b803c and size is 16 so prev+16 =0xb52b804c 
RETURN ADDRESS 0xb52b803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7400
removing node 0xb52b803c of size 32 


 REQUEST NUMBER 113 TO ALLOCATE BLOCK OF SIZE 106
Adjusted size to: 128
RETURN ADDRESS 0xb52b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7480
removing node 0xb52b003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 114 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb52b803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7420
removing node 0xb52b803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 115 TO ALLOCATE BLOCK OF SIZE 6283
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x990c0d8 and page at 0xb52b8000 
adding page node for the page located at 0xb52b8000 and pagePtr 0x990c0d8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 24 
stepping through nodes 
 we have 24 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c430 and the new one at 0xb527c45c 
New page node points to data page 0xb52b8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 25 
RETURN ADDRESS IS 0xb52b8000 


 REQUEST NUMBER 116 TO ALLOCATE BLOCK OF SIZE 3890
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52b0000 and pagePtr 0x9907ba0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 25 
stepping through nodes 
 we have 25 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c45c and the new one at 0xb527c488 
New page node points to data page 0xb52b0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 26 
created new node at 0xb52ba04c whose previous is 0xb52ba03c and size is 16 so prev+16 =0xb52ba04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52ba03c-> 0xb52b0000
removing node 0xb52ba03c of size 4096 


 REQUEST NUMBER 117 TO ALLOCATE BLOCK OF SIZE 963
Adjusted size to: 1024
removing node 0xb52b403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7800
removing node 0xb52b403c of size 1024 


 REQUEST NUMBER 118 TO ALLOCATE BLOCK OF SIZE 420
Adjusted size to: 512
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7600
removing node 0xb52aa03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 119 TO ALLOCATE BLOCK OF SIZE 1011
Adjusted size to: 1024
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7c00
removing node 0xb52b403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 120 TO ALLOCATE BLOCK OF SIZE 3915
Adjusted size to: 4096
RETURN ADDRESS 0xb52ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b1000
removing node 0xb52ba03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 121 TO ALLOCATE BLOCK OF SIZE 3077
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52ba000 and pagePtr 0x990a660 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 26 
stepping through nodes 
 we have 26 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c488 and the new one at 0xb527c4b4 
New page node points to data page 0xb52ba000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 27 
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
RETURN ADDRESS IS ----------------------->>>>>0xb52b403c-> 0xb52ba000
removing node 0xb52b403c of size 4096 


 REQUEST NUMBER 122 TO ALLOCATE BLOCK OF SIZE 868
Adjusted size to: 1024
removing node 0xb52b403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
removing node 0xb52b403c of size 2048 
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb000
removing node 0xb52aa03c of size 1024 


 REQUEST NUMBER 123 TO ALLOCATE BLOCK OF SIZE 3493
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52bc000 and pagePtr 0x9911188 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 27 
stepping through nodes 
 we have 27 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c4b4 and the new one at 0xb527c4e0 
New page node points to data page 0xb52bc000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 28 
created new node at 0xb52be04c whose previous is 0xb52be03c and size is 16 so prev+16 =0xb52be04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52be03c-> 0xb52bc000
removing node 0xb52be03c of size 4096 


 REQUEST NUMBER 124 TO ALLOCATE BLOCK OF SIZE 3009
Adjusted size to: 4096
RETURN ADDRESS 0xb52be03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bd000
removing node 0xb52be03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 125 TO ALLOCATE BLOCK OF SIZE 207
Adjusted size to: 256
RETURN ADDRESS 0xb52a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7500
removing node 0xb52a003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 126 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb52b603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7440
removing node 0xb52b603c of size 32 


 REQUEST NUMBER 127 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
removing node 0xb52aa03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
removing node 0xb52aa03c of size 512 
created new node at 0xb52a004c whose previous is 0xb52a003c and size is 16 so prev+16 =0xb52a004c 
removing node 0xb52a003c of size 256 
created new node at 0xb52be04c whose previous is 0xb52be03c and size is 16 so prev+16 =0xb52be04c 
removing node 0xb52be03c of size 128 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb400
removing node 0xb52c003c of size 64 


 REQUEST NUMBER 128 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a7460
removing node 0xb52b603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 129 TO ALLOCATE BLOCK OF SIZE 42
Adjusted size to: 64
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb440
removing node 0xb52c003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 130 TO ALLOCATE BLOCK OF SIZE 339
Adjusted size to: 512
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb600
removing node 0xb52aa03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 131 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
removing node 0xb52be03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52be04c whose previous is 0xb52be03c and size is 16 so prev+16 =0xb52be04c 
removing node 0xb52be03c of size 64 
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb480
removing node 0xb52aa03c of size 32 


 REQUEST NUMBER 132 TO ALLOCATE BLOCK OF SIZE 214
Adjusted size to: 256
RETURN ADDRESS 0xb52a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb500
removing node 0xb52a003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 133 TO ALLOCATE BLOCK OF SIZE 2670
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52a0000 and pagePtr 0x9911198 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 28 
stepping through nodes 
 we have 28 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c4e0 and the new one at 0xb527c50c 
New page node points to data page 0xb52a0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 29 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
RETURN ADDRESS IS ----------------------->>>>>0xb52c003c-> 0xb52a0000
removing node 0xb52c003c of size 4096 


 REQUEST NUMBER 134 TO ALLOCATE BLOCK OF SIZE 63
Adjusted size to: 64
RETURN ADDRESS 0xb52be03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb4c0
removing node 0xb52be03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 135 TO ALLOCATE BLOCK OF SIZE 81
Adjusted size to: 128
removing node 0xb52b403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
removing node 0xb52b403c of size 1024 
created new node at 0xb52be04c whose previous is 0xb52be03c and size is 16 so prev+16 =0xb52be04c 
removing node 0xb52be03c of size 512 
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
removing node 0xb52b603c of size 256 
created new node at 0xb52c204c whose previous is 0xb52c203c and size is 16 so prev+16 =0xb52c204c 
RETURN ADDRESS 0xb52c203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb800
removing node 0xb52c203c of size 128 


 REQUEST NUMBER 136 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb4a0
removing node 0xb52aa03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 137 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
removing node 0xb52c203c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52c204c whose previous is 0xb52c203c and size is 16 so prev+16 =0xb52c204c 
removing node 0xb52c203c of size 64 
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb880
removing node 0xb52aa03c of size 32 


 REQUEST NUMBER 138 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb8a0
removing node 0xb52aa03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 139 TO ALLOCATE BLOCK OF SIZE 290
Adjusted size to: 512
RETURN ADDRESS 0xb52be03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bba00
removing node 0xb52be03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 140 TO ALLOCATE BLOCK OF SIZE 370
Adjusted size to: 512
removing node 0xb52b403c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bbc00
removing node 0xb52b403c of size 512 


 REQUEST NUMBER 141 TO ALLOCATE BLOCK OF SIZE 200
Adjusted size to: 256
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb900
removing node 0xb52b603c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 142 TO ALLOCATE BLOCK OF SIZE 20
Adjusted size to: 32
removing node 0xb52c203c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52c204c whose previous is 0xb52c203c and size is 16 so prev+16 =0xb52c204c 
RETURN ADDRESS 0xb52c203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb8c0
removing node 0xb52c203c of size 32 


 REQUEST NUMBER 143 TO ALLOCATE BLOCK OF SIZE 916
Adjusted size to: 1024
removing node 0xb52c003c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
removing node 0xb52c003c of size 2048 
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1000
removing node 0xb52b603c of size 1024 


 REQUEST NUMBER 144 TO ALLOCATE BLOCK OF SIZE 45
Adjusted size to: 64
removing node 0xb52b403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
removing node 0xb52b403c of size 256 
created new node at 0xb52be04c whose previous is 0xb52be03c and size is 16 so prev+16 =0xb52be04c 
removing node 0xb52be03c of size 128 
created new node at 0xb52aa04c whose previous is 0xb52aa03c and size is 16 so prev+16 =0xb52aa04c 
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bbe00
removing node 0xb52aa03c of size 64 


 REQUEST NUMBER 145 TO ALLOCATE BLOCK OF SIZE 178
Adjusted size to: 256
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bbf00
removing node 0xb52b403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 146 TO FREE BLOCK 0xb528d9a0  OF SIZE 21
coalescing blocks if possible
trying to coalesce a block at ptr 0xb528d9a0 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb52c204c whose previous is 0xb52c203c and size is 16 so prev+16 =0xb52c204c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb52c2000 -- 0xb52c4000| 

 COUNT: 2  - ends at 0xb52c204c 
	 1 -> 0xb52aa000 -- 0xb52ac000| 

 COUNT: 1  - ends at 0xb52aa03c 
	 2 -> 0xb52be000 -- 0xb52c0000| 

 COUNT: 1  - ends at 0xb52be03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb52b6000 -- 0xb52b8000| 

 COUNT: 1  - ends at 0xb52b603c 
	 6 -> 0xb52c0000 -- 0xb52c2000| 

 COUNT: 1  - ends at 0xb52c003c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 147 TO ALLOCATE BLOCK OF SIZE 385
Adjusted size to: 512
removing node 0xb52b603c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1400
removing node 0xb52b603c of size 512 


 REQUEST NUMBER 148 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb52c203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb8e0
removing node 0xb52c203c of size 32 


 REQUEST NUMBER 149 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
RETURN ADDRESS 0xb52aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bbe40
removing node 0xb52aa03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 150 TO ALLOCATE BLOCK OF SIZE 4888
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x990da10 and page at 0xb52aa000 
adding page node for the page located at 0xb52aa000 and pagePtr 0x990da10 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 29 
stepping through nodes 
 we have 29 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c50c and the new one at 0xb527c538 
New page node points to data page 0xb52aa000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 30 
RETURN ADDRESS IS 0xb52aa000 


 REQUEST NUMBER 151 TO ALLOCATE BLOCK OF SIZE 227
Adjusted size to: 256
removing node 0xb52b603c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1600
removing node 0xb52b603c of size 256 


 REQUEST NUMBER 152 TO ALLOCATE BLOCK OF SIZE 104
Adjusted size to: 128
RETURN ADDRESS 0xb52be03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bbe80
removing node 0xb52be03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 153 TO ALLOCATE BLOCK OF SIZE 2418
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52be000 and pagePtr 0x9912bf8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 30 
stepping through nodes 
 we have 30 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c538 and the new one at 0xb527c564 
New page node points to data page 0xb52be000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 31 
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
RETURN ADDRESS IS ----------------------->>>>>0xb52b403c-> 0xb52be000
removing node 0xb52b403c of size 4096 


 REQUEST NUMBER 154 TO ALLOCATE BLOCK OF SIZE 909
Adjusted size to: 1024
removing node 0xb52c003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1800
removing node 0xb52c003c of size 1024 


 REQUEST NUMBER 155 TO ALLOCATE BLOCK OF SIZE 7032
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f8a88 and page at 0xb52c4000 
adding page node for the page located at 0xb52c4000 and pagePtr 0x98f8a88 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 31 
stepping through nodes 
 we have 31 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c564 and the new one at 0xb527c590 
New page node points to data page 0xb52c4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 32 
RETURN ADDRESS IS 0xb52c4000 


 REQUEST NUMBER 156 TO ALLOCATE BLOCK OF SIZE 1508
Adjusted size to: 2048
removing node 0xb52b403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bf000
removing node 0xb52b403c of size 2048 


 REQUEST NUMBER 157 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
RETURN ADDRESS 0xb52c203c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d9a0
removing node 0xb52c203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 158 TO ALLOCATE BLOCK OF SIZE 936
Adjusted size to: 1024
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1c00
removing node 0xb52c003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 159 TO ALLOCATE BLOCK OF SIZE 25
Adjusted size to: 32
removing node 0xb52b603c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
removing node 0xb52b603c of size 128 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
removing node 0xb52c003c of size 64 
created new node at 0xb52c204c whose previous is 0xb52c203c and size is 16 so prev+16 =0xb52c204c 
RETURN ADDRESS 0xb52c203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1700
removing node 0xb52c203c of size 32 


 REQUEST NUMBER 160 TO ALLOCATE BLOCK OF SIZE 2467
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52c6000 and pagePtr 0x9918ae8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 32 
stepping through nodes 
 we have 32 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c590 and the new one at 0xb527c5bc 
New page node points to data page 0xb52c6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 33 
created new node at 0xb52c804c whose previous is 0xb52c803c and size is 16 so prev+16 =0xb52c804c 
RETURN ADDRESS IS ----------------------->>>>>0xb52c803c-> 0xb52c6000
removing node 0xb52c803c of size 4096 


 REQUEST NUMBER 161 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1740
removing node 0xb52c003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 162 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
removing node 0xb52b603c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1780
removing node 0xb52b603c of size 64 


 REQUEST NUMBER 163 TO ALLOCATE BLOCK OF SIZE 47
Adjusted size to: 64
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a17c0
removing node 0xb52b603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 164 TO ALLOCATE BLOCK OF SIZE 3254
Adjusted size to: 4096
RETURN ADDRESS 0xb52c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c7000
removing node 0xb52c803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 165 TO ALLOCATE BLOCK OF SIZE 35
Adjusted size to: 64
removing node 0xb52b403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
removing node 0xb52b403c of size 1024 
created new node at 0xb52c804c whose previous is 0xb52c803c and size is 16 so prev+16 =0xb52c804c 
removing node 0xb52c803c of size 512 
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
removing node 0xb52b603c of size 256 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
removing node 0xb52c003c of size 128 
created new node at 0xb52ca04c whose previous is 0xb52ca03c and size is 16 so prev+16 =0xb52ca04c 
RETURN ADDRESS 0xb52ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bf800
removing node 0xb52ca03c of size 64 


 REQUEST NUMBER 166 TO ALLOCATE BLOCK OF SIZE 3232
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52cc000 and pagePtr 0x991a238 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 33 
stepping through nodes 
 we have 33 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c5bc and the new one at 0xb527c5e8 
New page node points to data page 0xb52cc000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 34 
created new node at 0xb52ce04c whose previous is 0xb52ce03c and size is 16 so prev+16 =0xb52ce04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52ce03c-> 0xb52cc000
removing node 0xb52ce03c of size 4096 


 REQUEST NUMBER 167 TO ALLOCATE BLOCK OF SIZE 139
Adjusted size to: 256
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bf900
removing node 0xb52b603c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 168 TO ALLOCATE BLOCK OF SIZE 93
Adjusted size to: 128
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bf880
removing node 0xb52c003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 169 TO ALLOCATE BLOCK OF SIZE 2400
Adjusted size to: 4096
RETURN ADDRESS 0xb52ce03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52cd000
removing node 0xb52ce03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 170 TO ALLOCATE BLOCK OF SIZE 53
Adjusted size to: 64
RETURN ADDRESS 0xb52ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bf840
removing node 0xb52ca03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 171 TO ALLOCATE BLOCK OF SIZE 168
Adjusted size to: 256
removing node 0xb52c803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52c804c whose previous is 0xb52c803c and size is 16 so prev+16 =0xb52c804c 
RETURN ADDRESS 0xb52c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bfa00
removing node 0xb52c803c of size 256 


 REQUEST NUMBER 172 TO ALLOCATE BLOCK OF SIZE 1377
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52ca000 and pagePtr 0x991a200 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 34 
stepping through nodes 
 we have 34 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c5e8 and the new one at 0xb527c614 
New page node points to data page 0xb52ca000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 35 
created new node at 0xb52ce04c whose previous is 0xb52ce03c and size is 16 so prev+16 =0xb52ce04c 
removing node 0xb52ce03c of size 4096 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
RETURN ADDRESS IS ----------------------->>>>>0xb52c003c-> 0xb52ca000
removing node 0xb52c003c of size 2048 


 REQUEST NUMBER 173 TO ALLOCATE BLOCK OF SIZE 3410
Adjusted size to: 4096
RETURN ADDRESS 0xb52ce03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52cb000
removing node 0xb52ce03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 174 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb52c203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1720
removing node 0xb52c203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 175 TO ALLOCATE BLOCK OF SIZE 333
Adjusted size to: 512
removing node 0xb52b403c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bfc00
removing node 0xb52b403c of size 512 


 REQUEST NUMBER 176 TO ALLOCATE BLOCK OF SIZE 3056
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52c2000 and pagePtr 0x9913980 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 35 
stepping through nodes 
 we have 35 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c614 and the new one at 0xb527c640 
New page node points to data page 0xb52c2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 36 
created new node at 0xb52ce04c whose previous is 0xb52ce03c and size is 16 so prev+16 =0xb52ce04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52ce03c-> 0xb52c2000
removing node 0xb52ce03c of size 4096 


 REQUEST NUMBER 177 TO ALLOCATE BLOCK OF SIZE 64
Adjusted size to: 64
removing node 0xb52c803c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52c804c whose previous is 0xb52c803c and size is 16 so prev+16 =0xb52c804c 
removing node 0xb52c803c of size 128 
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bfb00
removing node 0xb52b603c of size 64 


 REQUEST NUMBER 178 TO ALLOCATE BLOCK OF SIZE 5363
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x991dab8 and page at 0xb52d0000 
adding page node for the page located at 0xb52d0000 and pagePtr 0x991dab8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 36 
stepping through nodes 
 we have 36 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c640 and the new one at 0xb527c66c 
New page node points to data page 0xb52d0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 37 
RETURN ADDRESS IS 0xb52d0000 


 REQUEST NUMBER 179 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
removing node 0xb52b603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52b604c whose previous is 0xb52b603c and size is 16 so prev+16 =0xb52b604c 
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bfb40
removing node 0xb52b603c of size 32 


 REQUEST NUMBER 180 TO ALLOCATE BLOCK OF SIZE 304
Adjusted size to: 512
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bfe00
removing node 0xb52b403c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 181 TO ALLOCATE BLOCK OF SIZE 345
Adjusted size to: 512
removing node 0xb52c003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
removing node 0xb52c003c of size 1024 
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ca800
removing node 0xb52b403c of size 512 


 REQUEST NUMBER 182 TO ALLOCATE BLOCK OF SIZE 109
Adjusted size to: 128
RETURN ADDRESS 0xb52c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bfb80
removing node 0xb52c803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 183 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
RETURN ADDRESS 0xb52b603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bfb60
removing node 0xb52b603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 184 TO ALLOCATE BLOCK OF SIZE 7862
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x991da60 and page at 0xb52b6000 
adding page node for the page located at 0xb52b6000 and pagePtr 0x991da60 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 37 
stepping through nodes 
 we have 37 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c66c and the new one at 0xb527c698 
New page node points to data page 0xb52b6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 38 
RETURN ADDRESS IS 0xb52b6000 


 REQUEST NUMBER 185 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
removing node 0xb52b403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52b404c whose previous is 0xb52b403c and size is 16 so prev+16 =0xb52b404c 
removing node 0xb52b403c of size 256 
created new node at 0xb52c804c whose previous is 0xb52c803c and size is 16 so prev+16 =0xb52c804c 
removing node 0xb52c803c of size 128 
created new node at 0xb52d204c whose previous is 0xb52d203c and size is 16 so prev+16 =0xb52d204c 
removing node 0xb52d203c of size 64 
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52caa00
removing node 0xb52d403c of size 32 


 REQUEST NUMBER 186 TO ALLOCATE BLOCK OF SIZE 61
Adjusted size to: 64
RETURN ADDRESS 0xb52d203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52caa40
removing node 0xb52d203c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 187 TO ALLOCATE BLOCK OF SIZE 751
Adjusted size to: 1024
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52cac00
removing node 0xb52c003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 188 TO ALLOCATE BLOCK OF SIZE 3902
Adjusted size to: 4096
RETURN ADDRESS 0xb52ce03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c3000
removing node 0xb52ce03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 189 TO ALLOCATE BLOCK OF SIZE 66
Adjusted size to: 128
RETURN ADDRESS 0xb52c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52caa80
removing node 0xb52c803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 190 TO ALLOCATE BLOCK OF SIZE 236
Adjusted size to: 256
RETURN ADDRESS 0xb52b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52cab00
removing node 0xb52b403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 191 TO ALLOCATE BLOCK OF SIZE 377
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52b4000 and pagePtr 0x98f8a78 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 38 
stepping through nodes 
 we have 38 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c698 and the new one at 0xb527c6c4 
New page node points to data page 0xb52b4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 39 
created new node at 0xb52c804c whose previous is 0xb52c803c and size is 16 so prev+16 =0xb52c804c 
removing node 0xb52c803c of size 4096 
created new node at 0xb52ce04c whose previous is 0xb52ce03c and size is 16 so prev+16 =0xb52ce04c 
removing node 0xb52ce03c of size 2048 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
removing node 0xb52c003c of size 1024 
created new node at 0xb52d204c whose previous is 0xb52d203c and size is 16 so prev+16 =0xb52d204c 
RETURN ADDRESS IS ----------------------->>>>>0xb52d203c-> 0xb52b4000
removing node 0xb52d203c of size 512 


 REQUEST NUMBER 192 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52caa20
removing node 0xb52d403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 193 TO ALLOCATE BLOCK OF SIZE 966
Adjusted size to: 1024
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4400
removing node 0xb52c003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 194 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
removing node 0xb52d203c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52d204c whose previous is 0xb52d203c and size is 16 so prev+16 =0xb52d204c 
removing node 0xb52d203c of size 256 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
removing node 0xb52c003c of size 128 
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
removing node 0xb52d403c of size 64 
created new node at 0xb52d604c whose previous is 0xb52d603c and size is 16 so prev+16 =0xb52d604c 
RETURN ADDRESS 0xb52d603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4200
removing node 0xb52d603c of size 32 


 REQUEST NUMBER 195 TO ALLOCATE BLOCK OF SIZE 96
Adjusted size to: 128
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4280
removing node 0xb52c003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 196 TO ALLOCATE BLOCK OF SIZE 107
Adjusted size to: 128
removing node 0xb52d203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52d204c whose previous is 0xb52d203c and size is 16 so prev+16 =0xb52d204c 
RETURN ADDRESS 0xb52d203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4300
removing node 0xb52d203c of size 128 


 REQUEST NUMBER 197 TO ALLOCATE BLOCK OF SIZE 62
Adjusted size to: 64
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4240
removing node 0xb52d403c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 198 TO ALLOCATE BLOCK OF SIZE 384
Adjusted size to: 512
removing node 0xb52ce03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52ce04c whose previous is 0xb52ce03c and size is 16 so prev+16 =0xb52ce04c 
removing node 0xb52ce03c of size 1024 
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4800
removing node 0xb52d403c of size 512 


 REQUEST NUMBER 199 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb52d603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4220
removing node 0xb52d603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 200 TO ALLOCATE BLOCK OF SIZE 749
Adjusted size to: 1024
RETURN ADDRESS 0xb52ce03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4c00
removing node 0xb52ce03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 201 TO ALLOCATE BLOCK OF SIZE 1854
Adjusted size to: 2048
removing node 0xb52c803c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52c804c whose previous is 0xb52c803c and size is 16 so prev+16 =0xb52c804c 
RETURN ADDRESS 0xb52c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b5000
removing node 0xb52c803c of size 2048 


 REQUEST NUMBER 202 TO ALLOCATE BLOCK OF SIZE 6302
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9912eb0 and page at 0xb52ce000 
adding page node for the page located at 0xb52ce000 and pagePtr 0x9912eb0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 39 
stepping through nodes 
 we have 39 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c6c4 and the new one at 0xb527c6f0 
New page node points to data page 0xb52ce000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 40 
RETURN ADDRESS IS 0xb52ce000 


 REQUEST NUMBER 203 TO ALLOCATE BLOCK OF SIZE 48
Adjusted size to: 64
removing node 0xb52d203c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52d204c whose previous is 0xb52d203c and size is 16 so prev+16 =0xb52d204c 
RETURN ADDRESS 0xb52d203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4380
removing node 0xb52d203c of size 64 


 REQUEST NUMBER 204 TO ALLOCATE BLOCK OF SIZE 5367
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99211c8 and page at 0xb52d6000 
adding page node for the page located at 0xb52d6000 and pagePtr 0x99211c8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 40 
stepping through nodes 
 we have 40 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c6f0 and the new one at 0xb527c71c 
New page node points to data page 0xb52d6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 41 
RETURN ADDRESS IS 0xb52d6000 


 REQUEST NUMBER 205 TO ALLOCATE BLOCK OF SIZE 254
Adjusted size to: 256
removing node 0xb52d403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4a00
removing node 0xb52d403c of size 256 


 REQUEST NUMBER 206 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb52d203c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52d204c whose previous is 0xb52d203c and size is 16 so prev+16 =0xb52d204c 
RETURN ADDRESS 0xb52d203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b43c0
removing node 0xb52d203c of size 32 


 REQUEST NUMBER 207 TO ALLOCATE BLOCK OF SIZE 53
Adjusted size to: 64
removing node 0xb52d403c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
removing node 0xb52d403c of size 128 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4b00
removing node 0xb52c003c of size 64 


 REQUEST NUMBER 208 TO ALLOCATE BLOCK OF SIZE 76
Adjusted size to: 128
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4b80
removing node 0xb52d403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 209 TO ALLOCATE BLOCK OF SIZE 1602
Adjusted size to: 2048
RETURN ADDRESS 0xb52c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b5800
removing node 0xb52c803c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 210 TO ALLOCATE BLOCK OF SIZE 446
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52c8000 and pagePtr 0x9918af8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 41 
stepping through nodes 
 we have 41 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c71c and the new one at 0xb527c748 
New page node points to data page 0xb52c8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 42 
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
removing node 0xb52d403c of size 4096 
created new node at 0xb52d804c whose previous is 0xb52d803c and size is 16 so prev+16 =0xb52d804c 
removing node 0xb52d803c of size 2048 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 1024 
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52dc03c-> 0xb52c8000
removing node 0xb52dc03c of size 512 


 REQUEST NUMBER 211 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
RETURN ADDRESS 0xb52d203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b43e0
removing node 0xb52d203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 212 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
removing node 0xb52c003c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4b40
removing node 0xb52c003c of size 32 


 REQUEST NUMBER 213 TO FREE BLOCK 0xb52caa00  OF SIZE 27
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52caa00 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb52c0000 -- 0xb52c2000| 

 COUNT: 2  - ends at 0xb52c004c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb52dc000 -- 0xb52de000| 

 COUNT: 1  - ends at 0xb52dc03c 
	 5 -> 0xb52da000 -- 0xb52dc000| 

 COUNT: 1  - ends at 0xb52da03c 
	 6 -> 0xb52d8000 -- 0xb52da000| 

 COUNT: 1  - ends at 0xb52d803c 
	 7 -> 0xb52d4000 -- 0xb52d6000| 

 COUNT: 1  - ends at 0xb52d403c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 214 TO ALLOCATE BLOCK OF SIZE 30
Adjusted size to: 32
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4b60
removing node 0xb52c003c of size 32 


 REQUEST NUMBER 215 TO ALLOCATE BLOCK OF SIZE 1021
Adjusted size to: 1024
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8400
removing node 0xb52da03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 216 TO ALLOCATE BLOCK OF SIZE 3365
Adjusted size to: 4096
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c9000
removing node 0xb52d403c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 217 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52caa00
removing node 0xb52c003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 218 TO ALLOCATE BLOCK OF SIZE 681
Adjusted size to: 1024
removing node 0xb52d803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52d804c whose previous is 0xb52d803c and size is 16 so prev+16 =0xb52d804c 
RETURN ADDRESS 0xb52d803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8800
removing node 0xb52d803c of size 1024 


 REQUEST NUMBER 219 TO ALLOCATE BLOCK OF SIZE 613
Adjusted size to: 1024
RETURN ADDRESS 0xb52d803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8c00
removing node 0xb52d803c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 220 TO ALLOCATE BLOCK OF SIZE 1591
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52d8000 and pagePtr 0x9922b18 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 42 
stepping through nodes 
 we have 42 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c748 and the new one at 0xb527c774 
New page node points to data page 0xb52d8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 43 
created new node at 0xb52c004c whose previous is 0xb52c003c and size is 16 so prev+16 =0xb52c004c 
removing node 0xb52c003c of size 4096 
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
RETURN ADDRESS IS ----------------------->>>>>0xb52d403c-> 0xb52d8000
removing node 0xb52d403c of size 2048 


 REQUEST NUMBER 221 TO ALLOCATE BLOCK OF SIZE 73
Adjusted size to: 128
removing node 0xb52dc03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
removing node 0xb52dc03c of size 256 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8200
removing node 0xb52da03c of size 128 


 REQUEST NUMBER 222 TO ALLOCATE BLOCK OF SIZE 76
Adjusted size to: 128
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8280
removing node 0xb52da03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 223 TO ALLOCATE BLOCK OF SIZE 431
Adjusted size to: 512
removing node 0xb52d403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
removing node 0xb52d403c of size 1024 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8800
removing node 0xb52da03c of size 512 


 REQUEST NUMBER 224 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
removing node 0xb52dc03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
removing node 0xb52dc03c of size 128 
created new node at 0xb52d204c whose previous is 0xb52d203c and size is 16 so prev+16 =0xb52d204c 
removing node 0xb52d203c of size 64 
created new node at 0xb52de04c whose previous is 0xb52de03c and size is 16 so prev+16 =0xb52de04c 
RETURN ADDRESS 0xb52de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8300
removing node 0xb52de03c of size 32 


 REQUEST NUMBER 225 TO ALLOCATE BLOCK OF SIZE 126
Adjusted size to: 128
RETURN ADDRESS 0xb52dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8380
removing node 0xb52dc03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 226 TO ALLOCATE BLOCK OF SIZE 506
Adjusted size to: 512
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8a00
removing node 0xb52da03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 227 TO ALLOCATE BLOCK OF SIZE 36
Adjusted size to: 64
RETURN ADDRESS 0xb52d203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8340
removing node 0xb52d203c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 228 TO ALLOCATE BLOCK OF SIZE 2765
Adjusted size to: 4096
RETURN ADDRESS 0xb52c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d9000
removing node 0xb52c003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 229 TO ALLOCATE BLOCK OF SIZE 2748
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52c0000 and pagePtr 0x99211e8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 43 
stepping through nodes 
 we have 43 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c774 and the new one at 0xb527c7a0 
New page node points to data page 0xb52c0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 44 
created new node at 0xb52d204c whose previous is 0xb52d203c and size is 16 so prev+16 =0xb52d204c 
RETURN ADDRESS IS ----------------------->>>>>0xb52d203c-> 0xb52c0000
removing node 0xb52d203c of size 4096 


 REQUEST NUMBER 230 TO ALLOCATE BLOCK OF SIZE 2338
Adjusted size to: 4096
RETURN ADDRESS 0xb52d203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c1000
removing node 0xb52d203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 231 TO ALLOCATE BLOCK OF SIZE 1189
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52d2000 and pagePtr 0x9926e28 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 44 
stepping through nodes 
 we have 44 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c7a0 and the new one at 0xb527c7cc 
New page node points to data page 0xb52d2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 45 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 4096 
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52dc03c-> 0xb52d2000
removing node 0xb52dc03c of size 2048 


 REQUEST NUMBER 232 TO ALLOCATE BLOCK OF SIZE 57
Adjusted size to: 64
removing node 0xb52d403c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
removing node 0xb52d403c of size 512 
created new node at 0xb52e004c whose previous is 0xb52e003c and size is 16 so prev+16 =0xb52e004c 
removing node 0xb52e003c of size 256 
created new node at 0xb52e204c whose previous is 0xb52e203c and size is 16 so prev+16 =0xb52e204c 
removing node 0xb52e203c of size 128 
created new node at 0xb52e404c whose previous is 0xb52e403c and size is 16 so prev+16 =0xb52e404c 
RETURN ADDRESS 0xb52e403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8c00
removing node 0xb52e403c of size 64 


 REQUEST NUMBER 233 TO ALLOCATE BLOCK OF SIZE 62
Adjusted size to: 64
RETURN ADDRESS 0xb52e403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8c40
removing node 0xb52e403c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 234 TO ALLOCATE BLOCK OF SIZE 34
Adjusted size to: 64
removing node 0xb52e203c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52e204c whose previous is 0xb52e203c and size is 16 so prev+16 =0xb52e204c 
RETURN ADDRESS 0xb52e203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8c80
removing node 0xb52e203c of size 64 


 REQUEST NUMBER 235 TO ALLOCATE BLOCK OF SIZE 461
Adjusted size to: 512
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8e00
removing node 0xb52d403c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 236 TO ALLOCATE BLOCK OF SIZE 187
Adjusted size to: 256
RETURN ADDRESS 0xb52e003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8d00
removing node 0xb52e003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 237 TO ALLOCATE BLOCK OF SIZE 2207
Adjusted size to: 4096
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d3000
removing node 0xb52da03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 238 TO ALLOCATE BLOCK OF SIZE 60
Adjusted size to: 64
RETURN ADDRESS 0xb52e203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8cc0
removing node 0xb52e203c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 239 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
removing node 0xb52dc03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
removing node 0xb52dc03c of size 1024 
created new node at 0xb52e204c whose previous is 0xb52e203c and size is 16 so prev+16 =0xb52e204c 
removing node 0xb52e203c of size 512 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 256 
created new node at 0xb52e004c whose previous is 0xb52e003c and size is 16 so prev+16 =0xb52e004c 
removing node 0xb52e003c of size 128 
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2800
removing node 0xb52d403c of size 64 


 REQUEST NUMBER 240 TO ALLOCATE BLOCK OF SIZE 1284
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52e4000 and pagePtr 0x992b5c0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 45 
stepping through nodes 
 we have 45 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c7cc and the new one at 0xb527c7f8 
New page node points to data page 0xb52e4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 46 
created new node at 0xb52e604c whose previous is 0xb52e603c and size is 16 so prev+16 =0xb52e604c 
removing node 0xb52e603c of size 4096 
created new node at 0xb52e804c whose previous is 0xb52e803c and size is 16 so prev+16 =0xb52e804c 
RETURN ADDRESS IS ----------------------->>>>>0xb52e803c-> 0xb52e4000
removing node 0xb52e803c of size 2048 


 REQUEST NUMBER 241 TO ALLOCATE BLOCK OF SIZE 4800
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x992c758 and page at 0xb52ea000 
adding page node for the page located at 0xb52ea000 and pagePtr 0x992c758 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 46 
stepping through nodes 
 we have 46 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c7f8 and the new one at 0xb527c824 
New page node points to data page 0xb52ea000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 47 
RETURN ADDRESS IS 0xb52ea000 


 REQUEST NUMBER 242 TO ALLOCATE BLOCK OF SIZE 161
Adjusted size to: 256
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2900
removing node 0xb52da03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 243 TO ALLOCATE BLOCK OF SIZE 2571
Adjusted size to: 4096
RETURN ADDRESS 0xb52e603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52e5000
removing node 0xb52e603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 244 TO ALLOCATE BLOCK OF SIZE 55
Adjusted size to: 64
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2840
removing node 0xb52d403c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 245 TO ALLOCATE BLOCK OF SIZE 79
Adjusted size to: 128
RETURN ADDRESS 0xb52e003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2880
removing node 0xb52e003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 246 TO ALLOCATE BLOCK OF SIZE 1268
Adjusted size to: 2048
RETURN ADDRESS 0xb52e803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52e4800
removing node 0xb52e803c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 247 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb52de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8320
removing node 0xb52de03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 248 TO ALLOCATE BLOCK OF SIZE 5116
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9926e38 and page at 0xb52de000 
adding page node for the page located at 0xb52de000 and pagePtr 0x9926e38 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 47 
stepping through nodes 
 we have 47 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c824 and the new one at 0xb527c850 
New page node points to data page 0xb52de000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 48 
RETURN ADDRESS IS 0xb52de000 


 REQUEST NUMBER 249 TO ALLOCATE BLOCK OF SIZE 5083
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x992b5a0 and page at 0xb52e8000 
adding page node for the page located at 0xb52e8000 and pagePtr 0x992b5a0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 48 
stepping through nodes 
 we have 48 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c850 and the new one at 0xb527c87c 
New page node points to data page 0xb52e8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 49 
RETURN ADDRESS IS 0xb52e8000 


 REQUEST NUMBER 250 TO ALLOCATE BLOCK OF SIZE 25
Adjusted size to: 32
removing node 0xb52e203c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52e204c whose previous is 0xb52e203c and size is 16 so prev+16 =0xb52e204c 
removing node 0xb52e203c of size 256 
created new node at 0xb52e004c whose previous is 0xb52e003c and size is 16 so prev+16 =0xb52e004c 
removing node 0xb52e003c of size 128 
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
removing node 0xb52d403c of size 64 
created new node at 0xb52e604c whose previous is 0xb52e603c and size is 16 so prev+16 =0xb52e604c 
RETURN ADDRESS 0xb52e603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2a00
removing node 0xb52e603c of size 32 


 REQUEST NUMBER 251 TO ALLOCATE BLOCK OF SIZE 138
Adjusted size to: 256
RETURN ADDRESS 0xb52e203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2b00
removing node 0xb52e203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 252 TO ALLOCATE BLOCK OF SIZE 7515
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x992b5b0 and page at 0xb52e2000 
adding page node for the page located at 0xb52e2000 and pagePtr 0x992b5b0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 49 
stepping through nodes 
 we have 49 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c87c and the new one at 0xb527c8a8 
New page node points to data page 0xb52e2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 50 
RETURN ADDRESS IS 0xb52e2000 


 REQUEST NUMBER 253 TO ALLOCATE BLOCK OF SIZE 181
Adjusted size to: 256
removing node 0xb52dc03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
removing node 0xb52dc03c of size 512 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2c00
removing node 0xb52da03c of size 256 


 REQUEST NUMBER 254 TO ALLOCATE BLOCK OF SIZE 88
Adjusted size to: 128
RETURN ADDRESS 0xb52e003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2a80
removing node 0xb52e003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 255 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2a40
removing node 0xb52d403c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 256 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb52e603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2a20
removing node 0xb52e603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 257 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb52da03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 128 
created new node at 0xb52e604c whose previous is 0xb52e603c and size is 16 so prev+16 =0xb52e604c 
removing node 0xb52e603c of size 64 
created new node at 0xb52d404c whose previous is 0xb52d403c and size is 16 so prev+16 =0xb52d404c 
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2d00
removing node 0xb52d403c of size 32 


 REQUEST NUMBER 258 TO ALLOCATE BLOCK OF SIZE 2270
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52e0000 and pagePtr 0x99211f8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 50 
stepping through nodes 
 we have 50 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c8a8 and the new one at 0xb527c8d4 
New page node points to data page 0xb52e0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 51 
created new node at 0xb52ec04c whose previous is 0xb52ec03c and size is 16 so prev+16 =0xb52ec04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52ec03c-> 0xb52e0000
removing node 0xb52ec03c of size 4096 


 REQUEST NUMBER 259 TO ALLOCATE BLOCK OF SIZE 204
Adjusted size to: 256
removing node 0xb52dc03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
RETURN ADDRESS 0xb52dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2e00
removing node 0xb52dc03c of size 256 


 REQUEST NUMBER 260 TO ALLOCATE BLOCK OF SIZE 102
Adjusted size to: 128
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2d80
removing node 0xb52da03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 261 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
RETURN ADDRESS 0xb52e603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2d40
removing node 0xb52e603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 262 TO ALLOCATE BLOCK OF SIZE 2125
Adjusted size to: 4096
RETURN ADDRESS 0xb52ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52e1000
removing node 0xb52ec03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 263 TO ALLOCATE BLOCK OF SIZE 2233
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52ec000 and pagePtr 0x99331f0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 51 
stepping through nodes 
 we have 51 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c8d4 and the new one at 0xb527c900 
New page node points to data page 0xb52ec000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 52 
created new node at 0xb52e604c whose previous is 0xb52e603c and size is 16 so prev+16 =0xb52e604c 
RETURN ADDRESS IS ----------------------->>>>>0xb52e603c-> 0xb52ec000
removing node 0xb52e603c of size 4096 


 REQUEST NUMBER 264 TO ALLOCATE BLOCK OF SIZE 50
Adjusted size to: 64
removing node 0xb52dc03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
removing node 0xb52dc03c of size 128 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2f00
removing node 0xb52da03c of size 64 


 REQUEST NUMBER 265 TO ALLOCATE BLOCK OF SIZE 2097
Adjusted size to: 4096
RETURN ADDRESS 0xb52e603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ed000
removing node 0xb52e603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 266 TO ALLOCATE BLOCK OF SIZE 5084
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x992c240 and page at 0xb52e6000 
adding page node for the page located at 0xb52e6000 and pagePtr 0x992c240 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 52 
stepping through nodes 
 we have 52 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c900 and the new one at 0xb527c92c 
New page node points to data page 0xb52e6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 53 
RETURN ADDRESS IS 0xb52e6000 


 REQUEST NUMBER 267 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb52d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2d20
removing node 0xb52d403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 268 TO ALLOCATE BLOCK OF SIZE 1975
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52d4000 and pagePtr 0x992c230 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 53 
stepping through nodes 
 we have 53 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c92c and the new one at 0xb527c958 
New page node points to data page 0xb52d4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 54 
created new node at 0xb52ee04c whose previous is 0xb52ee03c and size is 16 so prev+16 =0xb52ee04c 
removing node 0xb52ee03c of size 4096 
created new node at 0xb52f004c whose previous is 0xb52f003c and size is 16 so prev+16 =0xb52f004c 
RETURN ADDRESS IS ----------------------->>>>>0xb52f003c-> 0xb52d4000
removing node 0xb52f003c of size 2048 


 REQUEST NUMBER 269 TO ALLOCATE BLOCK OF SIZE 56
Adjusted size to: 64
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2f40
removing node 0xb52da03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 270 TO ALLOCATE BLOCK OF SIZE 746
Adjusted size to: 1024
removing node 0xb52f003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52f004c whose previous is 0xb52f003c and size is 16 so prev+16 =0xb52f004c 
RETURN ADDRESS 0xb52f003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d4800
removing node 0xb52f003c of size 1024 


 REQUEST NUMBER 271 TO ALLOCATE BLOCK OF SIZE 176
Adjusted size to: 256
removing node 0xb52f003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52f004c whose previous is 0xb52f003c and size is 16 so prev+16 =0xb52f004c 
removing node 0xb52f003c of size 512 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d4c00
removing node 0xb52da03c of size 256 


 REQUEST NUMBER 272 TO ALLOCATE BLOCK OF SIZE 7375
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99375a0 and page at 0xb52f2000 
adding page node for the page located at 0xb52f2000 and pagePtr 0x99375a0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 54 
stepping through nodes 
 we have 54 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c958 and the new one at 0xb527c984 
New page node points to data page 0xb52f2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 55 
RETURN ADDRESS IS 0xb52f2000 


 REQUEST NUMBER 273 TO ALLOCATE BLOCK OF SIZE 416
Adjusted size to: 512
RETURN ADDRESS 0xb52f003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d4e00
removing node 0xb52f003c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 274 TO ALLOCATE BLOCK OF SIZE 300
Adjusted size to: 512
removing node 0xb52ee03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52ee04c whose previous is 0xb52ee03c and size is 16 so prev+16 =0xb52ee04c 
removing node 0xb52ee03c of size 2048 
created new node at 0xb52f004c whose previous is 0xb52f003c and size is 16 so prev+16 =0xb52f004c 
removing node 0xb52f003c of size 1024 
created new node at 0xb52f404c whose previous is 0xb52f403c and size is 16 so prev+16 =0xb52f404c 
RETURN ADDRESS 0xb52f403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d5000
removing node 0xb52f403c of size 512 


 REQUEST NUMBER 275 TO ALLOCATE BLOCK OF SIZE 171
Adjusted size to: 256
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d4d00
removing node 0xb52da03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 276 TO ALLOCATE BLOCK OF SIZE 221
Adjusted size to: 256
removing node 0xb52f403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52f404c whose previous is 0xb52f403c and size is 16 so prev+16 =0xb52f404c 
RETURN ADDRESS 0xb52f403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d5200
removing node 0xb52f403c of size 256 


 REQUEST NUMBER 277 TO ALLOCATE BLOCK OF SIZE 64
Adjusted size to: 64
removing node 0xb52dc03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
RETURN ADDRESS 0xb52dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2f80
removing node 0xb52dc03c of size 64 


 REQUEST NUMBER 278 TO ALLOCATE BLOCK OF SIZE 204
Adjusted size to: 256
RETURN ADDRESS 0xb52f403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d5300
removing node 0xb52f403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 279 TO ALLOCATE BLOCK OF SIZE 87
Adjusted size to: 128
removing node 0xb52f003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52f004c whose previous is 0xb52f003c and size is 16 so prev+16 =0xb52f004c 
removing node 0xb52f003c of size 512 
created new node at 0xb52f404c whose previous is 0xb52f403c and size is 16 so prev+16 =0xb52f404c 
removing node 0xb52f403c of size 256 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d5400
removing node 0xb52da03c of size 128 


 REQUEST NUMBER 280 TO ALLOCATE BLOCK OF SIZE 2022
Adjusted size to: 2048
RETURN ADDRESS 0xb52ee03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d5800
removing node 0xb52ee03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 281 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb52dc03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
RETURN ADDRESS 0xb52dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2fc0
removing node 0xb52dc03c of size 32 


 REQUEST NUMBER 282 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
RETURN ADDRESS 0xb52dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2fe0
removing node 0xb52dc03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 283 TO ALLOCATE BLOCK OF SIZE 31
Adjusted size to: 32
removing node 0xb52da03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 64 
created new node at 0xb52dc04c whose previous is 0xb52dc03c and size is 16 so prev+16 =0xb52dc04c 
RETURN ADDRESS 0xb52dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d5480
removing node 0xb52dc03c of size 32 


 REQUEST NUMBER 284 TO ALLOCATE BLOCK OF SIZE 393
Adjusted size to: 512
RETURN ADDRESS 0xb52f003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d5600
removing node 0xb52f003c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 285 TO ALLOCATE BLOCK OF SIZE 178
Adjusted size to: 256
RETURN ADDRESS 0xb52f403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d5500
removing node 0xb52f403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 286 TO ALLOCATE BLOCK OF SIZE 444
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52f4000 and pagePtr 0x9939430 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 55 
stepping through nodes 
 we have 55 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c984 and the new one at 0xb527c9b0 
New page node points to data page 0xb52f4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 56 
created new node at 0xb52f004c whose previous is 0xb52f003c and size is 16 so prev+16 =0xb52f004c 
removing node 0xb52f003c of size 4096 
created new node at 0xb52ee04c whose previous is 0xb52ee03c and size is 16 so prev+16 =0xb52ee04c 
removing node 0xb52ee03c of size 2048 
created new node at 0xb52f604c whose previous is 0xb52f603c and size is 16 so prev+16 =0xb52f604c 
removing node 0xb52f603c of size 1024 
created new node at 0xb52f804c whose previous is 0xb52f803c and size is 16 so prev+16 =0xb52f804c 
RETURN ADDRESS IS ----------------------->>>>>0xb52f803c-> 0xb52f4000
removing node 0xb52f803c of size 512 


 REQUEST NUMBER 287 TO ALLOCATE BLOCK OF SIZE 1227
Adjusted size to: 2048
RETURN ADDRESS 0xb52ee03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f4800
removing node 0xb52ee03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 288 TO ALLOCATE BLOCK OF SIZE 163
Adjusted size to: 256
removing node 0xb52f803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52f804c whose previous is 0xb52f803c and size is 16 so prev+16 =0xb52f804c 
RETURN ADDRESS 0xb52f803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f4200
removing node 0xb52f803c of size 256 


 REQUEST NUMBER 289 TO ALLOCATE BLOCK OF SIZE 2225
Adjusted size to: 4096
RETURN ADDRESS 0xb52f003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f5000
removing node 0xb52f003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 290 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb52dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d54a0
removing node 0xb52dc03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 291 TO ALLOCATE BLOCK OF SIZE 1384
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52dc000 and pagePtr 0x9926e48 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 56 
stepping through nodes 
 we have 56 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c9b0 and the new one at 0xb527c9dc 
New page node points to data page 0xb52dc000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 57 
created new node at 0xb52f004c whose previous is 0xb52f003c and size is 16 so prev+16 =0xb52f004c 
removing node 0xb52f003c of size 4096 
created new node at 0xb52ee04c whose previous is 0xb52ee03c and size is 16 so prev+16 =0xb52ee04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52ee03c-> 0xb52dc000
removing node 0xb52ee03c of size 2048 


 REQUEST NUMBER 292 TO ALLOCATE BLOCK OF SIZE 143
Adjusted size to: 256
RETURN ADDRESS 0xb52f803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f4300
removing node 0xb52f803c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 293 TO ALLOCATE BLOCK OF SIZE 2984
Adjusted size to: 4096
RETURN ADDRESS 0xb52f003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dd000
removing node 0xb52f003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 294 TO ALLOCATE BLOCK OF SIZE 603
Adjusted size to: 1024
RETURN ADDRESS 0xb52f603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f4400
removing node 0xb52f603c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 295 TO ALLOCATE BLOCK OF SIZE 305
Adjusted size to: 512
removing node 0xb52ee03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52ee04c whose previous is 0xb52ee03c and size is 16 so prev+16 =0xb52ee04c 
removing node 0xb52ee03c of size 1024 
created new node at 0xb52f604c whose previous is 0xb52f603c and size is 16 so prev+16 =0xb52f604c 
RETURN ADDRESS 0xb52f603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dc800
removing node 0xb52f603c of size 512 


 REQUEST NUMBER 296 TO ALLOCATE BLOCK OF SIZE 3477
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52f0000 and pagePtr 0x993a310 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 57 
stepping through nodes 
 we have 57 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527c9dc and the new one at 0xb527ca08 
New page node points to data page 0xb52f0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 58 
created new node at 0xb52f804c whose previous is 0xb52f803c and size is 16 so prev+16 =0xb52f804c 
RETURN ADDRESS IS ----------------------->>>>>0xb52f803c-> 0xb52f0000
removing node 0xb52f803c of size 4096 


 REQUEST NUMBER 297 TO ALLOCATE BLOCK OF SIZE 1859
Adjusted size to: 2048
removing node 0xb52f803c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52f804c whose previous is 0xb52f803c and size is 16 so prev+16 =0xb52f804c 
RETURN ADDRESS 0xb52f803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1000
removing node 0xb52f803c of size 2048 


 REQUEST NUMBER 298 TO ALLOCATE BLOCK OF SIZE 1468
Adjusted size to: 2048
RETURN ADDRESS 0xb52f803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1800
removing node 0xb52f803c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 299 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d54c0
removing node 0xb52da03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 300 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
removing node 0xb52f603c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52f604c whose previous is 0xb52f603c and size is 16 so prev+16 =0xb52f604c 
removing node 0xb52f603c of size 256 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 128 
created new node at 0xb52f804c whose previous is 0xb52f803c and size is 16 so prev+16 =0xb52f804c 
removing node 0xb52f803c of size 64 
created new node at 0xb52fa04c whose previous is 0xb52fa03c and size is 16 so prev+16 =0xb52fa04c 
RETURN ADDRESS 0xb52fa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dca00
removing node 0xb52fa03c of size 32 


 REQUEST NUMBER 301 TO ALLOCATE BLOCK OF SIZE 1015
Adjusted size to: 1024
RETURN ADDRESS 0xb52ee03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dcc00
removing node 0xb52ee03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 302 TO ALLOCATE BLOCK OF SIZE 419
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52ee000 and pagePtr 0x99369e8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 58 
stepping through nodes 
 we have 58 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ca08 and the new one at 0xb527ca34 
New page node points to data page 0xb52ee000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 59 
created new node at 0xb52fc04c whose previous is 0xb52fc03c and size is 16 so prev+16 =0xb52fc04c 
removing node 0xb52fc03c of size 4096 
created new node at 0xb52fe04c whose previous is 0xb52fe03c and size is 16 so prev+16 =0xb52fe04c 
removing node 0xb52fe03c of size 2048 
created new node at 0xb530004c whose previous is 0xb530003c and size is 16 so prev+16 =0xb530004c 
removing node 0xb530003c of size 1024 
created new node at 0xb530204c whose previous is 0xb530203c and size is 16 so prev+16 =0xb530204c 
RETURN ADDRESS IS ----------------------->>>>>0xb530203c-> 0xb52ee000
removing node 0xb530203c of size 512 


 REQUEST NUMBER 303 TO ALLOCATE BLOCK OF SIZE 947
Adjusted size to: 1024
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ee400
removing node 0xb530003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 304 TO ALLOCATE BLOCK OF SIZE 286
Adjusted size to: 512
RETURN ADDRESS 0xb530203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ee200
removing node 0xb530203c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 305 TO ALLOCATE BLOCK OF SIZE 2671
Adjusted size to: 4096
RETURN ADDRESS 0xb52fc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ef000
removing node 0xb52fc03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 306 TO ALLOCATE BLOCK OF SIZE 3020
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52fc000 and pagePtr 0x993e788 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 59 
stepping through nodes 
 we have 59 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ca34 and the new one at 0xb527ca60 
New page node points to data page 0xb52fc000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 60 
created new node at 0xb530204c whose previous is 0xb530203c and size is 16 so prev+16 =0xb530204c 
RETURN ADDRESS IS ----------------------->>>>>0xb530203c-> 0xb52fc000
removing node 0xb530203c of size 4096 


 REQUEST NUMBER 307 TO FREE BLOCK 0xb52b4800  OF SIZE 384
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52b4800 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb52fa000 -- 0xb52fc000| 

 COUNT: 1  - ends at 0xb52fa03c 
	 1 -> 0xb52f8000 -- 0xb52fa000| 

 COUNT: 1  - ends at 0xb52f803c 
	 2 -> 0xb52da000 -- 0xb52dc000| 

 COUNT: 1  - ends at 0xb52da03c 
	 3 -> 0xb52f6000 -- 0xb52f8000| 

 COUNT: 1  - ends at 0xb52f603c 
	 4 -> 0xb5300000 -- 0xb5302000| 

 COUNT: 1  - ends at 0xb530003c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb52fe000 -- 0xb5300000| 

 COUNT: 1  - ends at 0xb52fe03c 
	 7 -> 0xb5302000 -- 0xb5304000| 

 COUNT: 1  - ends at 0xb530203c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 308 TO ALLOCATE BLOCK OF SIZE 144
Adjusted size to: 256
RETURN ADDRESS 0xb52f603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dcb00
removing node 0xb52f603c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 309 TO ALLOCATE BLOCK OF SIZE 66
Adjusted size to: 128
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dca80
removing node 0xb52da03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 310 TO ALLOCATE BLOCK OF SIZE 1944
Adjusted size to: 2048
RETURN ADDRESS 0xb52fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ee800
removing node 0xb52fe03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 311 TO ALLOCATE BLOCK OF SIZE 296
Adjusted size to: 512
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4800
removing node 0xb530003c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 312 TO ALLOCATE BLOCK OF SIZE 1110
Adjusted size to: 2048
removing node 0xb530203c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb530204c whose previous is 0xb530203c and size is 16 so prev+16 =0xb530204c 
RETURN ADDRESS 0xb530203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fd000
removing node 0xb530203c of size 2048 


 REQUEST NUMBER 313 TO ALLOCATE BLOCK OF SIZE 477
Adjusted size to: 512
removing node 0xb530203c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb530204c whose previous is 0xb530203c and size is 16 so prev+16 =0xb530204c 
removing node 0xb530203c of size 1024 
created new node at 0xb530004c whose previous is 0xb530003c and size is 16 so prev+16 =0xb530004c 
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fd800
removing node 0xb530003c of size 512 


 REQUEST NUMBER 314 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
RETURN ADDRESS 0xb52f803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dca40
removing node 0xb52f803c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 315 TO ALLOCATE BLOCK OF SIZE 574
Adjusted size to: 1024
RETURN ADDRESS 0xb530203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fdc00
removing node 0xb530203c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 316 TO FREE BLOCK 0xb52d2840  OF SIZE 55
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52d2840 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb52fa000 -- 0xb52fc000| 

 COUNT: 1  - ends at 0xb52fa03c 
	 1 -> 0xb5302000 -- 0xb5304000| 

 COUNT: 1  - ends at 0xb530203c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5300000 -- 0xb5302000| 

 COUNT: 1  - ends at 0xb530003c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 317 TO ALLOCATE BLOCK OF SIZE 2686
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52f8000 and pagePtr 0x993a300 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 60 
stepping through nodes 
 we have 60 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ca60 and the new one at 0xb527ca8c 
New page node points to data page 0xb52f8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 61 
created new node at 0xb52fe04c whose previous is 0xb52fe03c and size is 16 so prev+16 =0xb52fe04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52fe03c-> 0xb52f8000
removing node 0xb52fe03c of size 4096 


 REQUEST NUMBER 318 TO ALLOCATE BLOCK OF SIZE 117
Adjusted size to: 128
removing node 0xb530003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb530004c whose previous is 0xb530003c and size is 16 so prev+16 =0xb530004c 
removing node 0xb530003c of size 256 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fda00
removing node 0xb52da03c of size 128 


 REQUEST NUMBER 319 TO ALLOCATE BLOCK OF SIZE 282
Adjusted size to: 512
removing node 0xb52fe03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52fe04c whose previous is 0xb52fe03c and size is 16 so prev+16 =0xb52fe04c 
removing node 0xb52fe03c of size 2048 
created new node at 0xb52f604c whose previous is 0xb52f603c and size is 16 so prev+16 =0xb52f604c 
removing node 0xb52f603c of size 1024 
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9000
removing node 0xb530403c of size 512 


 REQUEST NUMBER 320 TO ALLOCATE BLOCK OF SIZE 699
Adjusted size to: 1024
RETURN ADDRESS 0xb52f603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9400
removing node 0xb52f603c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 321 TO ALLOCATE BLOCK OF SIZE 62
Adjusted size to: 64
RETURN ADDRESS 0xb530203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d2840
removing node 0xb530203c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 322 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
RETURN ADDRESS 0xb52fa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dca20
removing node 0xb52fa03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 323 TO ALLOCATE BLOCK OF SIZE 2941
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52fa000 and pagePtr 0x993e360 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 61 
stepping through nodes 
 we have 61 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ca8c and the new one at 0xb527cab8 
New page node points to data page 0xb52fa000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 62 
created new node at 0xb530204c whose previous is 0xb530203c and size is 16 so prev+16 =0xb530204c 
RETURN ADDRESS IS ----------------------->>>>>0xb530203c-> 0xb52fa000
removing node 0xb530203c of size 4096 


 REQUEST NUMBER 324 TO ALLOCATE BLOCK OF SIZE 43
Adjusted size to: 64
removing node 0xb52da03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fda80
removing node 0xb52da03c of size 64 


 REQUEST NUMBER 325 TO ALLOCATE BLOCK OF SIZE 4971
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x993e7b8 and page at 0xb52f6000 
adding page node for the page located at 0xb52f6000 and pagePtr 0x993e7b8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 62 
stepping through nodes 
 we have 62 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cab8 and the new one at 0xb527cae4 
New page node points to data page 0xb52f6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 63 
RETURN ADDRESS IS 0xb52f6000 


 REQUEST NUMBER 326 TO ALLOCATE BLOCK OF SIZE 202
Adjusted size to: 256
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fdb00
removing node 0xb530003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 327 TO ALLOCATE BLOCK OF SIZE 174
Adjusted size to: 256
removing node 0xb530403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9200
removing node 0xb530403c of size 256 


 REQUEST NUMBER 328 TO ALLOCATE BLOCK OF SIZE 150
Adjusted size to: 256
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9300
removing node 0xb530403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 329 TO ALLOCATE BLOCK OF SIZE 52
Adjusted size to: 64
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fdac0
removing node 0xb52da03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 330 TO ALLOCATE BLOCK OF SIZE 58
Adjusted size to: 64
removing node 0xb52fe03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52fe04c whose previous is 0xb52fe03c and size is 16 so prev+16 =0xb52fe04c 
removing node 0xb52fe03c of size 1024 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 512 
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
removing node 0xb530403c of size 256 
created new node at 0xb530004c whose previous is 0xb530003c and size is 16 so prev+16 =0xb530004c 
removing node 0xb530003c of size 128 
created new node at 0xb530604c whose previous is 0xb530603c and size is 16 so prev+16 =0xb530604c 
RETURN ADDRESS 0xb530603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9800
removing node 0xb530603c of size 64 


 REQUEST NUMBER 331 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb530603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb530604c whose previous is 0xb530603c and size is 16 so prev+16 =0xb530604c 
RETURN ADDRESS 0xb530603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9840
removing node 0xb530603c of size 32 


 REQUEST NUMBER 332 TO ALLOCATE BLOCK OF SIZE 5709
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9944690 and page at 0xb5308000 
adding page node for the page located at 0xb5308000 and pagePtr 0x9944690 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 63 
stepping through nodes 
 we have 63 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cae4 and the new one at 0xb527cb10 
New page node points to data page 0xb5308000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 64 
RETURN ADDRESS IS 0xb5308000 


 REQUEST NUMBER 333 TO ALLOCATE BLOCK OF SIZE 93
Adjusted size to: 128
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9880
removing node 0xb530003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 334 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb530603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9860
removing node 0xb530603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 335 TO ALLOCATE BLOCK OF SIZE 6425
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x993e798 and page at 0xb5306000 
adding page node for the page located at 0xb5306000 and pagePtr 0x993e798 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 64 
stepping through nodes 
 we have 64 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cb10 and the new one at 0xb527cb3c 
New page node points to data page 0xb5306000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 65 
RETURN ADDRESS IS 0xb5306000 


 REQUEST NUMBER 336 TO ALLOCATE BLOCK OF SIZE 516
Adjusted size to: 1024
RETURN ADDRESS 0xb52fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9c00
removing node 0xb52fe03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 337 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
removing node 0xb530403c of size 256 
*** freeing page for lists of size 3
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
removing node 0xb530403c of size 128 
created new node at 0xb52fe04c whose previous is 0xb52fe03c and size is 16 so prev+16 =0xb52fe04c 
removing node 0xb52fe03c of size 64 
created new node at 0xb530004c whose previous is 0xb530003c and size is 16 so prev+16 =0xb530004c 
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9900
removing node 0xb530003c of size 32 


 REQUEST NUMBER 338 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9920
removing node 0xb530003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 339 TO ALLOCATE BLOCK OF SIZE 4059
Adjusted size to: 4096
RETURN ADDRESS 0xb530203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fb000
removing node 0xb530203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 340 TO ALLOCATE BLOCK OF SIZE 1909
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5302000 and pagePtr 0x9933068 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 65 
stepping through nodes 
 we have 65 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cb3c and the new one at 0xb527cb68 
New page node points to data page 0xb5302000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 66 
created new node at 0xb530004c whose previous is 0xb530003c and size is 16 so prev+16 =0xb530004c 
removing node 0xb530003c of size 4096 
created new node at 0xb530a04c whose previous is 0xb530a03c and size is 16 so prev+16 =0xb530a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb530a03c-> 0xb5302000
removing node 0xb530a03c of size 2048 


 REQUEST NUMBER 341 TO ALLOCATE BLOCK OF SIZE 222
Adjusted size to: 256
removing node 0xb52da03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9a00
removing node 0xb52da03c of size 256 


 REQUEST NUMBER 342 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
removing node 0xb52fe03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52fe04c whose previous is 0xb52fe03c and size is 16 so prev+16 =0xb52fe04c 
RETURN ADDRESS 0xb52fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9940
removing node 0xb52fe03c of size 32 


 REQUEST NUMBER 343 TO ALLOCATE BLOCK OF SIZE 195
Adjusted size to: 256
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9b00
removing node 0xb52da03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 344 TO ALLOCATE BLOCK OF SIZE 154
Adjusted size to: 256
removing node 0xb530a03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb530a04c whose previous is 0xb530a03c and size is 16 so prev+16 =0xb530a04c 
removing node 0xb530a03c of size 1024 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 512 
created new node at 0xb530c04c whose previous is 0xb530c03c and size is 16 so prev+16 =0xb530c04c 
RETURN ADDRESS 0xb530c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302800
removing node 0xb530c03c of size 256 


 REQUEST NUMBER 345 TO FREE BLOCK 0xb528d800  OF SIZE 168
coalescing blocks if possible
trying to coalesce a block at ptr 0xb528d800 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb530c04c whose previous is 0xb530c03c and size is 16 so prev+16 =0xb530c04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb52fe000 -- 0xb5300000| 

 COUNT: 1  - ends at 0xb52fe03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5304000 -- 0xb5306000| 

 COUNT: 1  - ends at 0xb530403c 
	 3 -> 0xb530c000 -- 0xb530e000| 

 COUNT: 2  - ends at 0xb530c04c 
	 4 -> 0xb52da000 -- 0xb52dc000| 

 COUNT: 1  - ends at 0xb52da03c 
	 5 -> 0xb530a000 -- 0xb530c000| 

 COUNT: 1  - ends at 0xb530a03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb5300000 -- 0xb5302000| 

 COUNT: 1  - ends at 0xb530003c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 346 TO ALLOCATE BLOCK OF SIZE 81
Adjusted size to: 128
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9980
removing node 0xb530403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 347 TO ALLOCATE BLOCK OF SIZE 277
Adjusted size to: 512
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302a00
removing node 0xb52da03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 348 TO ALLOCATE BLOCK OF SIZE 59
Adjusted size to: 64
removing node 0xb530c03c of size 256 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 128 
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302900
removing node 0xb530403c of size 64 


 REQUEST NUMBER 349 TO ALLOCATE BLOCK OF SIZE 2473
Adjusted size to: 4096
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5303000
removing node 0xb530003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 350 TO ALLOCATE BLOCK OF SIZE 86
Adjusted size to: 128
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302980
removing node 0xb52da03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 351 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
RETURN ADDRESS 0xb52fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f9960
removing node 0xb52fe03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 352 TO ALLOCATE BLOCK OF SIZE 3123
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52fe000 and pagePtr 0x993a320 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 66 
stepping through nodes 
 we have 66 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cb68 and the new one at 0xb527cb94 
New page node points to data page 0xb52fe000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 67 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS IS ----------------------->>>>>0xb52da03c-> 0xb52fe000
removing node 0xb52da03c of size 4096 


 REQUEST NUMBER 353 TO ALLOCATE BLOCK OF SIZE 311
Adjusted size to: 512
removing node 0xb530a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb530a04c whose previous is 0xb530a03c and size is 16 so prev+16 =0xb530a04c 
RETURN ADDRESS 0xb530a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302c00
removing node 0xb530a03c of size 512 


 REQUEST NUMBER 354 TO ALLOCATE BLOCK OF SIZE 89
Adjusted size to: 128
removing node 0xb530c03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb530c04c whose previous is 0xb530c03c and size is 16 so prev+16 =0xb530c04c 
RETURN ADDRESS 0xb530c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d800
removing node 0xb530c03c of size 128 


 REQUEST NUMBER 355 TO FREE BLOCK 0xb5290000  OF SIZE 4926
removing pageNode to page with ptr 0x98f1e60 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
out of loop 
IN LOOPP 0xb527c220 -> 0xb527c24c (next) 
IN LOOPP 0xb527c24c -> 0xb527c278 (next) 
IN LOOPP 0xb527c278 -> 0xb527c2a4 (next) 
IN LOOPP 0xb527c2a4 -> 0xb527c2d0 (next) 
IN LOOPP 0xb527c2d0 -> 0xb527c2fc (next) 
IN LOOPP 0xb527c2fc -> 0xb527c328 (next) 
IN LOOPP 0xb527c328 -> 0xb527c354 (next) 
IN LOOPP 0xb527c354 -> 0xb527c380 (next) 
IN LOOPP 0xb527c380 -> 0xb527c3ac (next) 
IN LOOPP 0xb527c3ac -> 0xb527c3d8 (next) 
IN LOOPP 0xb527c3d8 -> 0xb527c404 (next) 
IN LOOPP 0xb527c404 -> 0xb527c430 (next) 
IN LOOPP 0xb527c430 -> 0xb527c45c (next) 
IN LOOPP 0xb527c45c -> 0xb527c488 (next) 
IN LOOPP 0xb527c488 -> 0xb527c4b4 (next) 
IN LOOPP 0xb527c4b4 -> 0xb527c4e0 (next) 
IN LOOPP 0xb527c4e0 -> 0xb527c50c (next) 
IN LOOPP 0xb527c50c -> 0xb527c538 (next) 
IN LOOPP 0xb527c538 -> 0xb527c564 (next) 
IN LOOPP 0xb527c564 -> 0xb527c590 (next) 
IN LOOPP 0xb527c590 -> 0xb527c5bc (next) 
IN LOOPP 0xb527c5bc -> 0xb527c5e8 (next) 
IN LOOPP 0xb527c5e8 -> 0xb527c614 (next) 
IN LOOPP 0xb527c614 -> 0xb527c640 (next) 
IN LOOPP 0xb527c640 -> 0xb527c66c (next) 
IN LOOPP 0xb527c66c -> 0xb527c698 (next) 
IN LOOPP 0xb527c698 -> 0xb527c6c4 (next) 
IN LOOPP 0xb527c6c4 -> 0xb527c6f0 (next) 
IN LOOPP 0xb527c6f0 -> 0xb527c71c (next) 
IN LOOPP 0xb527c71c -> 0xb527c748 (next) 
IN LOOPP 0xb527c748 -> 0xb527c774 (next) 
IN LOOPP 0xb527c774 -> 0xb527c7a0 (next) 
IN LOOPP 0xb527c7a0 -> 0xb527c7cc (next) 
IN LOOPP 0xb527c7cc -> 0xb527c7f8 (next) 
IN LOOPP 0xb527c7f8 -> 0xb527c824 (next) 
IN LOOPP 0xb527c824 -> 0xb527c850 (next) 
IN LOOPP 0xb527c850 -> 0xb527c87c (next) 
IN LOOPP 0xb527c87c -> 0xb527c8a8 (next) 
IN LOOPP 0xb527c8a8 -> 0xb527c8d4 (next) 
IN LOOPP 0xb527c8d4 -> 0xb527c900 (next) 
IN LOOPP 0xb527c900 -> 0xb527c92c (next) 
IN LOOPP 0xb527c92c -> 0xb527c958 (next) 
IN LOOPP 0xb527c958 -> 0xb527c984 (next) 
IN LOOPP 0xb527c984 -> 0xb527c9b0 (next) 
IN LOOPP 0xb527c9b0 -> 0xb527c9dc (next) 
IN LOOPP 0xb527c9dc -> 0xb527ca08 (next) 
IN LOOPP 0xb527ca08 -> 0xb527ca34 (next) 
IN LOOPP 0xb527ca34 -> 0xb527ca60 (next) 
IN LOOPP 0xb527ca60 -> 0xb527ca8c (next) 
IN LOOPP 0xb527ca8c -> 0xb527cab8 (next) 
IN LOOPP 0xb527cab8 -> 0xb527cae4 (next) 
IN LOOPP 0xb527cae4 -> 0xb527cb10 (next) 
IN LOOPP 0xb527cb10 -> 0xb527cb3c (next) 
IN LOOPP 0xb527cb3c -> 0xb527cb68 (next) 
IN LOOPP 0xb527cb68 -> 0xb527cb94 (next) 
IN LOOPP 0xb527cb94 -> (nil) (next) 
Add 0xb527cb3c we set the next to null 
Prev: 0xb527cb94, current: (nil) 
Page to decrease counter: 0xb527c000 from 67 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5304000 -- 0xb5306000| 

 COUNT: 1  - ends at 0xb530403c 
	 2 -> 0xb530c000 -- 0xb530e000| 

 COUNT: 1  - ends at 0xb530c03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb530a000 -- 0xb530c000| 

 COUNT: 1  - ends at 0xb530a03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb52da000 -- 0xb52dc000| 

 COUNT: 1  - ends at 0xb52da03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 356 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
removing node 0xb530403c of size 64 
*** freeing page for lists of size 1
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302940
removing node 0xb530403c of size 32 


 REQUEST NUMBER 357 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302960
removing node 0xb530403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 358 TO ALLOCATE BLOCK OF SIZE 50
Adjusted size to: 64
removing node 0xb530c03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb530c04c whose previous is 0xb530c03c and size is 16 so prev+16 =0xb530c04c 
RETURN ADDRESS 0xb530c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d880
removing node 0xb530c03c of size 64 


 REQUEST NUMBER 359 TO ALLOCATE BLOCK OF SIZE 24
Adjusted size to: 32
removing node 0xb530c03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb530c04c whose previous is 0xb530c03c and size is 16 so prev+16 =0xb530c04c 
RETURN ADDRESS 0xb530c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d8c0
removing node 0xb530c03c of size 32 


 REQUEST NUMBER 360 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
removing node 0xb530a03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb530a04c whose previous is 0xb530a03c and size is 16 so prev+16 =0xb530a04c 
removing node 0xb530a03c of size 256 
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
removing node 0xb530403c of size 128 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302e00
removing node 0xb529003c of size 64 


 REQUEST NUMBER 361 TO ALLOCATE BLOCK OF SIZE 68
Adjusted size to: 128
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302e80
removing node 0xb530403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 362 TO ALLOCATE BLOCK OF SIZE 476
Adjusted size to: 512
removing node 0xb52da03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 2048 
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
removing node 0xb530403c of size 1024 
created new node at 0xb530004c whose previous is 0xb530003c and size is 16 so prev+16 =0xb530004c 
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff000
removing node 0xb530003c of size 512 


 REQUEST NUMBER 363 TO ALLOCATE BLOCK OF SIZE 3069
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb530e000 and pagePtr 0x98f8db0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 66 
stepping through nodes 
 we have 65 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cb3c and the new one at 0xb527cb68 
New page node points to data page 0xb530e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 67 
created new node at 0xb531004c whose previous is 0xb531003c and size is 16 so prev+16 =0xb531004c 
RETURN ADDRESS IS ----------------------->>>>>0xb531003c-> 0xb530e000
removing node 0xb531003c of size 4096 


 REQUEST NUMBER 364 TO ALLOCATE BLOCK OF SIZE 726
Adjusted size to: 1024
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff400
removing node 0xb530403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 365 TO ALLOCATE BLOCK OF SIZE 2308
Adjusted size to: 4096
RETURN ADDRESS 0xb531003c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f000
removing node 0xb531003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 366 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb530c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb528d8e0
removing node 0xb530c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 367 TO ALLOCATE BLOCK OF SIZE 75
Adjusted size to: 128
removing node 0xb530a03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb530a04c whose previous is 0xb530a03c and size is 16 so prev+16 =0xb530a04c 
RETURN ADDRESS 0xb530a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302f00
removing node 0xb530a03c of size 128 


 REQUEST NUMBER 368 TO ALLOCATE BLOCK OF SIZE 4557
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f1e60 and page at 0xb530c000 
adding page node for the page located at 0xb530c000 and pagePtr 0x98f1e60 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 67 
stepping through nodes 
 we have 66 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cb68 and the new one at 0xb527cb94 
New page node points to data page 0xb530c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 68 
RETURN ADDRESS IS 0xb530c000 


 REQUEST NUMBER 369 TO ALLOCATE BLOCK OF SIZE 145
Adjusted size to: 256
removing node 0xb530003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb530004c whose previous is 0xb530003c and size is 16 so prev+16 =0xb530004c 
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff200
removing node 0xb530003c of size 256 


 REQUEST NUMBER 370 TO ALLOCATE BLOCK OF SIZE 923
Adjusted size to: 1024
removing node 0xb52da03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff800
removing node 0xb52da03c of size 1024 


 REQUEST NUMBER 371 TO ALLOCATE BLOCK OF SIZE 187
Adjusted size to: 256
RETURN ADDRESS 0xb530003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff300
removing node 0xb530003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 372 TO ALLOCATE BLOCK OF SIZE 3284
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5300000 and pagePtr 0x98f8bc0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 68 
stepping through nodes 
 we have 67 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cb94 and the new one at 0xb527cbc0 
New page node points to data page 0xb5300000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 69 
created new node at 0xb531004c whose previous is 0xb531003c and size is 16 so prev+16 =0xb531004c 
RETURN ADDRESS IS ----------------------->>>>>0xb531003c-> 0xb5300000
removing node 0xb531003c of size 4096 


 REQUEST NUMBER 373 TO ALLOCATE BLOCK OF SIZE 342
Adjusted size to: 512
removing node 0xb52da03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ffc00
removing node 0xb52da03c of size 512 


 REQUEST NUMBER 374 TO ALLOCATE BLOCK OF SIZE 194
Adjusted size to: 256
removing node 0xb52da03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ffe00
removing node 0xb52da03c of size 256 


 REQUEST NUMBER 375 TO ALLOCATE BLOCK OF SIZE 303
Adjusted size to: 512
removing node 0xb531003c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb531004c whose previous is 0xb531003c and size is 16 so prev+16 =0xb531004c 
removing node 0xb531003c of size 2048 
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
removing node 0xb530403c of size 1024 
created new node at 0xb531204c whose previous is 0xb531203c and size is 16 so prev+16 =0xb531204c 
RETURN ADDRESS 0xb531203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5301000
removing node 0xb531203c of size 512 


 REQUEST NUMBER 376 TO ALLOCATE BLOCK OF SIZE 78
Adjusted size to: 128
RETURN ADDRESS 0xb530a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302f80
removing node 0xb530a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 377 TO ALLOCATE BLOCK OF SIZE 268
Adjusted size to: 512
RETURN ADDRESS 0xb531203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5301200
removing node 0xb531203c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 378 TO ALLOCATE BLOCK OF SIZE 38
Adjusted size to: 64
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302e40
removing node 0xb529003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 379 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
removing node 0xb52da03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 128 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 64 
created new node at 0xb531204c whose previous is 0xb531203c and size is 16 so prev+16 =0xb531204c 
RETURN ADDRESS 0xb531203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fff00
removing node 0xb531203c of size 32 


 REQUEST NUMBER 380 TO ALLOCATE BLOCK OF SIZE 306
Adjusted size to: 512
removing node 0xb530403c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5301400
removing node 0xb530403c of size 512 


 REQUEST NUMBER 381 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
RETURN ADDRESS 0xb531203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fff20
removing node 0xb531203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 382 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
removing node 0xb529003c of size 64 
*** freeing page for lists of size 1
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fff40
removing node 0xb529003c of size 32 


 REQUEST NUMBER 383 TO ALLOCATE BLOCK OF SIZE 287
Adjusted size to: 512
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5301600
removing node 0xb530403c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 384 TO ALLOCATE BLOCK OF SIZE 1314
Adjusted size to: 2048
RETURN ADDRESS 0xb531003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5301800
removing node 0xb531003c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 385 TO ALLOCATE BLOCK OF SIZE 1181
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5310000 and pagePtr 0x98f8dc0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 69 
stepping through nodes 
 we have 68 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cbc0 and the new one at 0xb527cbec 
New page node points to data page 0xb5310000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 70 
created new node at 0xb530404c whose previous is 0xb530403c and size is 16 so prev+16 =0xb530404c 
removing node 0xb530403c of size 4096 
created new node at 0xb531204c whose previous is 0xb531203c and size is 16 so prev+16 =0xb531204c 
RETURN ADDRESS IS ----------------------->>>>>0xb531203c-> 0xb5310000
removing node 0xb531203c of size 2048 


 REQUEST NUMBER 386 TO FREE BLOCK 0xb5297240  OF SIZE 48
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5297240 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5290000 -- 0xb5292000| 

 COUNT: 1  - ends at 0xb529003c 
	 1 -> 0xb530a000 -- 0xb530c000| 

 COUNT: 1  - ends at 0xb530a03c 
	 2 -> 0xb52da000 -- 0xb52dc000| 

 COUNT: 1  - ends at 0xb52da03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb5312000 -- 0xb5314000| 

 COUNT: 1  - ends at 0xb531203c 
	 7 -> 0xb5304000 -- 0xb5306000| 

 COUNT: 1  - ends at 0xb530403c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 387 TO ALLOCATE BLOCK OF SIZE 3023
Adjusted size to: 4096
RETURN ADDRESS 0xb530403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5311000
removing node 0xb530403c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 388 TO ALLOCATE BLOCK OF SIZE 7724
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9948888 and page at 0xb5304000 
adding page node for the page located at 0xb5304000 and pagePtr 0x9948888 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 70 
stepping through nodes 
 we have 69 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cbec and the new one at 0xb527cc18 
New page node points to data page 0xb5304000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 71 
RETURN ADDRESS IS 0xb5304000 


 REQUEST NUMBER 389 TO ALLOCATE BLOCK OF SIZE 445
Adjusted size to: 512
removing node 0xb531203c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb531204c whose previous is 0xb531203c and size is 16 so prev+16 =0xb531204c 
removing node 0xb531203c of size 1024 
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310800
removing node 0xb531403c of size 512 


 REQUEST NUMBER 390 TO ALLOCATE BLOCK OF SIZE 44
Adjusted size to: 64
RETURN ADDRESS 0xb530a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297240
removing node 0xb530a03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 391 TO ALLOCATE BLOCK OF SIZE 2141
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb530a000 and pagePtr 0x994e8b8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 71 
stepping through nodes 
 we have 70 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cc18 and the new one at 0xb527cc44 
New page node points to data page 0xb530a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 72 
created new node at 0xb531604c whose previous is 0xb531603c and size is 16 so prev+16 =0xb531604c 
RETURN ADDRESS IS ----------------------->>>>>0xb531603c-> 0xb530a000
removing node 0xb531603c of size 4096 


 REQUEST NUMBER 392 TO ALLOCATE BLOCK OF SIZE 24
Adjusted size to: 32
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fff60
removing node 0xb529003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 393 TO ALLOCATE BLOCK OF SIZE 63
Adjusted size to: 64
removing node 0xb52da03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fff80
removing node 0xb52da03c of size 64 


 REQUEST NUMBER 394 TO ALLOCATE BLOCK OF SIZE 62
Adjusted size to: 64
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fffc0
removing node 0xb52da03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 395 TO ALLOCATE BLOCK OF SIZE 1210
Adjusted size to: 2048
removing node 0xb531603c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb531604c whose previous is 0xb531603c and size is 16 so prev+16 =0xb531604c 
RETURN ADDRESS 0xb531603c
RETURN ADDRESS IS ----------------------->>>>> 0xb530b000
removing node 0xb531603c of size 2048 


 REQUEST NUMBER 396 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb531403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
removing node 0xb531403c of size 256 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 128 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 64 
created new node at 0xb531804c whose previous is 0xb531803c and size is 16 so prev+16 =0xb531804c 
RETURN ADDRESS 0xb531803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310a00
removing node 0xb531803c of size 32 


 REQUEST NUMBER 397 TO ALLOCATE BLOCK OF SIZE 3512
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb531a000 and pagePtr 0x99522b0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 72 
stepping through nodes 
 we have 71 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cc44 and the new one at 0xb527cc70 
New page node points to data page 0xb531a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 73 
created new node at 0xb531c04c whose previous is 0xb531c03c and size is 16 so prev+16 =0xb531c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb531c03c-> 0xb531a000
removing node 0xb531c03c of size 4096 


 REQUEST NUMBER 398 TO ALLOCATE BLOCK OF SIZE 7034
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9953090 and page at 0xb531e000 
adding page node for the page located at 0xb531e000 and pagePtr 0x9953090 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 73 
stepping through nodes 
 we have 72 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cc70 and the new one at 0xb527cc9c 
New page node points to data page 0xb531e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 74 
RETURN ADDRESS IS 0xb531e000 


 REQUEST NUMBER 399 TO ALLOCATE BLOCK OF SIZE 43
Adjusted size to: 64
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310a40
removing node 0xb529003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 400 TO ALLOCATE BLOCK OF SIZE 2763
Adjusted size to: 4096
RETURN ADDRESS 0xb531c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb531b000
removing node 0xb531c03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 401 TO ALLOCATE BLOCK OF SIZE 1762
Adjusted size to: 2048
RETURN ADDRESS 0xb531603c
RETURN ADDRESS IS ----------------------->>>>> 0xb530b800
removing node 0xb531603c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 402 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
RETURN ADDRESS 0xb531803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310a20
removing node 0xb531803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 403 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
removing node 0xb52da03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 64 
created new node at 0xb531804c whose previous is 0xb531803c and size is 16 so prev+16 =0xb531804c 
RETURN ADDRESS 0xb531803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310a80
removing node 0xb531803c of size 32 


 REQUEST NUMBER 404 TO ALLOCATE BLOCK OF SIZE 502
Adjusted size to: 512
removing node 0xb531203c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb531204c whose previous is 0xb531203c and size is 16 so prev+16 =0xb531204c 
RETURN ADDRESS 0xb531203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310c00
removing node 0xb531203c of size 512 


 REQUEST NUMBER 405 TO ALLOCATE BLOCK OF SIZE 357
Adjusted size to: 512
RETURN ADDRESS 0xb531203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310e00
removing node 0xb531203c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 406 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb531803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310aa0
removing node 0xb531803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 407 TO ALLOCATE BLOCK OF SIZE 4360
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f9da0 and page at 0xb5318000 
adding page node for the page located at 0xb5318000 and pagePtr 0x98f9da0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 74 
stepping through nodes 
 we have 73 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cc9c and the new one at 0xb527ccc8 
New page node points to data page 0xb5318000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 75 
RETURN ADDRESS IS 0xb5318000 


 REQUEST NUMBER 408 TO ALLOCATE BLOCK OF SIZE 70
Adjusted size to: 128
removing node 0xb531403c of size 256 
*** freeing page for lists of size 3
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310b00
removing node 0xb531403c of size 128 


 REQUEST NUMBER 409 TO ALLOCATE BLOCK OF SIZE 5512
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f8b38 and page at 0xb5312000 
adding page node for the page located at 0xb5312000 and pagePtr 0x98f8b38 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 75 
stepping through nodes 
 we have 74 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ccc8 and the new one at 0xb527ccf4 
New page node points to data page 0xb5312000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 76 
RETURN ADDRESS IS 0xb5312000 


 REQUEST NUMBER 410 TO ALLOCATE BLOCK OF SIZE 1085
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5316000 and pagePtr 0x98f9e50 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 76 
stepping through nodes 
 we have 75 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ccf4 and the new one at 0xb527cd20 
New page node points to data page 0xb5316000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 77 
created new node at 0xb531c04c whose previous is 0xb531c03c and size is 16 so prev+16 =0xb531c04c 
removing node 0xb531c03c of size 4096 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
RETURN ADDRESS IS ----------------------->>>>>0xb529003c-> 0xb5316000
removing node 0xb529003c of size 2048 


 REQUEST NUMBER 411 TO ALLOCATE BLOCK OF SIZE 3291
Adjusted size to: 4096
RETURN ADDRESS 0xb531c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5317000
removing node 0xb531c03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 412 TO ALLOCATE BLOCK OF SIZE 116
Adjusted size to: 128
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310b80
removing node 0xb531403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 413 TO ALLOCATE BLOCK OF SIZE 68
Adjusted size to: 128
removing node 0xb529003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 1024 
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
removing node 0xb531403c of size 512 
created new node at 0xb531c04c whose previous is 0xb531c03c and size is 16 so prev+16 =0xb531c04c 
removing node 0xb531c03c of size 256 
created new node at 0xb532004c whose previous is 0xb532003c and size is 16 so prev+16 =0xb532004c 
RETURN ADDRESS 0xb532003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5316800
removing node 0xb532003c of size 128 


 REQUEST NUMBER 414 TO ALLOCATE BLOCK OF SIZE 579
Adjusted size to: 1024
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5316c00
removing node 0xb529003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 415 TO ALLOCATE BLOCK OF SIZE 120
Adjusted size to: 128
RETURN ADDRESS 0xb532003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5316880
removing node 0xb532003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 416 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
removing node 0xb52da03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310ac0
removing node 0xb52da03c of size 32 


 REQUEST NUMBER 417 TO ALLOCATE BLOCK OF SIZE 91
Adjusted size to: 128
removing node 0xb531c03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb531c04c whose previous is 0xb531c03c and size is 16 so prev+16 =0xb531c04c 
RETURN ADDRESS 0xb531c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5316900
removing node 0xb531c03c of size 128 


 REQUEST NUMBER 418 TO ALLOCATE BLOCK OF SIZE 1161
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5320000 and pagePtr 0x9959a48 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 77 
stepping through nodes 
 we have 76 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cd20 and the new one at 0xb527cd4c 
New page node points to data page 0xb5320000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 78 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 4096 
created new node at 0xb532204c whose previous is 0xb532203c and size is 16 so prev+16 =0xb532204c 
RETURN ADDRESS IS ----------------------->>>>>0xb532203c-> 0xb5320000
removing node 0xb532203c of size 2048 


 REQUEST NUMBER 419 TO ALLOCATE BLOCK OF SIZE 289
Adjusted size to: 512
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5316a00
removing node 0xb531403c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 420 TO ALLOCATE BLOCK OF SIZE 40
Adjusted size to: 64
removing node 0xb531c03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb531c04c whose previous is 0xb531c03c and size is 16 so prev+16 =0xb531c04c 
RETURN ADDRESS 0xb531c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5316980
removing node 0xb531c03c of size 64 


 REQUEST NUMBER 421 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310ae0
removing node 0xb52da03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 422 TO ALLOCATE BLOCK OF SIZE 523
Adjusted size to: 1024
removing node 0xb532203c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb532204c whose previous is 0xb532203c and size is 16 so prev+16 =0xb532204c 
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5320800
removing node 0xb532203c of size 1024 


 REQUEST NUMBER 423 TO ALLOCATE BLOCK OF SIZE 686
Adjusted size to: 1024
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5320c00
removing node 0xb532203c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 424 TO ALLOCATE BLOCK OF SIZE 139
Adjusted size to: 256
removing node 0xb529003c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 2048 
created new node at 0xb532204c whose previous is 0xb532203c and size is 16 so prev+16 =0xb532204c 
removing node 0xb532203c of size 1024 
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
removing node 0xb52da03c of size 512 
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321000
removing node 0xb531403c of size 256 


 REQUEST NUMBER 425 TO ALLOCATE BLOCK OF SIZE 244
Adjusted size to: 256
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321100
removing node 0xb531403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 426 TO ALLOCATE BLOCK OF SIZE 189
Adjusted size to: 256
removing node 0xb52da03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52da04c whose previous is 0xb52da03c and size is 16 so prev+16 =0xb52da04c 
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321200
removing node 0xb52da03c of size 256 


 REQUEST NUMBER 427 TO ALLOCATE BLOCK OF SIZE 216
Adjusted size to: 256
RETURN ADDRESS 0xb52da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321300
removing node 0xb52da03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 428 TO ALLOCATE BLOCK OF SIZE 25
Adjusted size to: 32
removing node 0xb531c03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb531c04c whose previous is 0xb531c03c and size is 16 so prev+16 =0xb531c04c 
RETURN ADDRESS 0xb531c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53169c0
removing node 0xb531c03c of size 32 


 REQUEST NUMBER 429 TO ALLOCATE BLOCK OF SIZE 747
Adjusted size to: 1024
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321400
removing node 0xb532203c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 430 TO ALLOCATE BLOCK OF SIZE 332
Adjusted size to: 512
removing node 0xb529003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 1024 
created new node at 0xb532204c whose previous is 0xb532203c and size is 16 so prev+16 =0xb532204c 
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321800
removing node 0xb532203c of size 512 


 REQUEST NUMBER 431 TO FREE BLOCK 0xb52fd800  OF SIZE 477
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52fd800 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb532204c whose previous is 0xb532203c and size is 16 so prev+16 =0xb532204c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb531c000 -- 0xb531e000| 

 COUNT: 1  - ends at 0xb531c03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5322000 -- 0xb5324000| 

 COUNT: 2  - ends at 0xb532204c 
	 5 -> 0xb5290000 -- 0xb5292000| 

 COUNT: 1  - ends at 0xb529003c 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 432 TO ALLOCATE BLOCK OF SIZE 442
Adjusted size to: 512
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321a00
removing node 0xb532203c of size 512 


 REQUEST NUMBER 433 TO ALLOCATE BLOCK OF SIZE 7735
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f9e40 and page at 0xb52da000 
adding page node for the page located at 0xb52da000 and pagePtr 0x98f9e40 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 78 
stepping through nodes 
 we have 77 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cd4c and the new one at 0xb527cd78 
New page node points to data page 0xb52da000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 79 
RETURN ADDRESS IS 0xb52da000 


 REQUEST NUMBER 434 TO ALLOCATE BLOCK OF SIZE 367
Adjusted size to: 512
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52fd800
removing node 0xb532203c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 435 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb531c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53169e0
removing node 0xb531c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 436 TO ALLOCATE BLOCK OF SIZE 1235
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb531c000 and pagePtr 0x993e7a8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 79 
stepping through nodes 
 we have 78 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cd78 and the new one at 0xb527cda4 
New page node points to data page 0xb531c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 80 
created new node at 0xb532204c whose previous is 0xb532203c and size is 16 so prev+16 =0xb532204c 
removing node 0xb532203c of size 4096 
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
RETURN ADDRESS IS ----------------------->>>>>0xb531403c-> 0xb531c000
removing node 0xb531403c of size 2048 


 REQUEST NUMBER 437 TO ALLOCATE BLOCK OF SIZE 151
Adjusted size to: 256
removing node 0xb529003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 512 
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
RETURN ADDRESS 0xb532403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321c00
removing node 0xb532403c of size 256 


 REQUEST NUMBER 438 TO FREE BLOCK 0xb5297800  OF SIZE 1568
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5297800 and of size: 2048 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5324000 -- 0xb5326000| 

 COUNT: 1  - ends at 0xb532403c 
	 4 -> 0xb5290000 -- 0xb5292000| 

 COUNT: 1  - ends at 0xb529003c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb5314000 -- 0xb5316000| 

 COUNT: 2  - ends at 0xb531404c 
	 7 -> 0xb5322000 -- 0xb5324000| 

 COUNT: 1  - ends at 0xb532203c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 439 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb532403c of size 256 
*** freeing page for lists of size 3
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
removing node 0xb532403c of size 128 
created new node at 0xb532604c whose previous is 0xb532603c and size is 16 so prev+16 =0xb532604c 
removing node 0xb532603c of size 64 
created new node at 0xb532804c whose previous is 0xb532803c and size is 16 so prev+16 =0xb532804c 
RETURN ADDRESS 0xb532803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321d00
removing node 0xb532803c of size 32 


 REQUEST NUMBER 440 TO ALLOCATE BLOCK OF SIZE 387
Adjusted size to: 512
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321e00
removing node 0xb529003c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 441 TO ALLOCATE BLOCK OF SIZE 2260
Adjusted size to: 4096
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb531d000
removing node 0xb532203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 442 TO ALLOCATE BLOCK OF SIZE 1375
Adjusted size to: 2048
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb531c800
removing node 0xb531403c of size 2048 


 REQUEST NUMBER 443 TO ALLOCATE BLOCK OF SIZE 144
Adjusted size to: 256
removing node 0xb531403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
removing node 0xb531403c of size 1024 
created new node at 0xb532204c whose previous is 0xb532203c and size is 16 so prev+16 =0xb532204c 
removing node 0xb532203c of size 512 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297800
removing node 0xb529003c of size 256 


 REQUEST NUMBER 444 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb532803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321d20
removing node 0xb532803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 445 TO ALLOCATE BLOCK OF SIZE 1521
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5328000 and pagePtr 0x98f7940 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 80 
stepping through nodes 
 we have 79 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cda4 and the new one at 0xb527cdd0 
New page node points to data page 0xb5328000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 81 
created new node at 0xb532a04c whose previous is 0xb532a03c and size is 16 so prev+16 =0xb532a04c 
removing node 0xb532a03c of size 4096 
created new node at 0xb532c04c whose previous is 0xb532c03c and size is 16 so prev+16 =0xb532c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb532c03c-> 0xb5328000
removing node 0xb532c03c of size 2048 


 REQUEST NUMBER 446 TO FREE BLOCK 0xb527e800  OF SIZE 844
coalescing blocks if possible
trying to coalesce a block at ptr 0xb527e800 and of size: 1024 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb531404c whose previous is 0xb531403c and size is 16 so prev+16 =0xb531404c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5326000 -- 0xb5328000| 

 COUNT: 1  - ends at 0xb532603c 
	 2 -> 0xb5324000 -- 0xb5326000| 

 COUNT: 1  - ends at 0xb532403c 
	 3 -> 0xb5290000 -- 0xb5292000| 

 COUNT: 1  - ends at 0xb529003c 
	 4 -> 0xb5322000 -- 0xb5324000| 

 COUNT: 1  - ends at 0xb532203c 
	 5 -> 0xb5314000 -- 0xb5316000| 

 COUNT: 2  - ends at 0xb531404c 
	 6 -> 0xb532c000 -- 0xb532e000| 

 COUNT: 1  - ends at 0xb532c03c 
	 7 -> 0xb532a000 -- 0xb532c000| 

 COUNT: 1  - ends at 0xb532a03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 447 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
removing node 0xb532603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb532604c whose previous is 0xb532603c and size is 16 so prev+16 =0xb532604c 
RETURN ADDRESS 0xb532603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321d40
removing node 0xb532603c of size 32 


 REQUEST NUMBER 448 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb532603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321d60
removing node 0xb532603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 449 TO ALLOCATE BLOCK OF SIZE 42
Adjusted size to: 64
removing node 0xb532403c of size 128 
*** freeing page for lists of size 2
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
RETURN ADDRESS 0xb532403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321d80
removing node 0xb532403c of size 64 


 REQUEST NUMBER 450 TO ALLOCATE BLOCK OF SIZE 3198
Adjusted size to: 4096
RETURN ADDRESS 0xb532a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5329000
removing node 0xb532a03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 451 TO ALLOCATE BLOCK OF SIZE 2484
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb532a000 and pagePtr 0x98f7950 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 81 
stepping through nodes 
 we have 80 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cdd0 and the new one at 0xb527cdfc 
New page node points to data page 0xb532a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 82 
created new node at 0xb532604c whose previous is 0xb532603c and size is 16 so prev+16 =0xb532604c 
RETURN ADDRESS IS ----------------------->>>>>0xb532603c-> 0xb532a000
removing node 0xb532603c of size 4096 


 REQUEST NUMBER 452 TO ALLOCATE BLOCK OF SIZE 912
Adjusted size to: 1024
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297c00
removing node 0xb531403c of size 1024 


 REQUEST NUMBER 453 TO ALLOCATE BLOCK OF SIZE 1290
Adjusted size to: 2048
RETURN ADDRESS 0xb532c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5328800
removing node 0xb532c03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 454 TO ALLOCATE BLOCK OF SIZE 723
Adjusted size to: 1024
RETURN ADDRESS 0xb531403c
RETURN ADDRESS IS ----------------------->>>>> 0xb527e800
removing node 0xb531403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 455 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
removing node 0xb532403c of size 64 
*** freeing page for lists of size 1
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
RETURN ADDRESS 0xb532403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321dc0
removing node 0xb532403c of size 32 


 REQUEST NUMBER 456 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
RETURN ADDRESS 0xb532403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321de0
removing node 0xb532403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 457 TO ALLOCATE BLOCK OF SIZE 2767
Adjusted size to: 4096
RETURN ADDRESS 0xb532603c
RETURN ADDRESS IS ----------------------->>>>> 0xb532b000
removing node 0xb532603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 458 TO ALLOCATE BLOCK OF SIZE 2832
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5326000 and pagePtr 0x98f7960 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 82 
stepping through nodes 
 we have 81 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cdfc and the new one at 0xb527ce28 
New page node points to data page 0xb5326000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 83 
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
RETURN ADDRESS IS ----------------------->>>>>0xb532403c-> 0xb5326000
removing node 0xb532403c of size 4096 


 REQUEST NUMBER 459 TO ALLOCATE BLOCK OF SIZE 6679
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9941388 and page at 0xb5314000 
adding page node for the page located at 0xb5314000 and pagePtr 0x9941388 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 83 
stepping through nodes 
 we have 82 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ce28 and the new one at 0xb527ce54 
New page node points to data page 0xb5314000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 84 
RETURN ADDRESS IS 0xb5314000 


 REQUEST NUMBER 460 TO ALLOCATE BLOCK OF SIZE 214
Adjusted size to: 256
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297900
removing node 0xb529003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 461 TO ALLOCATE BLOCK OF SIZE 335
Adjusted size to: 512
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297a00
removing node 0xb532203c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 462 TO ALLOCATE BLOCK OF SIZE 162
Adjusted size to: 256
removing node 0xb532403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
removing node 0xb532403c of size 2048 
created new node at 0xb532204c whose previous is 0xb532203c and size is 16 so prev+16 =0xb532204c 
removing node 0xb532203c of size 1024 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 512 
created new node at 0xb532c04c whose previous is 0xb532c03c and size is 16 so prev+16 =0xb532c04c 
RETURN ADDRESS 0xb532c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327000
removing node 0xb532c03c of size 256 


 REQUEST NUMBER 463 TO ALLOCATE BLOCK OF SIZE 30
Adjusted size to: 32
removing node 0xb532c03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb532c04c whose previous is 0xb532c03c and size is 16 so prev+16 =0xb532c04c 
removing node 0xb532c03c of size 128 
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 64 
created new node at 0xb533004c whose previous is 0xb533003c and size is 16 so prev+16 =0xb533004c 
RETURN ADDRESS 0xb533003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327100
removing node 0xb533003c of size 32 


 REQUEST NUMBER 464 TO ALLOCATE BLOCK OF SIZE 596
Adjusted size to: 1024
RETURN ADDRESS 0xb532203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327400
removing node 0xb532203c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 465 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb533003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327120
removing node 0xb533003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 466 TO ALLOCATE BLOCK OF SIZE 108
Adjusted size to: 128
RETURN ADDRESS 0xb532c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327180
removing node 0xb532c03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 467 TO ALLOCATE BLOCK OF SIZE 283
Adjusted size to: 512
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327200
removing node 0xb529003c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 468 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb532e03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327140
removing node 0xb532e03c of size 32 


 REQUEST NUMBER 469 TO ALLOCATE BLOCK OF SIZE 69
Adjusted size to: 128
removing node 0xb532403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
removing node 0xb532403c of size 1024 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 512 
created new node at 0xb532c04c whose previous is 0xb532c03c and size is 16 so prev+16 =0xb532c04c 
removing node 0xb532c03c of size 256 
created new node at 0xb533004c whose previous is 0xb533003c and size is 16 so prev+16 =0xb533004c 
RETURN ADDRESS 0xb533003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327800
removing node 0xb533003c of size 128 


 REQUEST NUMBER 470 TO ALLOCATE BLOCK OF SIZE 5575
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9963ca8 and page at 0xb5322000 
adding page node for the page located at 0xb5322000 and pagePtr 0x9963ca8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 84 
stepping through nodes 
 we have 83 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ce54 and the new one at 0xb527ce80 
New page node points to data page 0xb5322000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 85 
RETURN ADDRESS IS 0xb5322000 


 REQUEST NUMBER 471 TO ALLOCATE BLOCK OF SIZE 146
Adjusted size to: 256
RETURN ADDRESS 0xb532c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327900
removing node 0xb532c03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 472 TO ALLOCATE BLOCK OF SIZE 2114
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb532c000 and pagePtr 0x9959de8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 85 
stepping through nodes 
 we have 84 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ce80 and the new one at 0xb527ceac 
New page node points to data page 0xb532c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 86 
created new node at 0xb533204c whose previous is 0xb533203c and size is 16 so prev+16 =0xb533204c 
RETURN ADDRESS IS ----------------------->>>>>0xb533203c-> 0xb532c000
removing node 0xb533203c of size 4096 


 REQUEST NUMBER 473 TO ALLOCATE BLOCK OF SIZE 77
Adjusted size to: 128
RETURN ADDRESS 0xb533003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327880
removing node 0xb533003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 474 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327160
removing node 0xb532e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 475 TO ALLOCATE BLOCK OF SIZE 48
Adjusted size to: 64
removing node 0xb529003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 256 
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 128 
created new node at 0xb533004c whose previous is 0xb533003c and size is 16 so prev+16 =0xb533004c 
RETURN ADDRESS 0xb533003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327a00
removing node 0xb533003c of size 64 


 REQUEST NUMBER 476 TO ALLOCATE BLOCK OF SIZE 224
Adjusted size to: 256
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327b00
removing node 0xb529003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 477 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
removing node 0xb533003c of size 64 
*** freeing page for lists of size 1
created new node at 0xb533004c whose previous is 0xb533003c and size is 16 so prev+16 =0xb533004c 
RETURN ADDRESS 0xb533003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327a40
removing node 0xb533003c of size 32 


 REQUEST NUMBER 478 TO ALLOCATE BLOCK OF SIZE 2560
Adjusted size to: 4096
RETURN ADDRESS 0xb533203c
RETURN ADDRESS IS ----------------------->>>>> 0xb532d000
removing node 0xb533203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 479 TO ALLOCATE BLOCK OF SIZE 1228
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5332000 and pagePtr 0x9965320 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 86 
stepping through nodes 
 we have 85 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ceac and the new one at 0xb527ced8 
New page node points to data page 0xb5332000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 87 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 4096 
created new node at 0xb533404c whose previous is 0xb533403c and size is 16 so prev+16 =0xb533404c 
RETURN ADDRESS IS ----------------------->>>>>0xb533403c-> 0xb5332000
removing node 0xb533403c of size 2048 


 REQUEST NUMBER 480 TO ALLOCATE BLOCK OF SIZE 114
Adjusted size to: 128
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327a80
removing node 0xb532e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 481 TO ALLOCATE BLOCK OF SIZE 2140
Adjusted size to: 4096
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5333000
removing node 0xb529003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 482 TO ALLOCATE BLOCK OF SIZE 632
Adjusted size to: 1024
RETURN ADDRESS 0xb532403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327c00
removing node 0xb532403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 483 TO ALLOCATE BLOCK OF SIZE 1980
Adjusted size to: 2048
RETURN ADDRESS 0xb533403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5332800
removing node 0xb533403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 484 TO ALLOCATE BLOCK OF SIZE 49
Adjusted size to: 64
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5334000 and pagePtr 0x9965bd0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 87 
stepping through nodes 
 we have 86 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527ced8 and the new one at 0xb527cf04 
New page node points to data page 0xb5334000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 88 
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
removing node 0xb532403c of size 4096 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 2048 
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 1024 
created new node at 0xb533604c whose previous is 0xb533603c and size is 16 so prev+16 =0xb533604c 
removing node 0xb533603c of size 512 
created new node at 0xb533804c whose previous is 0xb533803c and size is 16 so prev+16 =0xb533804c 
removing node 0xb533803c of size 256 
created new node at 0xb533a04c whose previous is 0xb533a03c and size is 16 so prev+16 =0xb533a04c 
removing node 0xb533a03c of size 128 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb533c03c-> 0xb5334000
removing node 0xb533c03c of size 64 


 REQUEST NUMBER 485 TO ALLOCATE BLOCK OF SIZE 72
Adjusted size to: 128
RETURN ADDRESS 0xb533a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5334080
removing node 0xb533a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 486 TO ALLOCATE BLOCK OF SIZE 7381
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9967f30 and page at 0xb533a000 
adding page node for the page located at 0xb533a000 and pagePtr 0x9967f30 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 88 
stepping through nodes 
 we have 87 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cf04 and the new one at 0xb527cf30 
New page node points to data page 0xb533a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 89 
RETURN ADDRESS IS 0xb533a000 


 REQUEST NUMBER 487 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5334040
removing node 0xb533c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 488 TO ALLOCATE BLOCK OF SIZE 31
Adjusted size to: 32
RETURN ADDRESS 0xb533003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327a60
removing node 0xb533003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 489 TO ALLOCATE BLOCK OF SIZE 282
Adjusted size to: 512
RETURN ADDRESS 0xb533603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5334200
removing node 0xb533603c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 490 TO ALLOCATE BLOCK OF SIZE 183
Adjusted size to: 256
RETURN ADDRESS 0xb533803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5334100
removing node 0xb533803c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 491 TO ALLOCATE BLOCK OF SIZE 1517
Adjusted size to: 2048
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5334800
removing node 0xb529003c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 492 TO ALLOCATE BLOCK OF SIZE 588
Adjusted size to: 1024
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5334400
removing node 0xb532e03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 493 TO ALLOCATE BLOCK OF SIZE 1143
Adjusted size to: 2048
removing node 0xb532403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb532404c whose previous is 0xb532403c and size is 16 so prev+16 =0xb532404c 
RETURN ADDRESS 0xb532403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5335000
removing node 0xb532403c of size 2048 


 REQUEST NUMBER 494 TO ALLOCATE BLOCK OF SIZE 1083
Adjusted size to: 2048
RETURN ADDRESS 0xb532403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5335800
removing node 0xb532403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 495 TO ALLOCATE BLOCK OF SIZE 488
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5324000 and pagePtr 0x9966718 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 89 
stepping through nodes 
 we have 88 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cf30 and the new one at 0xb527cf5c 
New page node points to data page 0xb5324000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 90 
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 4096 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 2048 
created new node at 0xb533804c whose previous is 0xb533803c and size is 16 so prev+16 =0xb533804c 
removing node 0xb533803c of size 1024 
created new node at 0xb533604c whose previous is 0xb533603c and size is 16 so prev+16 =0xb533604c 
RETURN ADDRESS IS ----------------------->>>>>0xb533603c-> 0xb5324000
removing node 0xb533603c of size 512 


 REQUEST NUMBER 496 TO ALLOCATE BLOCK OF SIZE 255
Adjusted size to: 256
removing node 0xb533603c of size 512 
*** freeing page for lists of size 4
created new node at 0xb533604c whose previous is 0xb533603c and size is 16 so prev+16 =0xb533604c 
RETURN ADDRESS 0xb533603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5324200
removing node 0xb533603c of size 256 


 REQUEST NUMBER 497 TO ALLOCATE BLOCK OF SIZE 1643
Adjusted size to: 2048
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5324800
removing node 0xb529003c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 498 TO ALLOCATE BLOCK OF SIZE 1085
Adjusted size to: 2048
removing node 0xb532e03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5325000
removing node 0xb532e03c of size 2048 


 REQUEST NUMBER 499 TO ALLOCATE BLOCK OF SIZE 1013
Adjusted size to: 1024
RETURN ADDRESS 0xb533803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5324400
removing node 0xb533803c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 500 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
removing node 0xb533603c of size 256 
*** freeing page for lists of size 3
created new node at 0xb533604c whose previous is 0xb533603c and size is 16 so prev+16 =0xb533604c 
removing node 0xb533603c of size 128 
created new node at 0xb533804c whose previous is 0xb533803c and size is 16 so prev+16 =0xb533804c 
removing node 0xb533803c of size 64 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5324300
removing node 0xb529003c of size 32 


 REQUEST NUMBER 501 TO ALLOCATE BLOCK OF SIZE 2610
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5330000 and pagePtr 0x9941398 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 90 
stepping through nodes 
 we have 89 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cf5c and the new one at 0xb527cf88 
New page node points to data page 0xb5330000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 91 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb533c03c-> 0xb5330000
removing node 0xb533c03c of size 4096 


 REQUEST NUMBER 502 TO ALLOCATE BLOCK OF SIZE 930
Adjusted size to: 1024
removing node 0xb532e03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5325800
removing node 0xb532e03c of size 1024 


 REQUEST NUMBER 503 TO ALLOCATE BLOCK OF SIZE 5622
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996cf98 and page at 0xb533e000 
adding page node for the page located at 0xb533e000 and pagePtr 0x996cf98 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 91 
stepping through nodes 
 we have 90 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cf88 and the new one at 0xb527cfb4 
New page node points to data page 0xb533e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 92 
RETURN ADDRESS IS 0xb533e000 


 REQUEST NUMBER 504 TO ALLOCATE BLOCK OF SIZE 5391
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996e5a8 and page at 0xb5340000 
adding page node for the page located at 0xb5340000 and pagePtr 0x996e5a8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 92 
stepping through nodes 
 we have 91 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cfb4 and the new one at 0xb527cfe0 
New page node points to data page 0xb5340000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 93 
RETURN ADDRESS IS 0xb5340000 


 REQUEST NUMBER 505 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5324320
removing node 0xb529003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 506 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
removing node 0xb533803c of size 64 
*** freeing page for lists of size 1
created new node at 0xb533804c whose previous is 0xb533803c and size is 16 so prev+16 =0xb533804c 
RETURN ADDRESS 0xb533803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5324340
removing node 0xb533803c of size 32 


 REQUEST NUMBER 507 TO ALLOCATE BLOCK OF SIZE 778
Adjusted size to: 1024
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5325c00
removing node 0xb532e03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 508 TO ALLOCATE BLOCK OF SIZE 196
Adjusted size to: 256
removing node 0xb533c03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 2048 
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 1024 
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 512 
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331000
removing node 0xb534203c of size 256 


 REQUEST NUMBER 509 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
RETURN ADDRESS 0xb533803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5324360
removing node 0xb533803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 510 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
removing node 0xb533603c of size 128 
*** freeing page for lists of size 2
created new node at 0xb533604c whose previous is 0xb533603c and size is 16 so prev+16 =0xb533604c 
removing node 0xb533603c of size 64 
created new node at 0xb533804c whose previous is 0xb533803c and size is 16 so prev+16 =0xb533804c 
RETURN ADDRESS 0xb533803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5324380
removing node 0xb533803c of size 32 


 REQUEST NUMBER 511 TO ALLOCATE BLOCK OF SIZE 146
Adjusted size to: 256
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331100
removing node 0xb534203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 512 TO ALLOCATE BLOCK OF SIZE 25
Adjusted size to: 32
RETURN ADDRESS 0xb533803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53243a0
removing node 0xb533803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 513 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
removing node 0xb533603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb533604c whose previous is 0xb533603c and size is 16 so prev+16 =0xb533604c 
RETURN ADDRESS 0xb533603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53243c0
removing node 0xb533603c of size 32 


 REQUEST NUMBER 514 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
RETURN ADDRESS 0xb533603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53243e0
removing node 0xb533603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 515 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb529003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
removing node 0xb529003c of size 256 
created new node at 0xb533604c whose previous is 0xb533603c and size is 16 so prev+16 =0xb533604c 
removing node 0xb533603c of size 128 
created new node at 0xb533804c whose previous is 0xb533803c and size is 16 so prev+16 =0xb533804c 
removing node 0xb533803c of size 64 
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331200
removing node 0xb534203c of size 32 


 REQUEST NUMBER 516 TO ALLOCATE BLOCK OF SIZE 452
Adjusted size to: 512
removing node 0xb532e03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331400
removing node 0xb532e03c of size 512 


 REQUEST NUMBER 517 TO ALLOCATE BLOCK OF SIZE 275
Adjusted size to: 512
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331600
removing node 0xb532e03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 518 TO ALLOCATE BLOCK OF SIZE 50
Adjusted size to: 64
RETURN ADDRESS 0xb533803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331240
removing node 0xb533803c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 519 TO ALLOCATE BLOCK OF SIZE 5754
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9967f20 and page at 0xb5338000 
adding page node for the page located at 0xb5338000 and pagePtr 0x9967f20 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 93 
stepping through nodes 
 we have 92 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527cfe0 and the new one at 0xb527d00c 
New page node points to data page 0xb5338000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 94 
RETURN ADDRESS IS 0xb5338000 


 REQUEST NUMBER 520 TO ALLOCATE BLOCK OF SIZE 186
Adjusted size to: 256
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331300
removing node 0xb529003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 521 TO ALLOCATE BLOCK OF SIZE 25
Adjusted size to: 32
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331220
removing node 0xb534203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 522 TO ALLOCATE BLOCK OF SIZE 337
Adjusted size to: 512
removing node 0xb533c03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 1024 
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331800
removing node 0xb534203c of size 512 


 REQUEST NUMBER 523 TO FREE BLOCK 0xb52c8340  OF SIZE 36
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52c8340 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5290000 -- 0xb5292000| 

 COUNT: 1  - ends at 0xb529003c 
	 2 -> 0xb5336000 -- 0xb5338000| 

 COUNT: 1  - ends at 0xb533603c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5342000 -- 0xb5344000| 

 COUNT: 1  - ends at 0xb534203c 
	 5 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 1  - ends at 0xb533c03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 524 TO ALLOCATE BLOCK OF SIZE 198
Adjusted size to: 256
removing node 0xb534203c of size 512 
*** freeing page for lists of size 4
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331a00
removing node 0xb534203c of size 256 


 REQUEST NUMBER 525 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb529003c of size 64 
*** freeing page for lists of size 1
created new node at 0xb529004c whose previous is 0xb529003c and size is 16 so prev+16 =0xb529004c 
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8340
removing node 0xb529003c of size 32 


 REQUEST NUMBER 526 TO ALLOCATE BLOCK OF SIZE 123
Adjusted size to: 128
RETURN ADDRESS 0xb533603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331280
removing node 0xb533603c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 527 TO ALLOCATE BLOCK OF SIZE 1842
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5336000 and pagePtr 0x9967f10 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 94 
stepping through nodes 
 we have 93 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d00c and the new one at 0xb527d038 
New page node points to data page 0xb5336000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 95 
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 4096 
created new node at 0xb534404c whose previous is 0xb534403c and size is 16 so prev+16 =0xb534404c 
RETURN ADDRESS IS ----------------------->>>>>0xb534403c-> 0xb5336000
removing node 0xb534403c of size 2048 


 REQUEST NUMBER 528 TO ALLOCATE BLOCK OF SIZE 95
Adjusted size to: 128
removing node 0xb534203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331b00
removing node 0xb534203c of size 128 


 REQUEST NUMBER 529 TO ALLOCATE BLOCK OF SIZE 278
Adjusted size to: 512
removing node 0xb533c03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331c00
removing node 0xb533c03c of size 512 


 REQUEST NUMBER 530 TO ALLOCATE BLOCK OF SIZE 409
Adjusted size to: 512
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331e00
removing node 0xb533c03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 531 TO ALLOCATE BLOCK OF SIZE 63
Adjusted size to: 64
removing node 0xb534203c of size 128 
*** freeing page for lists of size 2
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331b80
removing node 0xb534203c of size 64 


 REQUEST NUMBER 532 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb529003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c8360
removing node 0xb529003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 533 TO ALLOCATE BLOCK OF SIZE 5858
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996fe08 and page at 0xb5290000 
adding page node for the page located at 0xb5290000 and pagePtr 0x996fe08 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 95 
stepping through nodes 
 we have 94 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d038 and the new one at 0xb527d064 
New page node points to data page 0xb5290000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 96 
RETURN ADDRESS IS 0xb5290000 


 REQUEST NUMBER 534 TO ALLOCATE BLOCK OF SIZE 43
Adjusted size to: 64
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331bc0
removing node 0xb534203c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 535 TO ALLOCATE BLOCK OF SIZE 35
Adjusted size to: 64
removing node 0xb534403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb534404c whose previous is 0xb534403c and size is 16 so prev+16 =0xb534404c 
removing node 0xb534403c of size 1024 
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
removing node 0xb534203c of size 512 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 256 
created new node at 0xb534604c whose previous is 0xb534603c and size is 16 so prev+16 =0xb534604c 
removing node 0xb534603c of size 128 
created new node at 0xb534804c whose previous is 0xb534803c and size is 16 so prev+16 =0xb534804c 
RETURN ADDRESS 0xb534803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336800
removing node 0xb534803c of size 64 


 REQUEST NUMBER 536 TO ALLOCATE BLOCK OF SIZE 143
Adjusted size to: 256
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336900
removing node 0xb533c03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 537 TO ALLOCATE BLOCK OF SIZE 530
Adjusted size to: 1024
RETURN ADDRESS 0xb534403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336c00
removing node 0xb534403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 538 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
removing node 0xb534803c of size 64 
*** freeing page for lists of size 1
created new node at 0xb534804c whose previous is 0xb534803c and size is 16 so prev+16 =0xb534804c 
RETURN ADDRESS 0xb534803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336840
removing node 0xb534803c of size 32 


 REQUEST NUMBER 539 TO ALLOCATE BLOCK OF SIZE 245
Adjusted size to: 256
removing node 0xb534203c of size 512 
*** freeing page for lists of size 4
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336a00
removing node 0xb534203c of size 256 


 REQUEST NUMBER 540 TO ALLOCATE BLOCK OF SIZE 4186
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9971d58 and page at 0xb5344000 
adding page node for the page located at 0xb5344000 and pagePtr 0x9971d58 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 96 
stepping through nodes 
 we have 95 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d064 and the new one at 0xb527d090 
New page node points to data page 0xb5344000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 97 
RETURN ADDRESS IS 0xb5344000 


 REQUEST NUMBER 541 TO ALLOCATE BLOCK OF SIZE 515
Adjusted size to: 1024
removing node 0xb532e03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 2048 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337000
removing node 0xb533c03c of size 1024 


 REQUEST NUMBER 542 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb534803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336860
removing node 0xb534803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 543 TO ALLOCATE BLOCK OF SIZE 37
Adjusted size to: 64
removing node 0xb534603c of size 128 
*** freeing page for lists of size 2
created new node at 0xb534604c whose previous is 0xb534603c and size is 16 so prev+16 =0xb534604c 
RETURN ADDRESS 0xb534603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336880
removing node 0xb534603c of size 64 


 REQUEST NUMBER 544 TO ALLOCATE BLOCK OF SIZE 4803
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9973f28 and page at 0xb5348000 
adding page node for the page located at 0xb5348000 and pagePtr 0x9973f28 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 97 
stepping through nodes 
 we have 96 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d090 and the new one at 0xb527d0bc 
New page node points to data page 0xb5348000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 98 
RETURN ADDRESS IS 0xb5348000 


 REQUEST NUMBER 545 TO ALLOCATE BLOCK OF SIZE 58
Adjusted size to: 64
RETURN ADDRESS 0xb534603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53368c0
removing node 0xb534603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 546 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
removing node 0xb534203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
removing node 0xb534203c of size 128 
created new node at 0xb534604c whose previous is 0xb534603c and size is 16 so prev+16 =0xb534604c 
removing node 0xb534603c of size 64 
created new node at 0xb534a04c whose previous is 0xb534a03c and size is 16 so prev+16 =0xb534a04c 
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336b00
removing node 0xb534a03c of size 32 


 REQUEST NUMBER 547 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336b20
removing node 0xb534a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 548 TO ALLOCATE BLOCK OF SIZE 603
Adjusted size to: 1024
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337400
removing node 0xb533c03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 549 TO ALLOCATE BLOCK OF SIZE 113
Adjusted size to: 128
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336b80
removing node 0xb534203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 550 TO ALLOCATE BLOCK OF SIZE 46
Adjusted size to: 64
RETURN ADDRESS 0xb534603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5336b40
removing node 0xb534603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 551 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
removing node 0xb532e03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 1024 
created new node at 0xb534604c whose previous is 0xb534603c and size is 16 so prev+16 =0xb534604c 
removing node 0xb534603c of size 512 
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
removing node 0xb534203c of size 256 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 128 
created new node at 0xb534a04c whose previous is 0xb534a03c and size is 16 so prev+16 =0xb534a04c 
removing node 0xb534a03c of size 64 
created new node at 0xb534c04c whose previous is 0xb534c03c and size is 16 so prev+16 =0xb534c04c 
RETURN ADDRESS 0xb534c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337800
removing node 0xb534c03c of size 32 


 REQUEST NUMBER 552 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb534c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337820
removing node 0xb534c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 553 TO ALLOCATE BLOCK OF SIZE 1864
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb534c000 and pagePtr 0x9976c50 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 98 
stepping through nodes 
 we have 97 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d0bc and the new one at 0xb527d0e8 
New page node points to data page 0xb534c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 99 
created new node at 0xb534e04c whose previous is 0xb534e03c and size is 16 so prev+16 =0xb534e04c 
removing node 0xb534e03c of size 4096 
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
RETURN ADDRESS IS ----------------------->>>>>0xb535003c-> 0xb534c000
removing node 0xb535003c of size 2048 


 REQUEST NUMBER 554 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
removing node 0xb534a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb534a04c whose previous is 0xb534a03c and size is 16 so prev+16 =0xb534a04c 
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337840
removing node 0xb534a03c of size 32 


 REQUEST NUMBER 555 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337860
removing node 0xb534a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 556 TO ALLOCATE BLOCK OF SIZE 332
Adjusted size to: 512
RETURN ADDRESS 0xb534603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337a00
removing node 0xb534603c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 557 TO ALLOCATE BLOCK OF SIZE 51
Adjusted size to: 64
removing node 0xb533c03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337880
removing node 0xb533c03c of size 64 


 REQUEST NUMBER 558 TO ALLOCATE BLOCK OF SIZE 6938
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996c1a8 and page at 0xb5346000 
adding page node for the page located at 0xb5346000 and pagePtr 0x996c1a8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 99 
stepping through nodes 
 we have 98 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d0e8 and the new one at 0xb527d114 
New page node points to data page 0xb5346000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 100 
RETURN ADDRESS IS 0xb5346000 


 REQUEST NUMBER 559 TO ALLOCATE BLOCK OF SIZE 45
Adjusted size to: 64
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53378c0
removing node 0xb533c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 560 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
removing node 0xb534203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
removing node 0xb534203c of size 128 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 64 
created new node at 0xb534a04c whose previous is 0xb534a03c and size is 16 so prev+16 =0xb534a04c 
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337900
removing node 0xb534a03c of size 32 


 REQUEST NUMBER 561 TO ALLOCATE BLOCK OF SIZE 123
Adjusted size to: 128
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337980
removing node 0xb534203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 562 TO FREE BLOCK 0xb529b000  OF SIZE 1043
coalescing blocks if possible
trying to coalesce a block at ptr 0xb529b000 and of size: 2048 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb534a000 -- 0xb534c000| 

 COUNT: 1  - ends at 0xb534a03c 
	 1 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 1  - ends at 0xb533c03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb532e000 -- 0xb5330000| 

 COUNT: 1  - ends at 0xb532e03c 
	 6 -> 0xb5350000 -- 0xb5352000| 

 COUNT: 2  - ends at 0xb535004c 
	 7 -> 0xb534e000 -- 0xb5350000| 

 COUNT: 1  - ends at 0xb534e03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 563 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337920
removing node 0xb534a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 564 TO ALLOCATE BLOCK OF SIZE 526
Adjusted size to: 1024
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337c00
removing node 0xb532e03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 565 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337940
removing node 0xb533c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 566 TO ALLOCATE BLOCK OF SIZE 921
Adjusted size to: 1024
removing node 0xb535003c of size 2048 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534c800
removing node 0xb533c03c of size 1024 


 REQUEST NUMBER 567 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
removing node 0xb533c03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 512 
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 256 
created new node at 0xb534a04c whose previous is 0xb534a03c and size is 16 so prev+16 =0xb534a04c 
removing node 0xb534a03c of size 128 
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cc00
removing node 0xb534203c of size 64 


 REQUEST NUMBER 568 TO FREE BLOCK 0xb52f1000  OF SIZE 1859
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52f1000 and of size: 2048 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5342000 -- 0xb5344000| 

 COUNT: 1  - ends at 0xb534203c 
	 2 -> 0xb534a000 -- 0xb534c000| 

 COUNT: 1  - ends at 0xb534a03c 
	 3 -> 0xb532e000 -- 0xb5330000| 

 COUNT: 1  - ends at 0xb532e03c 
	 4 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 1  - ends at 0xb533c03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb5350000 -- 0xb5352000| 

 COUNT: 2  - ends at 0xb535004c 
	 7 -> 0xb534e000 -- 0xb5350000| 

 COUNT: 1  - ends at 0xb534e03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 569 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
removing node 0xb534203c of size 64 
*** freeing page for lists of size 1
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cc40
removing node 0xb534203c of size 32 


 REQUEST NUMBER 570 TO ALLOCATE BLOCK OF SIZE 1192
Adjusted size to: 2048
RETURN ADDRESS 0xb535003c
RETURN ADDRESS IS ----------------------->>>>> 0xb529b000
removing node 0xb535003c of size 2048 


 REQUEST NUMBER 571 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cc60
removing node 0xb534203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 572 TO ALLOCATE BLOCK OF SIZE 275
Adjusted size to: 512
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534ce00
removing node 0xb533c03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 573 TO ALLOCATE BLOCK OF SIZE 318
Adjusted size to: 512
removing node 0xb535003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
removing node 0xb535003c of size 1024 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1000
removing node 0xb533c03c of size 512 


 REQUEST NUMBER 574 TO FREE BLOCK 0xb52aa000  OF SIZE 4888
removing pageNode to page with ptr 0x990da10 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
out of loop 
IN LOOPP 0xb527c538 -> 0xb527c564 (next) 
IN LOOPP 0xb527c564 -> 0xb527c590 (next) 
IN LOOPP 0xb527c590 -> 0xb527c5bc (next) 
IN LOOPP 0xb527c5bc -> 0xb527c5e8 (next) 
IN LOOPP 0xb527c5e8 -> 0xb527c614 (next) 
IN LOOPP 0xb527c614 -> 0xb527c640 (next) 
IN LOOPP 0xb527c640 -> 0xb527c66c (next) 
IN LOOPP 0xb527c66c -> 0xb527c698 (next) 
IN LOOPP 0xb527c698 -> 0xb527c6c4 (next) 
IN LOOPP 0xb527c6c4 -> 0xb527c6f0 (next) 
IN LOOPP 0xb527c6f0 -> 0xb527c71c (next) 
IN LOOPP 0xb527c71c -> 0xb527c748 (next) 
IN LOOPP 0xb527c748 -> 0xb527c774 (next) 
IN LOOPP 0xb527c774 -> 0xb527c7a0 (next) 
IN LOOPP 0xb527c7a0 -> 0xb527c7cc (next) 
IN LOOPP 0xb527c7cc -> 0xb527c7f8 (next) 
IN LOOPP 0xb527c7f8 -> 0xb527c824 (next) 
IN LOOPP 0xb527c824 -> 0xb527c850 (next) 
IN LOOPP 0xb527c850 -> 0xb527c87c (next) 
IN LOOPP 0xb527c87c -> 0xb527c8a8 (next) 
IN LOOPP 0xb527c8a8 -> 0xb527c8d4 (next) 
IN LOOPP 0xb527c8d4 -> 0xb527c900 (next) 
IN LOOPP 0xb527c900 -> 0xb527c92c (next) 
IN LOOPP 0xb527c92c -> 0xb527c958 (next) 
IN LOOPP 0xb527c958 -> 0xb527c984 (next) 
IN LOOPP 0xb527c984 -> 0xb527c9b0 (next) 
IN LOOPP 0xb527c9b0 -> 0xb527c9dc (next) 
IN LOOPP 0xb527c9dc -> 0xb527ca08 (next) 
IN LOOPP 0xb527ca08 -> 0xb527ca34 (next) 
IN LOOPP 0xb527ca34 -> 0xb527ca60 (next) 
IN LOOPP 0xb527ca60 -> 0xb527ca8c (next) 
IN LOOPP 0xb527ca8c -> 0xb527cab8 (next) 
IN LOOPP 0xb527cab8 -> 0xb527cae4 (next) 
IN LOOPP 0xb527cae4 -> 0xb527cb10 (next) 
IN LOOPP 0xb527cb10 -> 0xb527cb3c (next) 
IN LOOPP 0xb527cb3c -> 0xb527cb68 (next) 
IN LOOPP 0xb527cb68 -> 0xb527cb94 (next) 
IN LOOPP 0xb527cb94 -> 0xb527cbc0 (next) 
IN LOOPP 0xb527cbc0 -> 0xb527cbec (next) 
IN LOOPP 0xb527cbec -> 0xb527cc18 (next) 
IN LOOPP 0xb527cc18 -> 0xb527cc44 (next) 
IN LOOPP 0xb527cc44 -> 0xb527cc70 (next) 
IN LOOPP 0xb527cc70 -> 0xb527cc9c (next) 
IN LOOPP 0xb527cc9c -> 0xb527ccc8 (next) 
IN LOOPP 0xb527ccc8 -> 0xb527ccf4 (next) 
IN LOOPP 0xb527ccf4 -> 0xb527cd20 (next) 
IN LOOPP 0xb527cd20 -> 0xb527cd4c (next) 
IN LOOPP 0xb527cd4c -> 0xb527cd78 (next) 
IN LOOPP 0xb527cd78 -> 0xb527cda4 (next) 
IN LOOPP 0xb527cda4 -> 0xb527cdd0 (next) 
IN LOOPP 0xb527cdd0 -> 0xb527cdfc (next) 
IN LOOPP 0xb527cdfc -> 0xb527ce28 (next) 
IN LOOPP 0xb527ce28 -> 0xb527ce54 (next) 
IN LOOPP 0xb527ce54 -> 0xb527ce80 (next) 
IN LOOPP 0xb527ce80 -> 0xb527ceac (next) 
IN LOOPP 0xb527ceac -> 0xb527ced8 (next) 
IN LOOPP 0xb527ced8 -> 0xb527cf04 (next) 
IN LOOPP 0xb527cf04 -> 0xb527cf30 (next) 
IN LOOPP 0xb527cf30 -> 0xb527cf5c (next) 
IN LOOPP 0xb527cf5c -> 0xb527cf88 (next) 
IN LOOPP 0xb527cf88 -> 0xb527cfb4 (next) 
IN LOOPP 0xb527cfb4 -> 0xb527cfe0 (next) 
IN LOOPP 0xb527cfe0 -> 0xb527d00c (next) 
IN LOOPP 0xb527d00c -> 0xb527d038 (next) 
IN LOOPP 0xb527d038 -> 0xb527d064 (next) 
IN LOOPP 0xb527d064 -> 0xb527d090 (next) 
IN LOOPP 0xb527d090 -> 0xb527d0bc (next) 
IN LOOPP 0xb527d0bc -> 0xb527d0e8 (next) 
IN LOOPP 0xb527d0e8 -> 0xb527d114 (next) 
IN LOOPP 0xb527d114 -> (nil) (next) 
Add 0xb527d0bc we set the next to null 
Prev: 0xb527d114, current: (nil) 
Page to decrease counter: 0xb527c000 from 100 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb534a000 -- 0xb534c000| 

 COUNT: 1  - ends at 0xb534a03c 
	 3 -> 0xb532e000 -- 0xb5330000| 

 COUNT: 1  - ends at 0xb532e03c 
	 4 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 1  - ends at 0xb533c03c 
	 5 -> 0xb5350000 -- 0xb5352000| 

 COUNT: 1  - ends at 0xb535003c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb534e000 -- 0xb5350000| 

 COUNT: 1  - ends at 0xb534e03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 575 TO ALLOCATE BLOCK OF SIZE 503
Adjusted size to: 512
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1200
removing node 0xb533c03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 576 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb534a03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb534a04c whose previous is 0xb534a03c and size is 16 so prev+16 =0xb534a04c 
removing node 0xb534a03c of size 64 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cc80
removing node 0xb533c03c of size 32 


 REQUEST NUMBER 577 TO ALLOCATE BLOCK OF SIZE 1361
Adjusted size to: 2048
removing node 0xb534e03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb534e04c whose previous is 0xb534e03c and size is 16 so prev+16 =0xb534e04c 
RETURN ADDRESS 0xb534e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534d000
removing node 0xb534e03c of size 2048 


 REQUEST NUMBER 578 TO ALLOCATE BLOCK OF SIZE 2765
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52aa000 and pagePtr 0x9907e60 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 99 
stepping through nodes 
 we have 97 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d0bc and the new one at 0xb527d0e8 
New page node points to data page 0xb52aa000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 100 
created new node at 0xb534204c whose previous is 0xb534203c and size is 16 so prev+16 =0xb534204c 
RETURN ADDRESS IS ----------------------->>>>>0xb534203c-> 0xb52aa000
removing node 0xb534203c of size 4096 


 REQUEST NUMBER 579 TO FREE BLOCK 0xb52bb480  OF SIZE 9
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52bb480 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 2  - ends at 0xb533c04c 
	 1 -> 0xb534a000 -- 0xb534c000| 

 COUNT: 1  - ends at 0xb534a03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb532e000 -- 0xb5330000| 

 COUNT: 1  - ends at 0xb532e03c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5350000 -- 0xb5352000| 

 COUNT: 1  - ends at 0xb535003c 
	 6 -> 0xb534e000 -- 0xb5350000| 

 COUNT: 1  - ends at 0xb534e03c 
	 7 -> 0xb5342000 -- 0xb5344000| 

 COUNT: 1  - ends at 0xb534203c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 580 TO FREE BLOCK 0xb5310b80  OF SIZE 116
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5310b80 and of size: 128 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 2  - ends at 0xb533c04c 
	 1 -> 0xb534a000 -- 0xb534c000| 

 COUNT: 1  - ends at 0xb534a03c 
	 2 -> 0xb5352000 -- 0xb5354000| 

 COUNT: 1  - ends at 0xb535203c 
	 3 -> 0xb532e000 -- 0xb5330000| 

 COUNT: 1  - ends at 0xb532e03c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5350000 -- 0xb5352000| 

 COUNT: 1  - ends at 0xb535003c 
	 6 -> 0xb534e000 -- 0xb5350000| 

 COUNT: 1  - ends at 0xb534e03c 
	 7 -> 0xb5342000 -- 0xb5344000| 

 COUNT: 1  - ends at 0xb534203c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 581 TO ALLOCATE BLOCK OF SIZE 3775
Adjusted size to: 4096
RETURN ADDRESS 0xb534203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ab000
removing node 0xb534203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 582 TO FREE BLOCK 0xb5295800  OF SIZE 1439
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5295800 and of size: 2048 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb534e04c whose previous is 0xb534e03c and size is 16 so prev+16 =0xb534e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 2  - ends at 0xb533c04c 
	 1 -> 0xb534a000 -- 0xb534c000| 

 COUNT: 1  - ends at 0xb534a03c 
	 2 -> 0xb5352000 -- 0xb5354000| 

 COUNT: 1  - ends at 0xb535203c 
	 3 -> 0xb532e000 -- 0xb5330000| 

 COUNT: 1  - ends at 0xb532e03c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5350000 -- 0xb5352000| 

 COUNT: 1  - ends at 0xb535003c 
	 6 -> 0xb534e000 -- 0xb5350000| 

 COUNT: 2  - ends at 0xb534e04c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 583 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cca0
removing node 0xb533c03c of size 32 


 REQUEST NUMBER 584 TO ALLOCATE BLOCK OF SIZE 1764
Adjusted size to: 2048
RETURN ADDRESS 0xb534e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534d800
removing node 0xb534e03c of size 2048 


 REQUEST NUMBER 585 TO ALLOCATE BLOCK OF SIZE 2063
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5342000 and pagePtr 0x9908008 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 100 
stepping through nodes 
 we have 98 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d0e8 and the new one at 0xb527d114 
New page node points to data page 0xb5342000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 101 
created new node at 0xb535404c whose previous is 0xb535403c and size is 16 so prev+16 =0xb535404c 
RETURN ADDRESS IS ----------------------->>>>>0xb535403c-> 0xb5342000
removing node 0xb535403c of size 4096 


 REQUEST NUMBER 586 TO ALLOCATE BLOCK OF SIZE 47
Adjusted size to: 64
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534ccc0
removing node 0xb534a03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 587 TO ALLOCATE BLOCK OF SIZE 30
Adjusted size to: 32
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bb480
removing node 0xb533c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 588 TO ALLOCATE BLOCK OF SIZE 120
Adjusted size to: 128
RETURN ADDRESS 0xb535203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310b80
removing node 0xb535203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 589 TO ALLOCATE BLOCK OF SIZE 4976
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9912c08 and page at 0xb5352000 
adding page node for the page located at 0xb5352000 and pagePtr 0x9912c08 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 101 
stepping through nodes 
 we have 99 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d114 and the new one at 0xb527d140 
New page node points to data page 0xb5352000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 102 
RETURN ADDRESS IS 0xb5352000 


 REQUEST NUMBER 590 TO ALLOCATE BLOCK OF SIZE 32
Adjusted size to: 32
removing node 0xb532e03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 128 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 64 
created new node at 0xb534a04c whose previous is 0xb534a03c and size is 16 so prev+16 =0xb534a04c 
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cd00
removing node 0xb534a03c of size 32 


 REQUEST NUMBER 591 TO ALLOCATE BLOCK OF SIZE 81
Adjusted size to: 128
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cd80
removing node 0xb532e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 592 TO FREE BLOCK 0xb5316000  OF SIZE 1085
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5316000 and of size: 2048 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb534e04c whose previous is 0xb534e03c and size is 16 so prev+16 =0xb534e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb534a000 -- 0xb534c000| 

 COUNT: 1  - ends at 0xb534a03c 
	 1 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 1  - ends at 0xb533c03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5350000 -- 0xb5352000| 

 COUNT: 1  - ends at 0xb535003c 
	 6 -> 0xb534e000 -- 0xb5350000| 

 COUNT: 2  - ends at 0xb534e04c 
	 7 -> 0xb5354000 -- 0xb5356000| 

 COUNT: 1  - ends at 0xb535403c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 593 TO ALLOCATE BLOCK OF SIZE 67
Adjusted size to: 128
removing node 0xb535003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
removing node 0xb535003c of size 512 
created new node at 0xb532e04c whose previous is 0xb532e03c and size is 16 so prev+16 =0xb532e04c 
removing node 0xb532e03c of size 256 
created new node at 0xb535604c whose previous is 0xb535603c and size is 16 so prev+16 =0xb535604c 
RETURN ADDRESS 0xb535603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1400
removing node 0xb535603c of size 128 


 REQUEST NUMBER 594 TO ALLOCATE BLOCK OF SIZE 1689
Adjusted size to: 2048
RETURN ADDRESS 0xb534e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5295800
removing node 0xb534e03c of size 2048 


 REQUEST NUMBER 595 TO ALLOCATE BLOCK OF SIZE 74
Adjusted size to: 128
RETURN ADDRESS 0xb535603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1480
removing node 0xb535603c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 596 TO ALLOCATE BLOCK OF SIZE 5276
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996fe18 and page at 0xb5356000 
adding page node for the page located at 0xb5356000 and pagePtr 0x996fe18 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 102 
stepping through nodes 
 we have 100 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d140 and the new one at 0xb527d16c 
New page node points to data page 0xb5356000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 103 
RETURN ADDRESS IS 0xb5356000 


 REQUEST NUMBER 597 TO ALLOCATE BLOCK OF SIZE 1131
Adjusted size to: 2048
RETURN ADDRESS 0xb534e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5316000
removing node 0xb534e03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 598 TO ALLOCATE BLOCK OF SIZE 1832
Adjusted size to: 2048
removing node 0xb535403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb535404c whose previous is 0xb535403c and size is 16 so prev+16 =0xb535404c 
RETURN ADDRESS 0xb535403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343000
removing node 0xb535403c of size 2048 


 REQUEST NUMBER 599 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
RETURN ADDRESS 0xb534a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cd20
removing node 0xb534a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 600 TO ALLOCATE BLOCK OF SIZE 560
Adjusted size to: 1024
removing node 0xb535403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb535404c whose previous is 0xb535403c and size is 16 so prev+16 =0xb535404c 
RETURN ADDRESS 0xb535403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343800
removing node 0xb535403c of size 1024 


 REQUEST NUMBER 601 TO ALLOCATE BLOCK OF SIZE 3549
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb534a000 and pagePtr 0x9976c60 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 103 
stepping through nodes 
 we have 101 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d16c and the new one at 0xb527d198 
New page node points to data page 0xb534a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 104 
created new node at 0xb534e04c whose previous is 0xb534e03c and size is 16 so prev+16 =0xb534e04c 
RETURN ADDRESS IS ----------------------->>>>>0xb534e03c-> 0xb534a000
removing node 0xb534e03c of size 4096 


 REQUEST NUMBER 602 TO ALLOCATE BLOCK OF SIZE 142
Adjusted size to: 256
RETURN ADDRESS 0xb532e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1500
removing node 0xb532e03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 603 TO ALLOCATE BLOCK OF SIZE 1178
Adjusted size to: 2048
removing node 0xb534e03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb534e04c whose previous is 0xb534e03c and size is 16 so prev+16 =0xb534e04c 
RETURN ADDRESS 0xb534e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534b000
removing node 0xb534e03c of size 2048 


 REQUEST NUMBER 604 TO ALLOCATE BLOCK OF SIZE 174
Adjusted size to: 256
removing node 0xb535003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
RETURN ADDRESS 0xb535003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1600
removing node 0xb535003c of size 256 


 REQUEST NUMBER 605 TO ALLOCATE BLOCK OF SIZE 148
Adjusted size to: 256
RETURN ADDRESS 0xb535003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52f1700
removing node 0xb535003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 606 TO ALLOCATE BLOCK OF SIZE 1339
Adjusted size to: 2048
RETURN ADDRESS 0xb534e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534b800
removing node 0xb534e03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 607 TO ALLOCATE BLOCK OF SIZE 123
Adjusted size to: 128
removing node 0xb535403c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb535404c whose previous is 0xb535403c and size is 16 so prev+16 =0xb535404c 
removing node 0xb535403c of size 512 
created new node at 0xb534e04c whose previous is 0xb534e03c and size is 16 so prev+16 =0xb534e04c 
removing node 0xb534e03c of size 256 
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
RETURN ADDRESS 0xb535003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343c00
removing node 0xb535003c of size 128 


 REQUEST NUMBER 608 TO ALLOCATE BLOCK OF SIZE 5362
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9976c70 and page at 0xb532e000 
adding page node for the page located at 0xb532e000 and pagePtr 0x9976c70 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 104 
stepping through nodes 
 we have 102 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d198 and the new one at 0xb527d1c4 
New page node points to data page 0xb532e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 105 
RETURN ADDRESS IS 0xb532e000 


 REQUEST NUMBER 609 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534cd40
removing node 0xb533c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 610 TO ALLOCATE BLOCK OF SIZE 56
Adjusted size to: 64
removing node 0xb535003c of size 128 
*** freeing page for lists of size 2
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
RETURN ADDRESS 0xb535003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343c80
removing node 0xb535003c of size 64 


 REQUEST NUMBER 611 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
removing node 0xb535003c of size 64 
*** freeing page for lists of size 1
created new node at 0xb535004c whose previous is 0xb535003c and size is 16 so prev+16 =0xb535004c 
RETURN ADDRESS 0xb535003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343cc0
removing node 0xb535003c of size 32 


 REQUEST NUMBER 612 TO ALLOCATE BLOCK OF SIZE 118
Adjusted size to: 128
removing node 0xb534e03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb534e04c whose previous is 0xb534e03c and size is 16 so prev+16 =0xb534e04c 
RETURN ADDRESS 0xb534e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343d00
removing node 0xb534e03c of size 128 


 REQUEST NUMBER 613 TO ALLOCATE BLOCK OF SIZE 458
Adjusted size to: 512
RETURN ADDRESS 0xb535403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343e00
removing node 0xb535403c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 614 TO ALLOCATE BLOCK OF SIZE 78
Adjusted size to: 128
RETURN ADDRESS 0xb534e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343d80
removing node 0xb534e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 615 TO ALLOCATE BLOCK OF SIZE 878
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb534e000 and pagePtr 0x9965be0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 105 
stepping through nodes 
 we have 103 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d1c4 and the new one at 0xb527d1f0 
New page node points to data page 0xb534e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 106 
created new node at 0xb535404c whose previous is 0xb535403c and size is 16 so prev+16 =0xb535404c 
removing node 0xb535403c of size 4096 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 2048 
created new node at 0xb535804c whose previous is 0xb535803c and size is 16 so prev+16 =0xb535804c 
RETURN ADDRESS IS ----------------------->>>>>0xb535803c-> 0xb534e000
removing node 0xb535803c of size 1024 


 REQUEST NUMBER 616 TO ALLOCATE BLOCK OF SIZE 93
Adjusted size to: 128
removing node 0xb535803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb535804c whose previous is 0xb535803c and size is 16 so prev+16 =0xb535804c 
removing node 0xb535803c of size 512 
created new node at 0xb535a04c whose previous is 0xb535a03c and size is 16 so prev+16 =0xb535a04c 
removing node 0xb535a03c of size 256 
created new node at 0xb535c04c whose previous is 0xb535c03c and size is 16 so prev+16 =0xb535c04c 
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534e400
removing node 0xb535c03c of size 128 


 REQUEST NUMBER 617 TO ALLOCATE BLOCK OF SIZE 688
Adjusted size to: 1024
removing node 0xb533c03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534e800
removing node 0xb533c03c of size 1024 


 REQUEST NUMBER 618 TO ALLOCATE BLOCK OF SIZE 831
Adjusted size to: 1024
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534ec00
removing node 0xb533c03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 619 TO ALLOCATE BLOCK OF SIZE 363
Adjusted size to: 512
RETURN ADDRESS 0xb535803c
RETURN ADDRESS IS ----------------------->>>>> 0xb534e600
removing node 0xb535803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 620 TO ALLOCATE BLOCK OF SIZE 5949
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98fd500 and page at 0xb5358000 
adding page node for the page located at 0xb5358000 and pagePtr 0x98fd500 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 106 
stepping through nodes 
 we have 104 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d1f0 and the new one at 0xb527d21c 
New page node points to data page 0xb5358000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 107 
RETURN ADDRESS IS 0xb5358000 


 REQUEST NUMBER 621 TO ALLOCATE BLOCK OF SIZE 3916
Adjusted size to: 4096
RETURN ADDRESS 0xb535403c
RETURN ADDRESS IS ----------------------->>>>> 0xb534f000
removing node 0xb535403c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 622 TO ALLOCATE BLOCK OF SIZE 3780
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5354000 and pagePtr 0x9908018 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 107 
stepping through nodes 
 we have 105 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d21c and the new one at 0xb527d248 
New page node points to data page 0xb5354000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 108 
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb533c03c-> 0xb5354000
removing node 0xb533c03c of size 4096 


 REQUEST NUMBER 623 TO ALLOCATE BLOCK OF SIZE 182
Adjusted size to: 256
RETURN ADDRESS 0xb535a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534e500
removing node 0xb535a03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 624 TO ALLOCATE BLOCK OF SIZE 410
Adjusted size to: 512
removing node 0xb533c03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb533c04c whose previous is 0xb533c03c and size is 16 so prev+16 =0xb533c04c 
removing node 0xb533c03c of size 2048 
created new node at 0xb535a04c whose previous is 0xb535a03c and size is 16 so prev+16 =0xb535a04c 
removing node 0xb535a03c of size 1024 
created new node at 0xb535e04c whose previous is 0xb535e03c and size is 16 so prev+16 =0xb535e04c 
RETURN ADDRESS 0xb535e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355000
removing node 0xb535e03c of size 512 


 REQUEST NUMBER 625 TO ALLOCATE BLOCK OF SIZE 38
Adjusted size to: 64
removing node 0xb535c03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb535c04c whose previous is 0xb535c03c and size is 16 so prev+16 =0xb535c04c 
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534e480
removing node 0xb535c03c of size 64 


 REQUEST NUMBER 626 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
RETURN ADDRESS 0xb535003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5343ce0
removing node 0xb535003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 627 TO ALLOCATE BLOCK OF SIZE 2696
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5350000 and pagePtr 0x9929220 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 108 
stepping through nodes 
 we have 106 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d248 and the new one at 0xb527d274 
New page node points to data page 0xb5350000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 109 
created new node at 0xb536004c whose previous is 0xb536003c and size is 16 so prev+16 =0xb536004c 
RETURN ADDRESS IS ----------------------->>>>>0xb536003c-> 0xb5350000
removing node 0xb536003c of size 4096 


 REQUEST NUMBER 628 TO ALLOCATE BLOCK OF SIZE 6833
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9986588 and page at 0xb5362000 
adding page node for the page located at 0xb5362000 and pagePtr 0x9986588 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 109 
stepping through nodes 
 we have 107 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d274 and the new one at 0xb527d2a0 
New page node points to data page 0xb5362000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 110 
RETURN ADDRESS IS 0xb5362000 


 REQUEST NUMBER 629 TO ALLOCATE BLOCK OF SIZE 48
Adjusted size to: 64
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb534e4c0
removing node 0xb535c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 630 TO ALLOCATE BLOCK OF SIZE 101
Adjusted size to: 128
removing node 0xb535e03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb535e04c whose previous is 0xb535e03c and size is 16 so prev+16 =0xb535e04c 
removing node 0xb535e03c of size 256 
created new node at 0xb535c04c whose previous is 0xb535c03c and size is 16 so prev+16 =0xb535c04c 
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355200
removing node 0xb535c03c of size 128 


 REQUEST NUMBER 631 TO ALLOCATE BLOCK OF SIZE 3008
Adjusted size to: 4096
RETURN ADDRESS 0xb536003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5351000
removing node 0xb536003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 632 TO FREE BLOCK 0xb5310a80  OF SIZE 18
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5310a80 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5360000 -- 0xb5362000| 

 COUNT: 1  - ends at 0xb536003c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb535c000 -- 0xb535e000| 

 COUNT: 1  - ends at 0xb535c03c 
	 3 -> 0xb535e000 -- 0xb5360000| 

 COUNT: 1  - ends at 0xb535e03c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb535a000 -- 0xb535c000| 

 COUNT: 1  - ends at 0xb535a03c 
	 6 -> 0xb533c000 -- 0xb533e000| 

 COUNT: 1  - ends at 0xb533c03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 633 TO ALLOCATE BLOCK OF SIZE 1479
Adjusted size to: 2048
RETURN ADDRESS 0xb533c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355800
removing node 0xb533c03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 634 TO ALLOCATE BLOCK OF SIZE 159
Adjusted size to: 256
RETURN ADDRESS 0xb535e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355300
removing node 0xb535e03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 635 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb536003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310a80
removing node 0xb536003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 636 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
removing node 0xb535c03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb535c04c whose previous is 0xb535c03c and size is 16 so prev+16 =0xb535c04c 
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355280
removing node 0xb535c03c of size 64 


 REQUEST NUMBER 637 TO ALLOCATE BLOCK OF SIZE 120
Adjusted size to: 128
removing node 0xb535a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb535a04c whose previous is 0xb535a03c and size is 16 so prev+16 =0xb535a04c 
removing node 0xb535a03c of size 512 
created new node at 0xb536004c whose previous is 0xb536003c and size is 16 so prev+16 =0xb536004c 
removing node 0xb536003c of size 256 
created new node at 0xb535e04c whose previous is 0xb535e03c and size is 16 so prev+16 =0xb535e04c 
RETURN ADDRESS 0xb535e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355400
removing node 0xb535e03c of size 128 


 REQUEST NUMBER 638 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
removing node 0xb535c03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb535c04c whose previous is 0xb535c03c and size is 16 so prev+16 =0xb535c04c 
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53552c0
removing node 0xb535c03c of size 32 


 REQUEST NUMBER 639 TO ALLOCATE BLOCK OF SIZE 153
Adjusted size to: 256
RETURN ADDRESS 0xb536003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355500
removing node 0xb536003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 640 TO ALLOCATE BLOCK OF SIZE 7358
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9958ce0 and page at 0xb5360000 
adding page node for the page located at 0xb5360000 and pagePtr 0x9958ce0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 110 
stepping through nodes 
 we have 108 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d2a0 and the new one at 0xb527d2cc 
New page node points to data page 0xb5360000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 111 
RETURN ADDRESS IS 0xb5360000 


 REQUEST NUMBER 641 TO ALLOCATE BLOCK OF SIZE 7039
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9908028 and page at 0xb533c000 
adding page node for the page located at 0xb533c000 and pagePtr 0x9908028 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 111 
stepping through nodes 
 we have 109 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d2cc and the new one at 0xb527d2f8 
New page node points to data page 0xb533c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 112 
RETURN ADDRESS IS 0xb533c000 


 REQUEST NUMBER 642 TO ALLOCATE BLOCK OF SIZE 34
Adjusted size to: 64
removing node 0xb535e03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb535e04c whose previous is 0xb535e03c and size is 16 so prev+16 =0xb535e04c 
RETURN ADDRESS 0xb535e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355480
removing node 0xb535e03c of size 64 


 REQUEST NUMBER 643 TO ALLOCATE BLOCK OF SIZE 5247
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x998cd20 and page at 0xb5364000 
adding page node for the page located at 0xb5364000 and pagePtr 0x998cd20 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 112 
stepping through nodes 
 we have 110 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d2f8 and the new one at 0xb527d324 
New page node points to data page 0xb5364000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 113 
RETURN ADDRESS IS 0xb5364000 


 REQUEST NUMBER 644 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53552e0
removing node 0xb535c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 645 TO ALLOCATE BLOCK OF SIZE 37
Adjusted size to: 64
RETURN ADDRESS 0xb535e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53554c0
removing node 0xb535e03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 646 TO FREE BLOCK 0xb533e000  OF SIZE 5622
removing pageNode to page with ptr 0x996cf98 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
IN THE LOOp 0xb527c66c 
IN THE LOOp 0xb527c698 
IN THE LOOp 0xb527c6c4 
IN THE LOOp 0xb527c6f0 
IN THE LOOp 0xb527c71c 
IN THE LOOp 0xb527c748 
IN THE LOOp 0xb527c774 
IN THE LOOp 0xb527c7a0 
IN THE LOOp 0xb527c7cc 
IN THE LOOp 0xb527c7f8 
IN THE LOOp 0xb527c824 
IN THE LOOp 0xb527c850 
IN THE LOOp 0xb527c87c 
IN THE LOOp 0xb527c8a8 
IN THE LOOp 0xb527c8d4 
IN THE LOOp 0xb527c900 
IN THE LOOp 0xb527c92c 
IN THE LOOp 0xb527c958 
IN THE LOOp 0xb527c984 
IN THE LOOp 0xb527c9b0 
IN THE LOOp 0xb527c9dc 
IN THE LOOp 0xb527ca08 
IN THE LOOp 0xb527ca34 
IN THE LOOp 0xb527ca60 
IN THE LOOp 0xb527ca8c 
IN THE LOOp 0xb527cab8 
IN THE LOOp 0xb527cae4 
IN THE LOOp 0xb527cb10 
IN THE LOOp 0xb527cb3c 
IN THE LOOp 0xb527cb68 
IN THE LOOp 0xb527cb94 
IN THE LOOp 0xb527cbc0 
IN THE LOOp 0xb527cbec 
IN THE LOOp 0xb527cc18 
IN THE LOOp 0xb527cc44 
IN THE LOOp 0xb527cc70 
IN THE LOOp 0xb527cc9c 
IN THE LOOp 0xb527ccc8 
IN THE LOOp 0xb527ccf4 
IN THE LOOp 0xb527cd20 
IN THE LOOp 0xb527cd4c 
IN THE LOOp 0xb527cd78 
IN THE LOOp 0xb527cda4 
IN THE LOOp 0xb527cdd0 
IN THE LOOp 0xb527cdfc 
IN THE LOOp 0xb527ce28 
IN THE LOOp 0xb527ce54 
IN THE LOOp 0xb527ce80 
IN THE LOOp 0xb527ceac 
IN THE LOOp 0xb527ced8 
IN THE LOOp 0xb527cf04 
IN THE LOOp 0xb527cf30 
IN THE LOOp 0xb527cf5c 
out of loop 
IN LOOPP 0xb527cfb4 -> 0xb527cfe0 (next) 
IN LOOPP 0xb527cfe0 -> 0xb527d00c (next) 
IN LOOPP 0xb527d00c -> 0xb527d038 (next) 
IN LOOPP 0xb527d038 -> 0xb527d064 (next) 
IN LOOPP 0xb527d064 -> 0xb527d090 (next) 
IN LOOPP 0xb527d090 -> 0xb527d0bc (next) 
IN LOOPP 0xb527d0bc -> 0xb527d0e8 (next) 
IN LOOPP 0xb527d0e8 -> 0xb527d114 (next) 
IN LOOPP 0xb527d114 -> 0xb527d140 (next) 
IN LOOPP 0xb527d140 -> 0xb527d16c (next) 
IN LOOPP 0xb527d16c -> 0xb527d198 (next) 
IN LOOPP 0xb527d198 -> 0xb527d1c4 (next) 
IN LOOPP 0xb527d1c4 -> 0xb527d1f0 (next) 
IN LOOPP 0xb527d1f0 -> 0xb527d21c (next) 
IN LOOPP 0xb527d21c -> 0xb527d248 (next) 
IN LOOPP 0xb527d248 -> 0xb527d274 (next) 
IN LOOPP 0xb527d274 -> 0xb527d2a0 (next) 
IN LOOPP 0xb527d2a0 -> 0xb527d2cc (next) 
IN LOOPP 0xb527d2cc -> 0xb527d2f8 (next) 
IN LOOPP 0xb527d2f8 -> 0xb527d324 (next) 
IN LOOPP 0xb527d324 -> (nil) (next) 
Add 0xb527d2cc we set the next to null 
Prev: 0xb527d324, current: (nil) 
Page to decrease counter: 0xb527c000 from 113 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb535a000 -- 0xb535c000| 

 COUNT: 1  - ends at 0xb535a03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 647 TO ALLOCATE BLOCK OF SIZE 4130
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996cf98 and page at 0xb533e000 
adding page node for the page located at 0xb533e000 and pagePtr 0x996cf98 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 112 
stepping through nodes 
 we have 109 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d2cc and the new one at 0xb527d2f8 
New page node points to data page 0xb533e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 113 
RETURN ADDRESS IS 0xb533e000 


 REQUEST NUMBER 648 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
removing node 0xb535a03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb535a04c whose previous is 0xb535a03c and size is 16 so prev+16 =0xb535a04c 
removing node 0xb535a03c of size 256 
created new node at 0xb535e04c whose previous is 0xb535e03c and size is 16 so prev+16 =0xb535e04c 
removing node 0xb535e03c of size 128 
created new node at 0xb535c04c whose previous is 0xb535c03c and size is 16 so prev+16 =0xb535c04c 
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355600
removing node 0xb535c03c of size 64 


 REQUEST NUMBER 649 TO ALLOCATE BLOCK OF SIZE 2369
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5366000 and pagePtr 0x996e000 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 113 
stepping through nodes 
 we have 110 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d2f8 and the new one at 0xb527d324 
New page node points to data page 0xb5366000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 114 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS IS ----------------------->>>>>0xb536803c-> 0xb5366000
removing node 0xb536803c of size 4096 


 REQUEST NUMBER 650 TO ALLOCATE BLOCK OF SIZE 52
Adjusted size to: 64
RETURN ADDRESS 0xb535c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355640
removing node 0xb535c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 651 TO ALLOCATE BLOCK OF SIZE 5264
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9958cb0 and page at 0xb535c000 
adding page node for the page located at 0xb535c000 and pagePtr 0x9958cb0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 114 
stepping through nodes 
 we have 111 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d324 and the new one at 0xb527d350 
New page node points to data page 0xb535c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 115 
RETURN ADDRESS IS 0xb535c000 


 REQUEST NUMBER 652 TO ALLOCATE BLOCK OF SIZE 211
Adjusted size to: 256
RETURN ADDRESS 0xb535a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355700
removing node 0xb535a03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 653 TO ALLOCATE BLOCK OF SIZE 5536
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9958cc0 and page at 0xb535a000 
adding page node for the page located at 0xb535a000 and pagePtr 0x9958cc0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 115 
stepping through nodes 
 we have 112 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d350 and the new one at 0xb527d37c 
New page node points to data page 0xb535a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 116 
RETURN ADDRESS IS 0xb535a000 


 REQUEST NUMBER 654 TO ALLOCATE BLOCK OF SIZE 292
Adjusted size to: 512
removing node 0xb536803c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 2048 
created new node at 0xb536a04c whose previous is 0xb536a03c and size is 16 so prev+16 =0xb536a04c 
removing node 0xb536a03c of size 1024 
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367000
removing node 0xb536c03c of size 512 


 REQUEST NUMBER 655 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
removing node 0xb535e03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb535e04c whose previous is 0xb535e03c and size is 16 so prev+16 =0xb535e04c 
removing node 0xb535e03c of size 64 
created new node at 0xb536e04c whose previous is 0xb536e03c and size is 16 so prev+16 =0xb536e04c 
RETURN ADDRESS 0xb536e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5355680
removing node 0xb536e03c of size 32 


 REQUEST NUMBER 656 TO ALLOCATE BLOCK OF SIZE 2008
Adjusted size to: 2048
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367800
removing node 0xb536803c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 657 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb536e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53556a0
removing node 0xb536e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 658 TO ALLOCATE BLOCK OF SIZE 3037
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb536e000 and pagePtr 0x996e010 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 116 
stepping through nodes 
 we have 113 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d37c and the new one at 0xb527d3a8 
New page node points to data page 0xb536e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 117 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS IS ----------------------->>>>>0xb536803c-> 0xb536e000
removing node 0xb536803c of size 4096 


 REQUEST NUMBER 659 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
RETURN ADDRESS 0xb535e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53556c0
removing node 0xb535e03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 660 TO ALLOCATE BLOCK OF SIZE 3542
Adjusted size to: 4096
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536f000
removing node 0xb536803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 661 TO ALLOCATE BLOCK OF SIZE 358
Adjusted size to: 512
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367200
removing node 0xb536c03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 662 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
removing node 0xb536a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb536a04c whose previous is 0xb536a03c and size is 16 so prev+16 =0xb536a04c 
removing node 0xb536a03c of size 512 
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
removing node 0xb536c03c of size 256 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 128 
created new node at 0xb535e04c whose previous is 0xb535e03c and size is 16 so prev+16 =0xb535e04c 
removing node 0xb535e03c of size 64 
created new node at 0xb537004c whose previous is 0xb537003c and size is 16 so prev+16 =0xb537004c 
RETURN ADDRESS 0xb537003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367400
removing node 0xb537003c of size 32 


 REQUEST NUMBER 663 TO ALLOCATE BLOCK OF SIZE 49
Adjusted size to: 64
RETURN ADDRESS 0xb535e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367440
removing node 0xb535e03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 664 TO ALLOCATE BLOCK OF SIZE 72
Adjusted size to: 128
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367480
removing node 0xb536803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 665 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
RETURN ADDRESS 0xb537003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367420
removing node 0xb537003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 666 TO ALLOCATE BLOCK OF SIZE 107
Adjusted size to: 128
removing node 0xb536c03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367500
removing node 0xb536c03c of size 128 


 REQUEST NUMBER 667 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
removing node 0xb536c03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
removing node 0xb536c03c of size 64 
created new node at 0xb537004c whose previous is 0xb537003c and size is 16 so prev+16 =0xb537004c 
RETURN ADDRESS 0xb537003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367580
removing node 0xb537003c of size 32 


 REQUEST NUMBER 668 TO ALLOCATE BLOCK OF SIZE 127
Adjusted size to: 128
removing node 0xb536a03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb536a04c whose previous is 0xb536a03c and size is 16 so prev+16 =0xb536a04c 
removing node 0xb536a03c of size 256 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367600
removing node 0xb536803c of size 128 


 REQUEST NUMBER 669 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
RETURN ADDRESS 0xb537003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53675a0
removing node 0xb537003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 670 TO ALLOCATE BLOCK OF SIZE 130
Adjusted size to: 256
RETURN ADDRESS 0xb536a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367700
removing node 0xb536a03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 671 TO ALLOCATE BLOCK OF SIZE 1946
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb536a000 and pagePtr 0x996e130 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 117 
stepping through nodes 
 we have 114 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d3a8 and the new one at 0xb527d3d4 
New page node points to data page 0xb536a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 118 
created new node at 0xb537004c whose previous is 0xb537003c and size is 16 so prev+16 =0xb537004c 
removing node 0xb537003c of size 4096 
created new node at 0xb535e04c whose previous is 0xb535e03c and size is 16 so prev+16 =0xb535e04c 
RETURN ADDRESS IS ----------------------->>>>>0xb535e03c-> 0xb536a000
removing node 0xb535e03c of size 2048 


 REQUEST NUMBER 672 TO ALLOCATE BLOCK OF SIZE 20
Adjusted size to: 32
removing node 0xb536c03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53675c0
removing node 0xb536c03c of size 32 


 REQUEST NUMBER 673 TO ALLOCATE BLOCK OF SIZE 1154
Adjusted size to: 2048
RETURN ADDRESS 0xb535e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536a800
removing node 0xb535e03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 674 TO ALLOCATE BLOCK OF SIZE 7422
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9958cd0 and page at 0xb535e000 
adding page node for the page located at 0xb535e000 and pagePtr 0x9958cd0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 118 
stepping through nodes 
 we have 115 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d3d4 and the new one at 0xb527d400 
New page node points to data page 0xb535e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 119 
RETURN ADDRESS IS 0xb535e000 


 REQUEST NUMBER 675 TO ALLOCATE BLOCK OF SIZE 123
Adjusted size to: 128
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5367680
removing node 0xb536803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 676 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53675e0
removing node 0xb536c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 677 TO ALLOCATE BLOCK OF SIZE 3850
Adjusted size to: 4096
RETURN ADDRESS 0xb537003c
RETURN ADDRESS IS ----------------------->>>>> 0xb536b000
removing node 0xb537003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 678 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5370000 and pagePtr 0x996e458 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 119 
stepping through nodes 
 we have 116 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d400 and the new one at 0xb527d42c 
New page node points to data page 0xb5370000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 120 
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
removing node 0xb536c03c of size 4096 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 2048 
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
removing node 0xb537203c of size 1024 
created new node at 0xb537404c whose previous is 0xb537403c and size is 16 so prev+16 =0xb537404c 
removing node 0xb537403c of size 512 
created new node at 0xb537604c whose previous is 0xb537603c and size is 16 so prev+16 =0xb537604c 
removing node 0xb537603c of size 256 
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
removing node 0xb537803c of size 128 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb537a03c-> 0xb5370000
removing node 0xb537a03c of size 64 


 REQUEST NUMBER 679 TO FREE BLOCK 0xb535e000  OF SIZE 7422
removing pageNode to page with ptr 0x9958cd0 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
IN THE LOOp 0xb527c66c 
IN THE LOOp 0xb527c698 
IN THE LOOp 0xb527c6c4 
IN THE LOOp 0xb527c6f0 
IN THE LOOp 0xb527c71c 
IN THE LOOp 0xb527c748 
IN THE LOOp 0xb527c774 
IN THE LOOp 0xb527c7a0 
IN THE LOOp 0xb527c7cc 
IN THE LOOp 0xb527c7f8 
IN THE LOOp 0xb527c824 
IN THE LOOp 0xb527c850 
IN THE LOOp 0xb527c87c 
IN THE LOOp 0xb527c8a8 
IN THE LOOp 0xb527c8d4 
IN THE LOOp 0xb527c900 
IN THE LOOp 0xb527c92c 
IN THE LOOp 0xb527c958 
IN THE LOOp 0xb527c984 
IN THE LOOp 0xb527c9b0 
IN THE LOOp 0xb527c9dc 
IN THE LOOp 0xb527ca08 
IN THE LOOp 0xb527ca34 
IN THE LOOp 0xb527ca60 
IN THE LOOp 0xb527ca8c 
IN THE LOOp 0xb527cab8 
IN THE LOOp 0xb527cae4 
IN THE LOOp 0xb527cb10 
IN THE LOOp 0xb527cb3c 
IN THE LOOp 0xb527cb68 
IN THE LOOp 0xb527cb94 
IN THE LOOp 0xb527cbc0 
IN THE LOOp 0xb527cbec 
IN THE LOOp 0xb527cc18 
IN THE LOOp 0xb527cc44 
IN THE LOOp 0xb527cc70 
IN THE LOOp 0xb527cc9c 
IN THE LOOp 0xb527ccc8 
IN THE LOOp 0xb527ccf4 
IN THE LOOp 0xb527cd20 
IN THE LOOp 0xb527cd4c 
IN THE LOOp 0xb527cd78 
IN THE LOOp 0xb527cda4 
IN THE LOOp 0xb527cdd0 
IN THE LOOp 0xb527cdfc 
IN THE LOOp 0xb527ce28 
IN THE LOOp 0xb527ce54 
IN THE LOOp 0xb527ce80 
IN THE LOOp 0xb527ceac 
IN THE LOOp 0xb527ced8 
IN THE LOOp 0xb527cf04 
IN THE LOOp 0xb527cf30 
IN THE LOOp 0xb527cf5c 
IN THE LOOp 0xb527cf88 
IN THE LOOp 0xb527cfb4 
IN THE LOOp 0xb527cfe0 
IN THE LOOp 0xb527d00c 
IN THE LOOp 0xb527d038 
IN THE LOOp 0xb527d064 
IN THE LOOp 0xb527d090 
IN THE LOOp 0xb527d0bc 
IN THE LOOp 0xb527d0e8 
IN THE LOOp 0xb527d114 
IN THE LOOp 0xb527d140 
IN THE LOOp 0xb527d16c 
IN THE LOOp 0xb527d198 
IN THE LOOp 0xb527d1c4 
IN THE LOOp 0xb527d1f0 
IN THE LOOp 0xb527d21c 
IN THE LOOp 0xb527d248 
IN THE LOOp 0xb527d274 
IN THE LOOp 0xb527d2a0 
IN THE LOOp 0xb527d2cc 
IN THE LOOp 0xb527d2f8 
IN THE LOOp 0xb527d324 
IN THE LOOp 0xb527d350 
IN THE LOOp 0xb527d37c 
IN THE LOOp 0xb527d3a8 
IN THE LOOp 0xb527d3d4 
out of loop 
IN LOOPP 0xb527d42c -> (nil) (next) 
Add 0xb527d3d4 we set the next to null 
Prev: 0xb527d42c, current: (nil) 
Page to decrease counter: 0xb527c000 from 120 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 1  - ends at 0xb537a03c 
	 2 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 3 -> 0xb5376000 -- 0xb5378000| 

 COUNT: 1  - ends at 0xb537603c 
	 4 -> 0xb5374000 -- 0xb5376000| 

 COUNT: 1  - ends at 0xb537403c 
	 5 -> 0xb5372000 -- 0xb5374000| 

 COUNT: 1  - ends at 0xb537203c 
	 6 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 1  - ends at 0xb536c03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 680 TO FREE BLOCK 0xb531b000  OF SIZE 2763
coalescing blocks if possible
trying to coalesce a block at ptr 0xb531b000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 1  - ends at 0xb537a03c 
	 2 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 3 -> 0xb5376000 -- 0xb5378000| 

 COUNT: 1  - ends at 0xb537603c 
	 4 -> 0xb5374000 -- 0xb5376000| 

 COUNT: 1  - ends at 0xb537403c 
	 5 -> 0xb5372000 -- 0xb5374000| 

 COUNT: 1  - ends at 0xb537203c 
	 6 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 2  - ends at 0xb536c04c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 681 TO ALLOCATE BLOCK OF SIZE 381
Adjusted size to: 512
RETURN ADDRESS 0xb537403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370200
removing node 0xb537403c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 682 TO FREE BLOCK 0xb5297900  OF SIZE 214
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5297900 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb537604c whose previous is 0xb537603c and size is 16 so prev+16 =0xb537604c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 1  - ends at 0xb537a03c 
	 2 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 3 -> 0xb5376000 -- 0xb5378000| 

 COUNT: 2  - ends at 0xb537604c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5372000 -- 0xb5374000| 

 COUNT: 1  - ends at 0xb537203c 
	 6 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 2  - ends at 0xb536c04c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 683 TO FREE BLOCK 0xb5292000  OF SIZE 3693
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5292000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb536c05c whose previous is 0xb536c04c and size is 16 so prev+16 =0xb536c05c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 1  - ends at 0xb537a03c 
	 2 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 3 -> 0xb5376000 -- 0xb5378000| 

 COUNT: 2  - ends at 0xb537604c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5372000 -- 0xb5374000| 

 COUNT: 1  - ends at 0xb537203c 
	 6 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 3  - ends at 0xb536c05c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 684 TO FREE BLOCK 0xb527ec00  OF SIZE 198
coalescing blocks if possible
trying to coalesce a block at ptr 0xb527ec00 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb537605c whose previous is 0xb537604c and size is 16 so prev+16 =0xb537605c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 1  - ends at 0xb537a03c 
	 2 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 3 -> 0xb5376000 -- 0xb5378000| 

 COUNT: 3  - ends at 0xb537605c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5372000 -- 0xb5374000| 

 COUNT: 1  - ends at 0xb537203c 
	 6 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 3  - ends at 0xb536c05c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 685 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
removing node 0xb537a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370040
removing node 0xb537a03c of size 32 


 REQUEST NUMBER 686 TO ALLOCATE BLOCK OF SIZE 662
Adjusted size to: 1024
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370400
removing node 0xb537203c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 687 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370060
removing node 0xb537a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 688 TO ALLOCATE BLOCK OF SIZE 315
Adjusted size to: 512
removing node 0xb536803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 1024 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370800
removing node 0xb537a03c of size 512 


 REQUEST NUMBER 689 TO ALLOCATE BLOCK OF SIZE 31
Adjusted size to: 32
removing node 0xb537803c of size 128 
*** freeing page for lists of size 2
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
removing node 0xb537803c of size 64 
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370080
removing node 0xb537203c of size 32 


 REQUEST NUMBER 690 TO ALLOCATE BLOCK OF SIZE 485
Adjusted size to: 512
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370a00
removing node 0xb537a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 691 TO ALLOCATE BLOCK OF SIZE 520
Adjusted size to: 1024
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370c00
removing node 0xb536803c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 692 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53700a0
removing node 0xb537203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 693 TO ALLOCATE BLOCK OF SIZE 2802
Adjusted size to: 4096
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5371000
removing node 0xb536c03c of size 4096 


 REQUEST NUMBER 694 TO FREE BLOCK 0xb52de000  OF SIZE 5116
removing pageNode to page with ptr 0x9926e38 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
IN THE LOOp 0xb527c66c 
IN THE LOOp 0xb527c698 
IN THE LOOp 0xb527c6c4 
IN THE LOOp 0xb527c6f0 
IN THE LOOp 0xb527c71c 
IN THE LOOp 0xb527c748 
IN THE LOOp 0xb527c774 
IN THE LOOp 0xb527c7a0 
IN THE LOOp 0xb527c7cc 
out of loop 
IN LOOPP 0xb527c824 -> 0xb527c850 (next) 
IN LOOPP 0xb527c850 -> 0xb527c87c (next) 
IN LOOPP 0xb527c87c -> 0xb527c8a8 (next) 
IN LOOPP 0xb527c8a8 -> 0xb527c8d4 (next) 
IN LOOPP 0xb527c8d4 -> 0xb527c900 (next) 
IN LOOPP 0xb527c900 -> 0xb527c92c (next) 
IN LOOPP 0xb527c92c -> 0xb527c958 (next) 
IN LOOPP 0xb527c958 -> 0xb527c984 (next) 
IN LOOPP 0xb527c984 -> 0xb527c9b0 (next) 
IN LOOPP 0xb527c9b0 -> 0xb527c9dc (next) 
IN LOOPP 0xb527c9dc -> 0xb527ca08 (next) 
IN LOOPP 0xb527ca08 -> 0xb527ca34 (next) 
IN LOOPP 0xb527ca34 -> 0xb527ca60 (next) 
IN LOOPP 0xb527ca60 -> 0xb527ca8c (next) 
IN LOOPP 0xb527ca8c -> 0xb527cab8 (next) 
IN LOOPP 0xb527cab8 -> 0xb527cae4 (next) 
IN LOOPP 0xb527cae4 -> 0xb527cb10 (next) 
IN LOOPP 0xb527cb10 -> 0xb527cb3c (next) 
IN LOOPP 0xb527cb3c -> 0xb527cb68 (next) 
IN LOOPP 0xb527cb68 -> 0xb527cb94 (next) 
IN LOOPP 0xb527cb94 -> 0xb527cbc0 (next) 
IN LOOPP 0xb527cbc0 -> 0xb527cbec (next) 
IN LOOPP 0xb527cbec -> 0xb527cc18 (next) 
IN LOOPP 0xb527cc18 -> 0xb527cc44 (next) 
IN LOOPP 0xb527cc44 -> 0xb527cc70 (next) 
IN LOOPP 0xb527cc70 -> 0xb527cc9c (next) 
IN LOOPP 0xb527cc9c -> 0xb527ccc8 (next) 
IN LOOPP 0xb527ccc8 -> 0xb527ccf4 (next) 
IN LOOPP 0xb527ccf4 -> 0xb527cd20 (next) 
IN LOOPP 0xb527cd20 -> 0xb527cd4c (next) 
IN LOOPP 0xb527cd4c -> 0xb527cd78 (next) 
IN LOOPP 0xb527cd78 -> 0xb527cda4 (next) 
IN LOOPP 0xb527cda4 -> 0xb527cdd0 (next) 
IN LOOPP 0xb527cdd0 -> 0xb527cdfc (next) 
IN LOOPP 0xb527cdfc -> 0xb527ce28 (next) 
IN LOOPP 0xb527ce28 -> 0xb527ce54 (next) 
IN LOOPP 0xb527ce54 -> 0xb527ce80 (next) 
IN LOOPP 0xb527ce80 -> 0xb527ceac (next) 
IN LOOPP 0xb527ceac -> 0xb527ced8 (next) 
IN LOOPP 0xb527ced8 -> 0xb527cf04 (next) 
IN LOOPP 0xb527cf04 -> 0xb527cf30 (next) 
IN LOOPP 0xb527cf30 -> 0xb527cf5c (next) 
IN LOOPP 0xb527cf5c -> 0xb527cf88 (next) 
IN LOOPP 0xb527cf88 -> 0xb527cfb4 (next) 
IN LOOPP 0xb527cfb4 -> 0xb527cfe0 (next) 
IN LOOPP 0xb527cfe0 -> 0xb527d00c (next) 
IN LOOPP 0xb527d00c -> 0xb527d038 (next) 
IN LOOPP 0xb527d038 -> 0xb527d064 (next) 
IN LOOPP 0xb527d064 -> 0xb527d090 (next) 
IN LOOPP 0xb527d090 -> 0xb527d0bc (next) 
IN LOOPP 0xb527d0bc -> 0xb527d0e8 (next) 
IN LOOPP 0xb527d0e8 -> 0xb527d114 (next) 
IN LOOPP 0xb527d114 -> 0xb527d140 (next) 
IN LOOPP 0xb527d140 -> 0xb527d16c (next) 
IN LOOPP 0xb527d16c -> 0xb527d198 (next) 
IN LOOPP 0xb527d198 -> 0xb527d1c4 (next) 
IN LOOPP 0xb527d1c4 -> 0xb527d1f0 (next) 
IN LOOPP 0xb527d1f0 -> 0xb527d21c (next) 
IN LOOPP 0xb527d21c -> 0xb527d248 (next) 
IN LOOPP 0xb527d248 -> 0xb527d274 (next) 
IN LOOPP 0xb527d274 -> 0xb527d2a0 (next) 
IN LOOPP 0xb527d2a0 -> 0xb527d2cc (next) 
IN LOOPP 0xb527d2cc -> 0xb527d2f8 (next) 
IN LOOPP 0xb527d2f8 -> 0xb527d324 (next) 
IN LOOPP 0xb527d324 -> 0xb527d350 (next) 
IN LOOPP 0xb527d350 -> 0xb527d37c (next) 
IN LOOPP 0xb527d37c -> 0xb527d3a8 (next) 
IN LOOPP 0xb527d3a8 -> 0xb527d3d4 (next) 
IN LOOPP 0xb527d3d4 -> (nil) (next) 
Add 0xb527d37c we set the next to null 
Prev: 0xb527d3d4, current: (nil) 
Page to decrease counter: 0xb527c000 from 119 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5376000 -- 0xb5378000| 

 COUNT: 3  - ends at 0xb537605c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 2  - ends at 0xb536c04c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 695 TO ALLOCATE BLOCK OF SIZE 140
Adjusted size to: 256
RETURN ADDRESS 0xb537603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370100
removing node 0xb537603c of size 256 


 REQUEST NUMBER 696 TO FREE BLOCK 0xb529a000  OF SIZE 3015
coalescing blocks if possible
trying to coalesce a block at ptr 0xb529a000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb536c05c whose previous is 0xb536c04c and size is 16 so prev+16 =0xb536c05c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5376000 -- 0xb5378000| 

 COUNT: 2  - ends at 0xb537604c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 3  - ends at 0xb536c05c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 697 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
removing node 0xb537803c of size 64 
*** freeing page for lists of size 1
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53700c0
removing node 0xb537803c of size 32 


 REQUEST NUMBER 698 TO ALLOCATE BLOCK OF SIZE 51
Adjusted size to: 64
removing node 0xb537603c of size 256 
created new node at 0xb52de04c whose previous is 0xb52de03c and size is 16 so prev+16 =0xb52de04c 
removing node 0xb52de03c of size 128 
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297900
removing node 0xb537203c of size 64 


 REQUEST NUMBER 699 TO ALLOCATE BLOCK OF SIZE 938
Adjusted size to: 1024
removing node 0xb536c03c of size 4096 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 2048 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb531b000
removing node 0xb537a03c of size 1024 


 REQUEST NUMBER 700 TO ALLOCATE BLOCK OF SIZE 3627
Adjusted size to: 4096
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5292000
removing node 0xb536c03c of size 4096 


 REQUEST NUMBER 701 TO ALLOCATE BLOCK OF SIZE 101
Adjusted size to: 128
RETURN ADDRESS 0xb52de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297980
removing node 0xb52de03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 702 TO ALLOCATE BLOCK OF SIZE 227
Adjusted size to: 256
RETURN ADDRESS 0xb537603c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ec00
removing node 0xb537603c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 703 TO ALLOCATE BLOCK OF SIZE 351
Adjusted size to: 512
removing node 0xb537a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb531b400
removing node 0xb537a03c of size 512 


 REQUEST NUMBER 704 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53700e0
removing node 0xb537803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 705 TO ALLOCATE BLOCK OF SIZE 47
Adjusted size to: 64
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297940
removing node 0xb537203c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 706 TO FREE BLOCK 0xb52ffc00  OF SIZE 342
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52ffc00 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 2  - ends at 0xb537a04c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 1  - ends at 0xb536c03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 707 TO ALLOCATE BLOCK OF SIZE 246
Adjusted size to: 256
removing node 0xb537a03c of size 512 
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb531b600
removing node 0xb537203c of size 256 


 REQUEST NUMBER 708 TO ALLOCATE BLOCK OF SIZE 250
Adjusted size to: 256
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb531b700
removing node 0xb537203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 709 TO ALLOCATE BLOCK OF SIZE 163
Adjusted size to: 256
removing node 0xb537a03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ffc00
removing node 0xb537a03c of size 256 


 REQUEST NUMBER 710 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
removing node 0xb537a03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
removing node 0xb537a03c of size 128 
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
removing node 0xb537203c of size 64 
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ffd00
removing node 0xb537803c of size 32 


 REQUEST NUMBER 711 TO ALLOCATE BLOCK OF SIZE 2214
Adjusted size to: 4096
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529a000
removing node 0xb536c03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 712 TO ALLOCATE BLOCK OF SIZE 959
Adjusted size to: 1024
removing node 0xb536803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb531b800
removing node 0xb536803c of size 1024 


 REQUEST NUMBER 713 TO FREE BLOCK 0xb530f000  OF SIZE 2308
coalescing blocks if possible
trying to coalesce a block at ptr 0xb530f000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 1 -> 0xb5372000 -- 0xb5374000| 

 COUNT: 1  - ends at 0xb537203c 
	 2 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 1  - ends at 0xb537a03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 1  - ends at 0xb536c03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 714 TO ALLOCATE BLOCK OF SIZE 93
Adjusted size to: 128
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ffd80
removing node 0xb537a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 715 TO ALLOCATE BLOCK OF SIZE 237
Adjusted size to: 256
removing node 0xb536803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 512 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb531bc00
removing node 0xb537a03c of size 256 


 REQUEST NUMBER 716 TO ALLOCATE BLOCK OF SIZE 5742
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996e2a8 and page at 0xb5376000 
adding page node for the page located at 0xb5376000 and pagePtr 0x996e2a8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 118 
stepping through nodes 
 we have 113 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d37c and the new one at 0xb527d3a8 
New page node points to data page 0xb5376000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 119 
RETURN ADDRESS IS 0xb5376000 


 REQUEST NUMBER 717 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ffd20
removing node 0xb537803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 718 TO ALLOCATE BLOCK OF SIZE 24
Adjusted size to: 32
removing node 0xb537203c of size 64 
*** freeing page for lists of size 1
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ffd40
removing node 0xb537203c of size 32 


 REQUEST NUMBER 719 TO FREE BLOCK 0xb52a1600  OF SIZE 227
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52a1600 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5372000 -- 0xb5374000| 

 COUNT: 1  - ends at 0xb537203c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 2  - ends at 0xb537a04c 
	 4 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb536c000 -- 0xb536e000| 

 COUNT: 1  - ends at 0xb536c03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 720 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ffd60
removing node 0xb537203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 721 TO ALLOCATE BLOCK OF SIZE 423
Adjusted size to: 512
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb531be00
removing node 0xb536803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 722 TO ALLOCATE BLOCK OF SIZE 108
Adjusted size to: 128
removing node 0xb537a03c of size 256 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb531bd00
removing node 0xb536803c of size 128 


 REQUEST NUMBER 723 TO ALLOCATE BLOCK OF SIZE 426
Adjusted size to: 512
removing node 0xb536c03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
removing node 0xb536c03c of size 2048 
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
removing node 0xb537203c of size 1024 
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f000
removing node 0xb537803c of size 512 


 REQUEST NUMBER 724 TO ALLOCATE BLOCK OF SIZE 6468
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99048a8 and page at 0xb52de000 
adding page node for the page located at 0xb52de000 and pagePtr 0x99048a8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 119 
stepping through nodes 
 we have 114 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d3a8 and the new one at 0xb527d3d4 
New page node points to data page 0xb52de000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 120 
RETURN ADDRESS IS 0xb52de000 


 REQUEST NUMBER 725 TO ALLOCATE BLOCK OF SIZE 82
Adjusted size to: 128
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb531bd80
removing node 0xb536803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 726 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
removing node 0xb537a03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
removing node 0xb537a03c of size 128 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 64 
created new node at 0xb537404c whose previous is 0xb537403c and size is 16 so prev+16 =0xb537404c 
RETURN ADDRESS 0xb537403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1600
removing node 0xb537403c of size 32 


 REQUEST NUMBER 727 TO ALLOCATE BLOCK OF SIZE 1404
Adjusted size to: 2048
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f800
removing node 0xb536c03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 728 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb537403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1620
removing node 0xb537403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 729 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
removing node 0xb536803c of size 64 
*** freeing page for lists of size 1
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1640
removing node 0xb536803c of size 32 


 REQUEST NUMBER 730 TO ALLOCATE BLOCK OF SIZE 220
Adjusted size to: 256
removing node 0xb537803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f200
removing node 0xb537803c of size 256 


 REQUEST NUMBER 731 TO ALLOCATE BLOCK OF SIZE 7638
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996e140 and page at 0xb5374000 
adding page node for the page located at 0xb5374000 and pagePtr 0x996e140 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 120 
stepping through nodes 
 we have 115 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d3d4 and the new one at 0xb527d400 
New page node points to data page 0xb5374000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 121 
RETURN ADDRESS IS 0xb5374000 


 REQUEST NUMBER 732 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1660
removing node 0xb536803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 733 TO ALLOCATE BLOCK OF SIZE 56
Adjusted size to: 64
removing node 0xb537a03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1680
removing node 0xb537a03c of size 64 


 REQUEST NUMBER 734 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb537a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a16c0
removing node 0xb537a03c of size 32 


 REQUEST NUMBER 735 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a16e0
removing node 0xb537a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 736 TO FREE BLOCK 0xb5321300  OF SIZE 216
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5321300 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 2  - ends at 0xb537804c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5372000 -- 0xb5374000| 

 COUNT: 1  - ends at 0xb537203c 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 737 TO ALLOCATE BLOCK OF SIZE 288
Adjusted size to: 512
removing node 0xb537203c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f400
removing node 0xb537203c of size 512 


 REQUEST NUMBER 738 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
removing node 0xb537803c of size 256 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
removing node 0xb537a03c of size 128 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 64 
created new node at 0xb536c04c whose previous is 0xb536c03c and size is 16 so prev+16 =0xb536c04c 
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f300
removing node 0xb536c03c of size 32 


 REQUEST NUMBER 739 TO ALLOCATE BLOCK OF SIZE 971
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb535e000 and pagePtr 0x994b278 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 121 
stepping through nodes 
 we have 116 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d400 and the new one at 0xb527d42c 
New page node points to data page 0xb535e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 122 
created new node at 0xb537c04c whose previous is 0xb537c03c and size is 16 so prev+16 =0xb537c04c 
removing node 0xb537c03c of size 4096 
created new node at 0xb537e04c whose previous is 0xb537e03c and size is 16 so prev+16 =0xb537e04c 
removing node 0xb537e03c of size 2048 
created new node at 0xb538004c whose previous is 0xb538003c and size is 16 so prev+16 =0xb538004c 
RETURN ADDRESS IS ----------------------->>>>>0xb538003c-> 0xb535e000
removing node 0xb538003c of size 1024 


 REQUEST NUMBER 740 TO ALLOCATE BLOCK OF SIZE 1169
Adjusted size to: 2048
RETURN ADDRESS 0xb537e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb535e800
removing node 0xb537e03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 741 TO ALLOCATE BLOCK OF SIZE 193
Adjusted size to: 256
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321300
removing node 0xb537803c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 742 TO ALLOCATE BLOCK OF SIZE 38
Adjusted size to: 64
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f340
removing node 0xb536803c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 743 TO ALLOCATE BLOCK OF SIZE 3401
Adjusted size to: 4096
RETURN ADDRESS 0xb537c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb535f000
removing node 0xb537c03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 744 TO ALLOCATE BLOCK OF SIZE 5695
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x994b240 and page at 0xb537c000 
adding page node for the page located at 0xb537c000 and pagePtr 0x994b240 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 122 
stepping through nodes 
 we have 117 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d42c and the new one at 0xb527d458 
New page node points to data page 0xb537c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 123 
RETURN ADDRESS IS 0xb537c000 


 REQUEST NUMBER 745 TO ALLOCATE BLOCK OF SIZE 866
Adjusted size to: 1024
RETURN ADDRESS 0xb538003c
RETURN ADDRESS IS ----------------------->>>>> 0xb535e400
removing node 0xb538003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 746 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
RETURN ADDRESS 0xb536c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f320
removing node 0xb536c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 747 TO ALLOCATE BLOCK OF SIZE 799
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb536c000 and pagePtr 0x994b250 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 123 
stepping through nodes 
 we have 118 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d458 and the new one at 0xb527d484 
New page node points to data page 0xb536c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 124 
created new node at 0xb538004c whose previous is 0xb538003c and size is 16 so prev+16 =0xb538004c 
removing node 0xb538003c of size 4096 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 2048 
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS IS ----------------------->>>>>0xb537803c-> 0xb536c000
removing node 0xb537803c of size 1024 


 REQUEST NUMBER 748 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb537a03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
removing node 0xb537a03c of size 64 
created new node at 0xb537e04c whose previous is 0xb537e03c and size is 16 so prev+16 =0xb537e04c 
RETURN ADDRESS 0xb537e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f380
removing node 0xb537e03c of size 32 


 REQUEST NUMBER 749 TO ALLOCATE BLOCK OF SIZE 48
Adjusted size to: 64
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f3c0
removing node 0xb537a03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 750 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
RETURN ADDRESS 0xb537e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f3a0
removing node 0xb537e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 751 TO ALLOCATE BLOCK OF SIZE 3651
Adjusted size to: 4096
RETURN ADDRESS 0xb538003c
RETURN ADDRESS IS ----------------------->>>>> 0xb536d000
removing node 0xb538003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 752 TO ALLOCATE BLOCK OF SIZE 290
Adjusted size to: 512
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb530f600
removing node 0xb537203c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 753 TO ALLOCATE BLOCK OF SIZE 183
Adjusted size to: 256
removing node 0xb537803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
removing node 0xb537803c of size 512 
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c400
removing node 0xb537203c of size 256 


 REQUEST NUMBER 754 TO ALLOCATE BLOCK OF SIZE 81
Adjusted size to: 128
removing node 0xb537203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c500
removing node 0xb537203c of size 128 


 REQUEST NUMBER 755 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
removing node 0xb537203c of size 128 
*** freeing page for lists of size 2
created new node at 0xb537204c whose previous is 0xb537203c and size is 16 so prev+16 =0xb537204c 
removing node 0xb537203c of size 64 
created new node at 0xb538004c whose previous is 0xb538003c and size is 16 so prev+16 =0xb538004c 
RETURN ADDRESS 0xb538003c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c580
removing node 0xb538003c of size 32 


 REQUEST NUMBER 756 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
RETURN ADDRESS 0xb538003c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c5a0
removing node 0xb538003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 757 TO ALLOCATE BLOCK OF SIZE 61
Adjusted size to: 64
RETURN ADDRESS 0xb537203c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c5c0
removing node 0xb537203c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 758 TO ALLOCATE BLOCK OF SIZE 203
Adjusted size to: 256
removing node 0xb537803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c600
removing node 0xb537803c of size 256 


 REQUEST NUMBER 759 TO ALLOCATE BLOCK OF SIZE 3653
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5372000 and pagePtr 0x99046d8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 124 
stepping through nodes 
 we have 119 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d484 and the new one at 0xb527d4b0 
New page node points to data page 0xb5372000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 125 
created new node at 0xb538004c whose previous is 0xb538003c and size is 16 so prev+16 =0xb538004c 
RETURN ADDRESS IS ----------------------->>>>>0xb538003c-> 0xb5372000
removing node 0xb538003c of size 4096 


 REQUEST NUMBER 760 TO ALLOCATE BLOCK OF SIZE 5845
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9963580 and page at 0xb537e000 
adding page node for the page located at 0xb537e000 and pagePtr 0x9963580 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 125 
stepping through nodes 
 we have 120 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d4b0 and the new one at 0xb527d4dc 
New page node points to data page 0xb537e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 126 
RETURN ADDRESS IS 0xb537e000 


 REQUEST NUMBER 761 TO ALLOCATE BLOCK OF SIZE 3834
Adjusted size to: 4096
RETURN ADDRESS 0xb538003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5373000
removing node 0xb538003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 762 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb537803c of size 256 
*** freeing page for lists of size 3
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
removing node 0xb537803c of size 128 
created new node at 0xb538004c whose previous is 0xb538003c and size is 16 so prev+16 =0xb538004c 
removing node 0xb538003c of size 64 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c700
removing node 0xb537a03c of size 32 


 REQUEST NUMBER 763 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c720
removing node 0xb537a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 764 TO ALLOCATE BLOCK OF SIZE 308
Adjusted size to: 512
removing node 0xb536803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 1024 
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c800
removing node 0xb537a03c of size 512 


 REQUEST NUMBER 765 TO ALLOCATE BLOCK OF SIZE 36
Adjusted size to: 64
RETURN ADDRESS 0xb538003c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c740
removing node 0xb538003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 766 TO ALLOCATE BLOCK OF SIZE 5952
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99046e8 and page at 0xb5380000 
adding page node for the page located at 0xb5380000 and pagePtr 0x99046e8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 126 
stepping through nodes 
 we have 121 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d4dc and the new one at 0xb527d508 
New page node points to data page 0xb5380000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 127 
RETURN ADDRESS IS 0xb5380000 


 REQUEST NUMBER 767 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
removing node 0xb537803c of size 128 
*** freeing page for lists of size 2
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c780
removing node 0xb537803c of size 64 


 REQUEST NUMBER 768 TO ALLOCATE BLOCK OF SIZE 2695
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5382000 and pagePtr 0x994b490 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 127 
stepping through nodes 
 we have 122 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d508 and the new one at 0xb527d534 
New page node points to data page 0xb5382000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 128 
created new node at 0xb538404c whose previous is 0xb538403c and size is 16 so prev+16 =0xb538404c 
RETURN ADDRESS IS ----------------------->>>>>0xb538403c-> 0xb5382000
removing node 0xb538403c of size 4096 


 REQUEST NUMBER 769 TO ALLOCATE BLOCK OF SIZE 5296
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9996148 and page at 0xb5386000 
adding page node for the page located at 0xb5386000 and pagePtr 0x9996148 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 128 
stepping through nodes 
 we have 123 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d534 and the new one at 0xb527d560 
New page node points to data page 0xb5386000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 129 
RETURN ADDRESS IS 0xb5386000 


 REQUEST NUMBER 770 TO ALLOCATE BLOCK OF SIZE 5852
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9996158 and page at 0xb5388000 
adding page node for the page located at 0xb5388000 and pagePtr 0x9996158 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 129 
stepping through nodes 
 we have 124 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d560 and the new one at 0xb527d58c 
New page node points to data page 0xb5388000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 130 
RETURN ADDRESS IS 0xb5388000 


 REQUEST NUMBER 771 TO ALLOCATE BLOCK OF SIZE 315
Adjusted size to: 512
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536ca00
removing node 0xb537a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 772 TO ALLOCATE BLOCK OF SIZE 424
Adjusted size to: 512
removing node 0xb536803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536cc00
removing node 0xb536803c of size 512 


 REQUEST NUMBER 773 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
removing node 0xb537803c of size 64 
*** freeing page for lists of size 1
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c7c0
removing node 0xb537803c of size 32 


 REQUEST NUMBER 774 TO FREE BLOCK 0xb529e000  OF SIZE 832
coalescing blocks if possible
trying to coalesce a block at ptr 0xb529e000 and of size: 1024 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 5 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 1  - ends at 0xb537a03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb5384000 -- 0xb5386000| 

 COUNT: 1  - ends at 0xb538403c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 775 TO ALLOCATE BLOCK OF SIZE 1091
Adjusted size to: 2048
removing node 0xb538403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb538404c whose previous is 0xb538403c and size is 16 so prev+16 =0xb538404c 
RETURN ADDRESS 0xb538403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5383000
removing node 0xb538403c of size 2048 


 REQUEST NUMBER 776 TO ALLOCATE BLOCK OF SIZE 73
Adjusted size to: 128
removing node 0xb536803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
removing node 0xb536803c of size 256 
created new node at 0xb538a04c whose previous is 0xb538a03c and size is 16 so prev+16 =0xb538a04c 
RETURN ADDRESS 0xb538a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536ce00
removing node 0xb538a03c of size 128 


 REQUEST NUMBER 777 TO ALLOCATE BLOCK OF SIZE 83
Adjusted size to: 128
RETURN ADDRESS 0xb538a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536ce80
removing node 0xb538a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 778 TO ALLOCATE BLOCK OF SIZE 1251
Adjusted size to: 2048
RETURN ADDRESS 0xb538403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5383800
removing node 0xb538403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 779 TO FREE BLOCK 0xb52b4200  OF SIZE 23
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52b4200 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 2  - ends at 0xb537804c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb537a000 -- 0xb537c000| 

 COUNT: 1  - ends at 0xb537a03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 780 TO ALLOCATE BLOCK OF SIZE 319
Adjusted size to: 512
removing node 0xb537a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb537a04c whose previous is 0xb537a03c and size is 16 so prev+16 =0xb537a04c 
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529e000
removing node 0xb537a03c of size 512 


 REQUEST NUMBER 781 TO ALLOCATE BLOCK OF SIZE 95
Adjusted size to: 128
removing node 0xb536803c of size 256 
*** freeing page for lists of size 3
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536cf00
removing node 0xb536803c of size 128 


 REQUEST NUMBER 782 TO ALLOCATE BLOCK OF SIZE 282
Adjusted size to: 512
RETURN ADDRESS 0xb537a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb529e200
removing node 0xb537a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 783 TO ALLOCATE BLOCK OF SIZE 207
Adjusted size to: 256
RETURN ADDRESS (nil)
adding page node for the page located at 0xb537a000 and pagePtr 0x994b470 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 130 
stepping through nodes 
 we have 125 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d58c and the new one at 0xb527d5b8 
New page node points to data page 0xb537a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 131 
created new node at 0xb538404c whose previous is 0xb538403c and size is 16 so prev+16 =0xb538404c 
removing node 0xb538403c of size 4096 
created new node at 0xb538a04c whose previous is 0xb538a03c and size is 16 so prev+16 =0xb538a04c 
removing node 0xb538a03c of size 2048 
created new node at 0xb538c04c whose previous is 0xb538c03c and size is 16 so prev+16 =0xb538c04c 
removing node 0xb538c03c of size 1024 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
removing node 0xb538e03c of size 512 
created new node at 0xb539004c whose previous is 0xb539003c and size is 16 so prev+16 =0xb539004c 
RETURN ADDRESS IS ----------------------->>>>>0xb539003c-> 0xb537a000
removing node 0xb539003c of size 256 


 REQUEST NUMBER 784 TO FREE BLOCK 0xb536c800  OF SIZE 308
coalescing blocks if possible
trying to coalesce a block at ptr 0xb536c800 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 2  - ends at 0xb537804c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 3 -> 0xb5390000 -- 0xb5392000| 

 COUNT: 1  - ends at 0xb539003c 
	 4 -> 0xb538e000 -- 0xb5390000| 

 COUNT: 2  - ends at 0xb538e04c 
	 5 -> 0xb538c000 -- 0xb538e000| 

 COUNT: 1  - ends at 0xb538c03c 
	 6 -> 0xb538a000 -- 0xb538c000| 

 COUNT: 1  - ends at 0xb538a03c 
	 7 -> 0xb5384000 -- 0xb5386000| 

 COUNT: 1  - ends at 0xb538403c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 785 TO ALLOCATE BLOCK OF SIZE 484
Adjusted size to: 512
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb537a200
removing node 0xb538e03c of size 512 


 REQUEST NUMBER 786 TO ALLOCATE BLOCK OF SIZE 1241
Adjusted size to: 2048
RETURN ADDRESS 0xb538a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb537a800
removing node 0xb538a03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 787 TO ALLOCATE BLOCK OF SIZE 2001
Adjusted size to: 2048
removing node 0xb538403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb538404c whose previous is 0xb538403c and size is 16 so prev+16 =0xb538404c 
RETURN ADDRESS 0xb538403c
RETURN ADDRESS IS ----------------------->>>>> 0xb537b000
removing node 0xb538403c of size 2048 


 REQUEST NUMBER 788 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c7e0
removing node 0xb537803c of size 32 


 REQUEST NUMBER 789 TO ALLOCATE BLOCK OF SIZE 5042
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9996180 and page at 0xb538a000 
adding page node for the page located at 0xb538a000 and pagePtr 0x9996180 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 131 
stepping through nodes 
 we have 126 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d5b8 and the new one at 0xb527d5e4 
New page node points to data page 0xb538a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 132 
RETURN ADDRESS IS 0xb538a000 


 REQUEST NUMBER 790 TO ALLOCATE BLOCK OF SIZE 1017
Adjusted size to: 1024
RETURN ADDRESS 0xb538c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb537a400
removing node 0xb538c03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 791 TO ALLOCATE BLOCK OF SIZE 35
Adjusted size to: 64
removing node 0xb536803c of size 128 
*** freeing page for lists of size 2
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536cf80
removing node 0xb536803c of size 64 


 REQUEST NUMBER 792 TO ALLOCATE BLOCK OF SIZE 177
Adjusted size to: 256
RETURN ADDRESS 0xb539003c
RETURN ADDRESS IS ----------------------->>>>> 0xb537a100
removing node 0xb539003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 793 TO ALLOCATE BLOCK OF SIZE 4352
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9901658 and page at 0xb5390000 
adding page node for the page located at 0xb5390000 and pagePtr 0x9901658 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 132 
stepping through nodes 
 we have 127 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d5e4 and the new one at 0xb527d610 
New page node points to data page 0xb5390000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 133 
RETURN ADDRESS IS 0xb5390000 


 REQUEST NUMBER 794 TO ALLOCATE BLOCK OF SIZE 1346
Adjusted size to: 2048
RETURN ADDRESS 0xb538403c
RETURN ADDRESS IS ----------------------->>>>> 0xb537b800
removing node 0xb538403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 795 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4200
removing node 0xb537803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 796 TO FREE BLOCK 0xb5331000  OF SIZE 196
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5331000 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 1  - ends at 0xb536803c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 4 -> 0xb538e000 -- 0xb5390000| 

 COUNT: 1  - ends at 0xb538e03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 797 TO ALLOCATE BLOCK OF SIZE 4484
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9996190 and page at 0xb5384000 
adding page node for the page located at 0xb5384000 and pagePtr 0x9996190 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 133 
stepping through nodes 
 we have 128 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d610 and the new one at 0xb527d63c 
New page node points to data page 0xb5384000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 134 
RETURN ADDRESS IS 0xb5384000 


 REQUEST NUMBER 798 TO ALLOCATE BLOCK OF SIZE 73
Adjusted size to: 128
removing node 0xb537803c of size 256 
*** freeing page for lists of size 3
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331000
removing node 0xb537803c of size 128 


 REQUEST NUMBER 799 TO ALLOCATE BLOCK OF SIZE 575
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb538c000 and pagePtr 0x9996138 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 134 
stepping through nodes 
 we have 129 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d63c and the new one at 0xb527d668 
New page node points to data page 0xb538c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 135 
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
removing node 0xb539203c of size 4096 
created new node at 0xb539404c whose previous is 0xb539403c and size is 16 so prev+16 =0xb539404c 
removing node 0xb539403c of size 2048 
created new node at 0xb539604c whose previous is 0xb539603c and size is 16 so prev+16 =0xb539604c 
RETURN ADDRESS IS ----------------------->>>>>0xb539603c-> 0xb538c000
removing node 0xb539603c of size 1024 


 REQUEST NUMBER 800 TO ALLOCATE BLOCK OF SIZE 158
Adjusted size to: 256
removing node 0xb538e03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c800
removing node 0xb538e03c of size 256 


 REQUEST NUMBER 801 TO ALLOCATE BLOCK OF SIZE 253
Adjusted size to: 256
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c900
removing node 0xb538e03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 802 TO ALLOCATE BLOCK OF SIZE 1668
Adjusted size to: 2048
RETURN ADDRESS 0xb539403c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c800
removing node 0xb539403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 803 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
removing node 0xb536803c of size 64 
*** freeing page for lists of size 1
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536cfc0
removing node 0xb536803c of size 32 


 REQUEST NUMBER 804 TO FREE BLOCK 0xb52b4b40  OF SIZE 19
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52b4b40 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb536804c whose previous is 0xb536803c and size is 16 so prev+16 =0xb536804c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5368000 -- 0xb536a000| 

 COUNT: 2  - ends at 0xb536804c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5378000 -- 0xb537a000| 

 COUNT: 1  - ends at 0xb537803c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5396000 -- 0xb5398000| 

 COUNT: 1  - ends at 0xb539603c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb5392000 -- 0xb5394000| 

 COUNT: 1  - ends at 0xb539203c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 805 TO ALLOCATE BLOCK OF SIZE 3570
Adjusted size to: 4096
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb538d000
removing node 0xb539203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 806 TO ALLOCATE BLOCK OF SIZE 145
Adjusted size to: 256
removing node 0xb539603c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb539604c whose previous is 0xb539603c and size is 16 so prev+16 =0xb539604c 
removing node 0xb539603c of size 512 
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c400
removing node 0xb539203c of size 256 


 REQUEST NUMBER 807 TO ALLOCATE BLOCK OF SIZE 2759
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5394000 and pagePtr 0x9927020 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 135 
stepping through nodes 
 we have 130 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d668 and the new one at 0xb527d694 
New page node points to data page 0xb5394000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 136 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS IS ----------------------->>>>>0xb538e03c-> 0xb5394000
removing node 0xb538e03c of size 4096 


 REQUEST NUMBER 808 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
removing node 0xb537803c of size 128 
*** freeing page for lists of size 2
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5331080
removing node 0xb537803c of size 64 


 REQUEST NUMBER 809 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb536cfe0
removing node 0xb536803c of size 32 


 REQUEST NUMBER 810 TO ALLOCATE BLOCK OF SIZE 63
Adjusted size to: 64
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53310c0
removing node 0xb537803c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 811 TO ALLOCATE BLOCK OF SIZE 272
Adjusted size to: 512
RETURN ADDRESS 0xb539603c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c600
removing node 0xb539603c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 812 TO ALLOCATE BLOCK OF SIZE 36
Adjusted size to: 64
removing node 0xb539203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
removing node 0xb539203c of size 128 
created new node at 0xb539604c whose previous is 0xb539603c and size is 16 so prev+16 =0xb539604c 
RETURN ADDRESS 0xb539603c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c500
removing node 0xb539603c of size 64 


 REQUEST NUMBER 813 TO ALLOCATE BLOCK OF SIZE 1086
Adjusted size to: 2048
removing node 0xb538e03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395000
removing node 0xb538e03c of size 2048 


 REQUEST NUMBER 814 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
RETURN ADDRESS 0xb536803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4b40
removing node 0xb536803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 815 TO ALLOCATE BLOCK OF SIZE 847
Adjusted size to: 1024
removing node 0xb538e03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395800
removing node 0xb538e03c of size 1024 


 REQUEST NUMBER 816 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
removing node 0xb539603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb539604c whose previous is 0xb539603c and size is 16 so prev+16 =0xb539604c 
RETURN ADDRESS 0xb539603c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c540
removing node 0xb539603c of size 32 


 REQUEST NUMBER 817 TO ALLOCATE BLOCK OF SIZE 1930
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5368000 and pagePtr 0x996fed8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 136 
stepping through nodes 
 we have 131 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d694 and the new one at 0xb527d6c0 
New page node points to data page 0xb5368000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 137 
created new node at 0xb537804c whose previous is 0xb537803c and size is 16 so prev+16 =0xb537804c 
removing node 0xb537803c of size 4096 
created new node at 0xb539804c whose previous is 0xb539803c and size is 16 so prev+16 =0xb539804c 
RETURN ADDRESS IS ----------------------->>>>>0xb539803c-> 0xb5368000
removing node 0xb539803c of size 2048 


 REQUEST NUMBER 818 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb539603c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c560
removing node 0xb539603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 819 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb539203c of size 128 
*** freeing page for lists of size 2
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
removing node 0xb539203c of size 64 
created new node at 0xb539604c whose previous is 0xb539603c and size is 16 so prev+16 =0xb539604c 
RETURN ADDRESS 0xb539603c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c580
removing node 0xb539603c of size 32 


 REQUEST NUMBER 820 TO ALLOCATE BLOCK OF SIZE 308
Adjusted size to: 512
removing node 0xb538e03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395c00
removing node 0xb538e03c of size 512 


 REQUEST NUMBER 821 TO ALLOCATE BLOCK OF SIZE 521
Adjusted size to: 1024
removing node 0xb539803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb539804c whose previous is 0xb539803c and size is 16 so prev+16 =0xb539804c 
RETURN ADDRESS 0xb539803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368800
removing node 0xb539803c of size 1024 


 REQUEST NUMBER 822 TO ALLOCATE BLOCK OF SIZE 42
Adjusted size to: 64
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c5c0
removing node 0xb539203c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 823 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
RETURN ADDRESS 0xb539603c
RETURN ADDRESS IS ----------------------->>>>> 0xb538c5a0
removing node 0xb539603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 824 TO ALLOCATE BLOCK OF SIZE 172
Adjusted size to: 256
removing node 0xb538e03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395e00
removing node 0xb538e03c of size 256 


 REQUEST NUMBER 825 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
removing node 0xb538e03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
removing node 0xb538e03c of size 128 
created new node at 0xb539604c whose previous is 0xb539603c and size is 16 so prev+16 =0xb539604c 
removing node 0xb539603c of size 64 
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395f00
removing node 0xb539203c of size 32 


 REQUEST NUMBER 826 TO ALLOCATE BLOCK OF SIZE 48
Adjusted size to: 64
RETURN ADDRESS 0xb539603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395f40
removing node 0xb539603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 827 TO ALLOCATE BLOCK OF SIZE 2574
Adjusted size to: 4096
RETURN ADDRESS 0xb537803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5369000
removing node 0xb537803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 828 TO ALLOCATE BLOCK OF SIZE 1040
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5378000 and pagePtr 0x99af5e0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 137 
stepping through nodes 
 we have 132 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d6c0 and the new one at 0xb527d6ec 
New page node points to data page 0xb5378000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 138 
created new node at 0xb539604c whose previous is 0xb539603c and size is 16 so prev+16 =0xb539604c 
removing node 0xb539603c of size 4096 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb539a03c-> 0xb5378000
removing node 0xb539a03c of size 2048 


 REQUEST NUMBER 829 TO ALLOCATE BLOCK OF SIZE 7312
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99b1098 and page at 0xb539c000 
adding page node for the page located at 0xb539c000 and pagePtr 0x99b1098 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 138 
stepping through nodes 
 we have 133 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d6ec and the new one at 0xb527d718 
New page node points to data page 0xb539c000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 139 
RETURN ADDRESS IS 0xb539c000 


 REQUEST NUMBER 830 TO ALLOCATE BLOCK OF SIZE 2541
Adjusted size to: 4096
RETURN ADDRESS 0xb539603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5379000
removing node 0xb539603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 831 TO ALLOCATE BLOCK OF SIZE 5769
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x996fe98 and page at 0xb5396000 
adding page node for the page located at 0xb5396000 and pagePtr 0x996fe98 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 139 
stepping through nodes 
 we have 134 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d718 and the new one at 0xb527d744 
New page node points to data page 0xb5396000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 140 
RETURN ADDRESS IS 0xb5396000 


 REQUEST NUMBER 832 TO ALLOCATE BLOCK OF SIZE 2117
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb539e000 and pagePtr 0x99b4dc8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 140 
stepping through nodes 
 we have 135 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d744 and the new one at 0xb527d770 
New page node points to data page 0xb539e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 141 
created new node at 0xb53a004c whose previous is 0xb53a003c and size is 16 so prev+16 =0xb53a004c 
RETURN ADDRESS IS ----------------------->>>>>0xb53a003c-> 0xb539e000
removing node 0xb53a003c of size 4096 


 REQUEST NUMBER 833 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395f20
removing node 0xb539203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 834 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb538e03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
removing node 0xb538e03c of size 64 
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395f80
removing node 0xb539203c of size 32 


 REQUEST NUMBER 835 TO ALLOCATE BLOCK OF SIZE 3510
Adjusted size to: 4096
RETURN ADDRESS 0xb53a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb539f000
removing node 0xb53a003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 836 TO ALLOCATE BLOCK OF SIZE 58
Adjusted size to: 64
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395fc0
removing node 0xb538e03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 837 TO ALLOCATE BLOCK OF SIZE 222
Adjusted size to: 256
removing node 0xb539803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb539804c whose previous is 0xb539803c and size is 16 so prev+16 =0xb539804c 
removing node 0xb539803c of size 512 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368c00
removing node 0xb538e03c of size 256 


 REQUEST NUMBER 838 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5395fa0
removing node 0xb539203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 839 TO ALLOCATE BLOCK OF SIZE 88
Adjusted size to: 128
removing node 0xb538e03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368d00
removing node 0xb538e03c of size 128 


 REQUEST NUMBER 840 TO ALLOCATE BLOCK OF SIZE 110
Adjusted size to: 128
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368d80
removing node 0xb538e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 841 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb539803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb539804c whose previous is 0xb539803c and size is 16 so prev+16 =0xb539804c 
removing node 0xb539803c of size 256 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
removing node 0xb538e03c of size 128 
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
removing node 0xb539203c of size 64 
created new node at 0xb53a004c whose previous is 0xb53a003c and size is 16 so prev+16 =0xb53a004c 
RETURN ADDRESS 0xb53a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368e00
removing node 0xb53a003c of size 32 


 REQUEST NUMBER 842 TO ALLOCATE BLOCK OF SIZE 483
Adjusted size to: 512
removing node 0xb539a03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 1024 
created new node at 0xb53a204c whose previous is 0xb53a203c and size is 16 so prev+16 =0xb53a204c 
RETURN ADDRESS 0xb53a203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378800
removing node 0xb53a203c of size 512 


 REQUEST NUMBER 843 TO ALLOCATE BLOCK OF SIZE 522
Adjusted size to: 1024
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378c00
removing node 0xb539a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 844 TO ALLOCATE BLOCK OF SIZE 215
Adjusted size to: 256
RETURN ADDRESS 0xb539803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368f00
removing node 0xb539803c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 845 TO ALLOCATE BLOCK OF SIZE 4055
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5398000 and pagePtr 0x99af5f0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 141 
stepping through nodes 
 we have 136 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d770 and the new one at 0xb527d79c 
New page node points to data page 0xb5398000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 142 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb539a03c-> 0xb5398000
removing node 0xb539a03c of size 4096 


 REQUEST NUMBER 846 TO ALLOCATE BLOCK OF SIZE 3757
Adjusted size to: 4096
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5399000
removing node 0xb539a03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 847 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
RETURN ADDRESS 0xb53a003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368e20
removing node 0xb53a003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 848 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
removing node 0xb539203c of size 64 
*** freeing page for lists of size 1
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368e40
removing node 0xb539203c of size 32 


 REQUEST NUMBER 849 TO ALLOCATE BLOCK OF SIZE 169
Adjusted size to: 256
removing node 0xb53a203c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53a204c whose previous is 0xb53a203c and size is 16 so prev+16 =0xb53a204c 
RETURN ADDRESS 0xb53a203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378a00
removing node 0xb53a203c of size 256 


 REQUEST NUMBER 850 TO ALLOCATE BLOCK OF SIZE 1826
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53a0000 and pagePtr 0x99b6630 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 142 
stepping through nodes 
 we have 137 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d79c and the new one at 0xb527d7c8 
New page node points to data page 0xb53a0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 143 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 4096 
created new node at 0xb53a404c whose previous is 0xb53a403c and size is 16 so prev+16 =0xb53a404c 
RETURN ADDRESS IS ----------------------->>>>>0xb53a403c-> 0xb53a0000
removing node 0xb53a403c of size 2048 


 REQUEST NUMBER 851 TO ALLOCATE BLOCK OF SIZE 620
Adjusted size to: 1024
removing node 0xb53a403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53a404c whose previous is 0xb53a403c and size is 16 so prev+16 =0xb53a404c 
RETURN ADDRESS 0xb53a403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a0800
removing node 0xb53a403c of size 1024 


 REQUEST NUMBER 852 TO ALLOCATE BLOCK OF SIZE 7179
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99b9460 and page at 0xb53a6000 
adding page node for the page located at 0xb53a6000 and pagePtr 0x99b9460 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 143 
stepping through nodes 
 we have 138 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d7c8 and the new one at 0xb527d7f4 
New page node points to data page 0xb53a6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 144 
RETURN ADDRESS IS 0xb53a6000 


 REQUEST NUMBER 853 TO ALLOCATE BLOCK OF SIZE 253
Adjusted size to: 256
RETURN ADDRESS 0xb53a203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378b00
removing node 0xb53a203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 854 TO ALLOCATE BLOCK OF SIZE 1108
Adjusted size to: 2048
removing node 0xb539a03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a1000
removing node 0xb539a03c of size 2048 


 REQUEST NUMBER 855 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368e60
removing node 0xb539203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 856 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb538e03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
removing node 0xb538e03c of size 64 
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368e80
removing node 0xb539203c of size 32 


 REQUEST NUMBER 857 TO ALLOCATE BLOCK OF SIZE 2210
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53a2000 and pagePtr 0x99bb5f8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 144 
stepping through nodes 
 we have 139 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d7f4 and the new one at 0xb527d820 
New page node points to data page 0xb53a2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 145 
created new node at 0xb53a804c whose previous is 0xb53a803c and size is 16 so prev+16 =0xb53a804c 
RETURN ADDRESS IS ----------------------->>>>>0xb53a803c-> 0xb53a2000
removing node 0xb53a803c of size 4096 


 REQUEST NUMBER 858 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368ea0
removing node 0xb539203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 859 TO ALLOCATE BLOCK OF SIZE 312
Adjusted size to: 512
removing node 0xb53a403c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53a404c whose previous is 0xb53a403c and size is 16 so prev+16 =0xb53a404c 
RETURN ADDRESS 0xb53a403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a0c00
removing node 0xb53a403c of size 512 


 REQUEST NUMBER 860 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
removing node 0xb538e03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368ec0
removing node 0xb538e03c of size 32 


 REQUEST NUMBER 861 TO ALLOCATE BLOCK OF SIZE 1015
Adjusted size to: 1024
removing node 0xb539a03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a1800
removing node 0xb539a03c of size 1024 


 REQUEST NUMBER 862 TO ALLOCATE BLOCK OF SIZE 373
Adjusted size to: 512
RETURN ADDRESS 0xb53a403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a0e00
removing node 0xb53a403c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 863 TO ALLOCATE BLOCK OF SIZE 865
Adjusted size to: 1024
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a1c00
removing node 0xb539a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 864 TO ALLOCATE BLOCK OF SIZE 84
Adjusted size to: 128
removing node 0xb53a803c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53a804c whose previous is 0xb53a803c and size is 16 so prev+16 =0xb53a804c 
removing node 0xb53a803c of size 2048 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 1024 
created new node at 0xb53a404c whose previous is 0xb53a403c and size is 16 so prev+16 =0xb53a404c 
removing node 0xb53a403c of size 512 
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
removing node 0xb539203c of size 256 
created new node at 0xb53aa04c whose previous is 0xb53aa03c and size is 16 so prev+16 =0xb53aa04c 
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3000
removing node 0xb53aa03c of size 128 


 REQUEST NUMBER 865 TO ALLOCATE BLOCK OF SIZE 1919
Adjusted size to: 2048
RETURN ADDRESS 0xb53a803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3800
removing node 0xb53a803c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 866 TO FREE BLOCK 0xb5310e00  OF SIZE 357
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5310e00 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb53a404c whose previous is 0xb53a403c and size is 16 so prev+16 =0xb53a404c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb538e000 -- 0xb5390000| 

 COUNT: 1  - ends at 0xb538e03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb53aa000 -- 0xb53ac000| 

 COUNT: 1  - ends at 0xb53aa03c 
	 3 -> 0xb5392000 -- 0xb5394000| 

 COUNT: 1  - ends at 0xb539203c 
	 4 -> 0xb53a4000 -- 0xb53a6000| 

 COUNT: 2  - ends at 0xb53a404c 
	 5 -> 0xb539a000 -- 0xb539c000| 

 COUNT: 1  - ends at 0xb539a03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 867 TO ALLOCATE BLOCK OF SIZE 2800
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53a8000 and pagePtr 0x99bb608 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 145 
stepping through nodes 
 we have 140 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d820 and the new one at 0xb527d84c 
New page node points to data page 0xb53a8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 146 
created new node at 0xb53ac04c whose previous is 0xb53ac03c and size is 16 so prev+16 =0xb53ac04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53ac03c-> 0xb53a8000
removing node 0xb53ac03c of size 4096 


 REQUEST NUMBER 868 TO ALLOCATE BLOCK OF SIZE 7719
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9956038 and page at 0xb53ae000 
adding page node for the page located at 0xb53ae000 and pagePtr 0x9956038 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 146 
stepping through nodes 
 we have 141 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d84c and the new one at 0xb527d878 
New page node points to data page 0xb53ae000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 147 
RETURN ADDRESS IS 0xb53ae000 


 REQUEST NUMBER 869 TO ALLOCATE BLOCK OF SIZE 991
Adjusted size to: 1024
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3400
removing node 0xb539a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 870 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368ee0
removing node 0xb538e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 871 TO FREE BLOCK 0xb52ff000  OF SIZE 476
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52ff000 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb53a405c whose previous is 0xb53a404c and size is 16 so prev+16 =0xb53a405c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb53aa000 -- 0xb53ac000| 

 COUNT: 1  - ends at 0xb53aa03c 
	 3 -> 0xb5392000 -- 0xb5394000| 

 COUNT: 1  - ends at 0xb539203c 
	 4 -> 0xb53a4000 -- 0xb53a6000| 

 COUNT: 3  - ends at 0xb53a405c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb53ac000 -- 0xb53ae000| 

 COUNT: 1  - ends at 0xb53ac03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 872 TO ALLOCATE BLOCK OF SIZE 67
Adjusted size to: 128
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3080
removing node 0xb53aa03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 873 TO ALLOCATE BLOCK OF SIZE 332
Adjusted size to: 512
RETURN ADDRESS 0xb53a403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3200
removing node 0xb53a403c of size 512 


 REQUEST NUMBER 874 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb539203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb539204c whose previous is 0xb539203c and size is 16 so prev+16 =0xb539204c 
removing node 0xb539203c of size 128 
created new node at 0xb53aa04c whose previous is 0xb53aa03c and size is 16 so prev+16 =0xb53aa04c 
removing node 0xb53aa03c of size 64 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3100
removing node 0xb538e03c of size 32 


 REQUEST NUMBER 875 TO ALLOCATE BLOCK OF SIZE 3428
Adjusted size to: 4096
RETURN ADDRESS 0xb53ac03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a9000
removing node 0xb53ac03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 876 TO ALLOCATE BLOCK OF SIZE 158
Adjusted size to: 256
removing node 0xb53a403c of size 512 
created new node at 0xb53ac04c whose previous is 0xb53ac03c and size is 16 so prev+16 =0xb53ac04c 
RETURN ADDRESS 0xb53ac03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310e00
removing node 0xb53ac03c of size 256 


 REQUEST NUMBER 877 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3120
removing node 0xb538e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 878 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
removing node 0xb53aa03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53aa04c whose previous is 0xb53aa03c and size is 16 so prev+16 =0xb53aa04c 
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3140
removing node 0xb53aa03c of size 32 


 REQUEST NUMBER 879 TO ALLOCATE BLOCK OF SIZE 86
Adjusted size to: 128
RETURN ADDRESS 0xb539203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3180
removing node 0xb539203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 880 TO ALLOCATE BLOCK OF SIZE 2668
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5392000 and pagePtr 0x99b8ab8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 147 
stepping through nodes 
 we have 142 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d878 and the new one at 0xb527d8a4 
New page node points to data page 0xb5392000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 148 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS IS ----------------------->>>>>0xb538e03c-> 0xb5392000
removing node 0xb538e03c of size 4096 


 REQUEST NUMBER 881 TO ALLOCATE BLOCK OF SIZE 205
Adjusted size to: 256
RETURN ADDRESS 0xb53ac03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5310f00
removing node 0xb53ac03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 882 TO ALLOCATE BLOCK OF SIZE 233
Adjusted size to: 256
removing node 0xb53a403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53a404c whose previous is 0xb53a403c and size is 16 so prev+16 =0xb53a404c 
RETURN ADDRESS 0xb53a403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff000
removing node 0xb53a403c of size 256 


 REQUEST NUMBER 883 TO FREE BLOCK 0xb536c900  OF SIZE 253
coalescing blocks if possible
trying to coalesce a block at ptr 0xb536c900 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb53a404c whose previous is 0xb53a403c and size is 16 so prev+16 =0xb53a404c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53aa000 -- 0xb53ac000| 

 COUNT: 1  - ends at 0xb53aa03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb53a4000 -- 0xb53a6000| 

 COUNT: 2  - ends at 0xb53a404c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb538e000 -- 0xb5390000| 

 COUNT: 1  - ends at 0xb538e03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 884 TO ALLOCATE BLOCK OF SIZE 32
Adjusted size to: 32
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a3160
removing node 0xb53aa03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 885 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
removing node 0xb53a403c of size 256 
created new node at 0xb53aa04c whose previous is 0xb53aa03c and size is 16 so prev+16 =0xb53aa04c 
removing node 0xb53aa03c of size 128 
created new node at 0xb53ac04c whose previous is 0xb53ac03c and size is 16 so prev+16 =0xb53ac04c 
removing node 0xb53ac03c of size 64 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff100
removing node 0xb539a03c of size 32 


 REQUEST NUMBER 886 TO ALLOCATE BLOCK OF SIZE 52
Adjusted size to: 64
RETURN ADDRESS 0xb53ac03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff140
removing node 0xb53ac03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 887 TO ALLOCATE BLOCK OF SIZE 1945
Adjusted size to: 2048
removing node 0xb538e03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5393000
removing node 0xb538e03c of size 2048 


 REQUEST NUMBER 888 TO ALLOCATE BLOCK OF SIZE 1790
Adjusted size to: 2048
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5393800
removing node 0xb538e03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 889 TO ALLOCATE BLOCK OF SIZE 49
Adjusted size to: 64
removing node 0xb53aa03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53aa04c whose previous is 0xb53aa03c and size is 16 so prev+16 =0xb53aa04c 
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff180
removing node 0xb53aa03c of size 64 


 REQUEST NUMBER 890 TO FREE BLOCK 0xb52a1c00  OF SIZE 936
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52a1c00 and of size: 1024 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb539a000 -- 0xb539c000| 

 COUNT: 1  - ends at 0xb539a03c 
	 1 -> 0xb53aa000 -- 0xb53ac000| 

 COUNT: 1  - ends at 0xb53aa03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb53a4000 -- 0xb53a6000| 

 COUNT: 1  - ends at 0xb53a403c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb538e000 -- 0xb5390000| 

 COUNT: 1  - ends at 0xb538e03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 891 TO ALLOCATE BLOCK OF SIZE 7790
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f8d90 and page at 0xb53ac000 
adding page node for the page located at 0xb53ac000 and pagePtr 0x98f8d90 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 148 
stepping through nodes 
 we have 143 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d8a4 and the new one at 0xb527d8d0 
New page node points to data page 0xb53ac000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 149 
RETURN ADDRESS IS 0xb53ac000 


 REQUEST NUMBER 892 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff120
removing node 0xb539a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 893 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb53aa03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53aa04c whose previous is 0xb53aa03c and size is 16 so prev+16 =0xb53aa04c 
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff1c0
removing node 0xb53aa03c of size 32 


 REQUEST NUMBER 894 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff1e0
removing node 0xb53aa03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 895 TO ALLOCATE BLOCK OF SIZE 852
Adjusted size to: 1024
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1c00
removing node 0xb538e03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 896 TO ALLOCATE BLOCK OF SIZE 20
Adjusted size to: 32
removing node 0xb53a403c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53a404c whose previous is 0xb53a403c and size is 16 so prev+16 =0xb53a404c 
removing node 0xb53a403c of size 128 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
removing node 0xb538e03c of size 64 
created new node at 0xb53aa04c whose previous is 0xb53aa03c and size is 16 so prev+16 =0xb53aa04c 
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c900
removing node 0xb53aa03c of size 32 


 REQUEST NUMBER 897 TO ALLOCATE BLOCK OF SIZE 118
Adjusted size to: 128
RETURN ADDRESS 0xb53a403c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c980
removing node 0xb53a403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 898 TO ALLOCATE BLOCK OF SIZE 455
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53a4000 and pagePtr 0x99b0c70 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 149 
stepping through nodes 
 we have 144 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d8d0 and the new one at 0xb527d8fc 
New page node points to data page 0xb53a4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 150 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 4096 
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 2048 
created new node at 0xb53b204c whose previous is 0xb53b203c and size is 16 so prev+16 =0xb53b204c 
removing node 0xb53b203c of size 1024 
created new node at 0xb53b404c whose previous is 0xb53b403c and size is 16 so prev+16 =0xb53b404c 
RETURN ADDRESS IS ----------------------->>>>>0xb53b403c-> 0xb53a4000
removing node 0xb53b403c of size 512 


 REQUEST NUMBER 899 TO ALLOCATE BLOCK OF SIZE 6140
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99acc70 and page at 0xb53b6000 
adding page node for the page located at 0xb53b6000 and pagePtr 0x99acc70 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 150 
stepping through nodes 
 we have 145 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d8fc and the new one at 0xb527d928 
New page node points to data page 0xb53b6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 151 
RETURN ADDRESS IS 0xb53b6000 


 REQUEST NUMBER 900 TO ALLOCATE BLOCK OF SIZE 83
Adjusted size to: 128
removing node 0xb53b403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53b404c whose previous is 0xb53b403c and size is 16 so prev+16 =0xb53b404c 
removing node 0xb53b403c of size 256 
created new node at 0xb53b804c whose previous is 0xb53b803c and size is 16 so prev+16 =0xb53b804c 
RETURN ADDRESS 0xb53b803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4200
removing node 0xb53b803c of size 128 


 REQUEST NUMBER 901 TO ALLOCATE BLOCK OF SIZE 925
Adjusted size to: 1024
RETURN ADDRESS 0xb53b203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4400
removing node 0xb53b203c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 902 TO ALLOCATE BLOCK OF SIZE 2614
Adjusted size to: 4096
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a5000
removing node 0xb539a03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 903 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c940
removing node 0xb538e03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 904 TO ALLOCATE BLOCK OF SIZE 217
Adjusted size to: 256
RETURN ADDRESS 0xb53b403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4300
removing node 0xb53b403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 905 TO ALLOCATE BLOCK OF SIZE 5321
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9918aa8 and page at 0xb53b4000 
adding page node for the page located at 0xb53b4000 and pagePtr 0x9918aa8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 151 
stepping through nodes 
 we have 146 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d928 and the new one at 0xb527d954 
New page node points to data page 0xb53b4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 152 
RETURN ADDRESS IS 0xb53b4000 


 REQUEST NUMBER 906 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb53aa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb536c920
removing node 0xb53aa03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 907 TO ALLOCATE BLOCK OF SIZE 2409
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53aa000 and pagePtr 0x9918a98 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 152 
stepping through nodes 
 we have 147 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d954 and the new one at 0xb527d980 
New page node points to data page 0xb53aa000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 153 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS IS ----------------------->>>>>0xb538e03c-> 0xb53aa000
removing node 0xb538e03c of size 4096 


 REQUEST NUMBER 908 TO ALLOCATE BLOCK OF SIZE 129
Adjusted size to: 256
removing node 0xb53b003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 1024 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 512 
created new node at 0xb53b204c whose previous is 0xb53b203c and size is 16 so prev+16 =0xb53b204c 
RETURN ADDRESS 0xb53b203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4800
removing node 0xb53b203c of size 256 


 REQUEST NUMBER 909 TO ALLOCATE BLOCK OF SIZE 370
Adjusted size to: 512
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4a00
removing node 0xb539a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 910 TO ALLOCATE BLOCK OF SIZE 2594
Adjusted size to: 4096
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ab000
removing node 0xb538e03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 911 TO ALLOCATE BLOCK OF SIZE 82
Adjusted size to: 128
RETURN ADDRESS 0xb53b803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4280
removing node 0xb53b803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 912 TO ALLOCATE BLOCK OF SIZE 2399
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53b8000 and pagePtr 0x99acc80 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 153 
stepping through nodes 
 we have 148 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d980 and the new one at 0xb527d9ac 
New page node points to data page 0xb53b8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 154 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS IS ----------------------->>>>>0xb538e03c-> 0xb53b8000
removing node 0xb538e03c of size 4096 


 REQUEST NUMBER 913 TO ALLOCATE BLOCK OF SIZE 200
Adjusted size to: 256
RETURN ADDRESS 0xb53b203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4900
removing node 0xb53b203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 914 TO ALLOCATE BLOCK OF SIZE 48
Adjusted size to: 64
removing node 0xb53b003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 512 
created new node at 0xb53b204c whose previous is 0xb53b203c and size is 16 so prev+16 =0xb53b204c 
removing node 0xb53b203c of size 256 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 128 
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4c00
removing node 0xb53ba03c of size 64 


 REQUEST NUMBER 915 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb53ba03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4c40
removing node 0xb53ba03c of size 32 


 REQUEST NUMBER 916 TO ALLOCATE BLOCK OF SIZE 659
Adjusted size to: 1024
removing node 0xb538e03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
removing node 0xb538e03c of size 2048 
created new node at 0xb53bc04c whose previous is 0xb53bc03c and size is 16 so prev+16 =0xb53bc04c 
RETURN ADDRESS 0xb53bc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53b9000
removing node 0xb53bc03c of size 1024 


 REQUEST NUMBER 917 TO ALLOCATE BLOCK OF SIZE 54
Adjusted size to: 64
removing node 0xb539a03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4c80
removing node 0xb539a03c of size 64 


 REQUEST NUMBER 918 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4c60
removing node 0xb53ba03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 919 TO ALLOCATE BLOCK OF SIZE 630
Adjusted size to: 1024
RETURN ADDRESS 0xb53bc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53b9400
removing node 0xb53bc03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 920 TO ALLOCATE BLOCK OF SIZE 176
Adjusted size to: 256
RETURN ADDRESS 0xb53b203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4d00
removing node 0xb53b203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 921 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb539a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4cc0
removing node 0xb539a03c of size 32 


 REQUEST NUMBER 922 TO ALLOCATE BLOCK OF SIZE 932
Adjusted size to: 1024
removing node 0xb538e03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53b9800
removing node 0xb538e03c of size 1024 


 REQUEST NUMBER 923 TO ALLOCATE BLOCK OF SIZE 1131
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53b2000 and pagePtr 0x99ca3b0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 154 
stepping through nodes 
 we have 149 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d9ac and the new one at 0xb527d9d8 
New page node points to data page 0xb53b2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 155 
created new node at 0xb53bc04c whose previous is 0xb53bc03c and size is 16 so prev+16 =0xb53bc04c 
removing node 0xb53bc03c of size 4096 
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53ba03c-> 0xb53b2000
removing node 0xb53ba03c of size 2048 


 REQUEST NUMBER 924 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4ce0
removing node 0xb539a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 925 TO ALLOCATE BLOCK OF SIZE 40
Adjusted size to: 64
removing node 0xb53b003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 256 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 128 
created new node at 0xb53be04c whose previous is 0xb53be03c and size is 16 so prev+16 =0xb53be04c 
RETURN ADDRESS 0xb53be03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4e00
removing node 0xb53be03c of size 64 


 REQUEST NUMBER 926 TO ALLOCATE BLOCK OF SIZE 261
Adjusted size to: 512
removing node 0xb538e03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53b9c00
removing node 0xb538e03c of size 512 


 REQUEST NUMBER 927 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb53be03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53be04c whose previous is 0xb53be03c and size is 16 so prev+16 =0xb53be04c 
RETURN ADDRESS 0xb53be03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4e40
removing node 0xb53be03c of size 32 


 REQUEST NUMBER 928 TO ALLOCATE BLOCK OF SIZE 3490
Adjusted size to: 4096
RETURN ADDRESS 0xb53bc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53b3000
removing node 0xb53bc03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 929 TO ALLOCATE BLOCK OF SIZE 1383
Adjusted size to: 2048
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53b2800
removing node 0xb53ba03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 930 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
RETURN ADDRESS 0xb53be03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4e60
removing node 0xb53be03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 931 TO ALLOCATE BLOCK OF SIZE 1092
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53be000 and pagePtr 0x99cb230 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 155 
stepping through nodes 
 we have 150 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527d9d8 and the new one at 0xb527da04 
New page node points to data page 0xb53be000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 156 
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
removing node 0xb53ba03c of size 4096 
created new node at 0xb53bc04c whose previous is 0xb53bc03c and size is 16 so prev+16 =0xb53bc04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53bc03c-> 0xb53be000
removing node 0xb53bc03c of size 2048 


 REQUEST NUMBER 932 TO ALLOCATE BLOCK OF SIZE 119
Adjusted size to: 128
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4e80
removing node 0xb539a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 933 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb53b003c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 128 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 64 
created new node at 0xb53c004c whose previous is 0xb53c003c and size is 16 so prev+16 =0xb53c004c 
RETURN ADDRESS 0xb53c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4f00
removing node 0xb53c003c of size 32 


 REQUEST NUMBER 934 TO ALLOCATE BLOCK OF SIZE 4499
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99ccba8 and page at 0xb53c2000 
adding page node for the page located at 0xb53c2000 and pagePtr 0x99ccba8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 156 
stepping through nodes 
 we have 151 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527da04 and the new one at 0xb527da30 
New page node points to data page 0xb53c2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 157 
RETURN ADDRESS IS 0xb53c2000 


 REQUEST NUMBER 935 TO ALLOCATE BLOCK OF SIZE 20
Adjusted size to: 32
RETURN ADDRESS 0xb53c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4f20
removing node 0xb53c003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 936 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb539a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4f40
removing node 0xb539a03c of size 32 


 REQUEST NUMBER 937 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4f60
removing node 0xb539a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 938 TO ALLOCATE BLOCK OF SIZE 34
Adjusted size to: 64
removing node 0xb53b003c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4f80
removing node 0xb53b003c of size 64 


 REQUEST NUMBER 939 TO FREE BLOCK 0xb5321c00  OF SIZE 151
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5321c00 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb539a000 -- 0xb539c000| 

 COUNT: 1  - ends at 0xb539a03c 
	 4 -> 0xb538e000 -- 0xb5390000| 

 COUNT: 1  - ends at 0xb538e03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb53bc000 -- 0xb53be000| 

 COUNT: 1  - ends at 0xb53bc03c 
	 7 -> 0xb53ba000 -- 0xb53bc000| 

 COUNT: 1  - ends at 0xb53ba03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 940 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
removing node 0xb53b003c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4fc0
removing node 0xb53b003c of size 32 


 REQUEST NUMBER 941 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4fe0
removing node 0xb53b003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 942 TO ALLOCATE BLOCK OF SIZE 927
Adjusted size to: 1024
removing node 0xb53bc03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53bc04c whose previous is 0xb53bc03c and size is 16 so prev+16 =0xb53bc04c 
RETURN ADDRESS 0xb53bc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53be800
removing node 0xb53bc03c of size 1024 


 REQUEST NUMBER 943 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
removing node 0xb539a03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 128 
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 64 
created new node at 0xb53c004c whose previous is 0xb53c003c and size is 16 so prev+16 =0xb53c004c 
RETURN ADDRESS 0xb53c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321c00
removing node 0xb53c003c of size 32 


 REQUEST NUMBER 944 TO ALLOCATE BLOCK OF SIZE 3311
Adjusted size to: 4096
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bf000
removing node 0xb53ba03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 945 TO ALLOCATE BLOCK OF SIZE 352
Adjusted size to: 512
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53b9e00
removing node 0xb538e03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 946 TO ALLOCATE BLOCK OF SIZE 123
Adjusted size to: 128
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321c80
removing node 0xb539a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 947 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
RETURN ADDRESS 0xb53c003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321c20
removing node 0xb53c003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 948 TO ALLOCATE BLOCK OF SIZE 3067
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53c0000 and pagePtr 0x99ccb88 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 157 
stepping through nodes 
 we have 152 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527da30 and the new one at 0xb527da5c 
New page node points to data page 0xb53c0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 158 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb539a03c-> 0xb53c0000
removing node 0xb539a03c of size 4096 


 REQUEST NUMBER 949 TO ALLOCATE BLOCK OF SIZE 412
Adjusted size to: 512
removing node 0xb53bc03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53bc04c whose previous is 0xb53bc03c and size is 16 so prev+16 =0xb53bc04c 
RETURN ADDRESS 0xb53bc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bec00
removing node 0xb53bc03c of size 512 


 REQUEST NUMBER 950 TO ALLOCATE BLOCK OF SIZE 2126
Adjusted size to: 4096
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53c1000
removing node 0xb539a03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 951 TO ALLOCATE BLOCK OF SIZE 299
Adjusted size to: 512
RETURN ADDRESS 0xb53bc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bee00
removing node 0xb53bc03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 952 TO ALLOCATE BLOCK OF SIZE 1019
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53bc000 and pagePtr 0x99cad90 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 158 
stepping through nodes 
 we have 153 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527da5c and the new one at 0xb527da88 
New page node points to data page 0xb53bc000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 159 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 4096 
created new node at 0xb538e04c whose previous is 0xb538e03c and size is 16 so prev+16 =0xb538e04c 
removing node 0xb538e03c of size 2048 
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53ba03c-> 0xb53bc000
removing node 0xb53ba03c of size 1024 


 REQUEST NUMBER 953 TO ALLOCATE BLOCK OF SIZE 90
Adjusted size to: 128
removing node 0xb53ba03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
removing node 0xb53ba03c of size 512 
created new node at 0xb53c404c whose previous is 0xb53c403c and size is 16 so prev+16 =0xb53c404c 
removing node 0xb53c403c of size 256 
created new node at 0xb53c604c whose previous is 0xb53c603c and size is 16 so prev+16 =0xb53c604c 
RETURN ADDRESS 0xb53c603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bc400
removing node 0xb53c603c of size 128 


 REQUEST NUMBER 954 TO ALLOCATE BLOCK OF SIZE 150
Adjusted size to: 256
RETURN ADDRESS 0xb53c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bc500
removing node 0xb53c403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 955 TO ALLOCATE BLOCK OF SIZE 251
Adjusted size to: 256
removing node 0xb53ba03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bc600
removing node 0xb53ba03c of size 256 


 REQUEST NUMBER 956 TO ALLOCATE BLOCK OF SIZE 20
Adjusted size to: 32
removing node 0xb53b003c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321c40
removing node 0xb53b003c of size 32 


 REQUEST NUMBER 957 TO ALLOCATE BLOCK OF SIZE 2149
Adjusted size to: 4096
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bd000
removing node 0xb539a03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 958 TO ALLOCATE BLOCK OF SIZE 171
Adjusted size to: 256
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bc700
removing node 0xb53ba03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 959 TO ALLOCATE BLOCK OF SIZE 1112
Adjusted size to: 2048
RETURN ADDRESS 0xb538e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bc800
removing node 0xb538e03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 960 TO ALLOCATE BLOCK OF SIZE 3452
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb538e000 and pagePtr 0x995d570 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 159 
stepping through nodes 
 we have 154 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527da88 and the new one at 0xb527dab4 
New page node points to data page 0xb538e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 160 
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53ba03c-> 0xb538e000
removing node 0xb53ba03c of size 4096 


 REQUEST NUMBER 961 TO FREE BLOCK 0xb5337c00  OF SIZE 526
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5337c00 and of size: 1024 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb53c6000 -- 0xb53c8000| 

 COUNT: 1  - ends at 0xb53c603c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb539a000 -- 0xb539c000| 

 COUNT: 1  - ends at 0xb539a03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb53ba000 -- 0xb53bc000| 

 COUNT: 1  - ends at 0xb53ba03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 962 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321c60
removing node 0xb53b003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 963 TO ALLOCATE BLOCK OF SIZE 139
Adjusted size to: 256
removing node 0xb539a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 512 
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337c00
removing node 0xb53b003c of size 256 


 REQUEST NUMBER 964 TO ALLOCATE BLOCK OF SIZE 49
Adjusted size to: 64
removing node 0xb53c603c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53c604c whose previous is 0xb53c603c and size is 16 so prev+16 =0xb53c604c 
RETURN ADDRESS 0xb53c603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bc480
removing node 0xb53c603c of size 64 


 REQUEST NUMBER 965 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb53c603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53c604c whose previous is 0xb53c603c and size is 16 so prev+16 =0xb53c604c 
RETURN ADDRESS 0xb53c603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bc4c0
removing node 0xb53c603c of size 32 


 REQUEST NUMBER 966 TO FREE BLOCK 0xb52bfb40  OF SIZE 16
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52bfb40 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb53c604c whose previous is 0xb53c603c and size is 16 so prev+16 =0xb53c604c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53c6000 -- 0xb53c8000| 

 COUNT: 2  - ends at 0xb53c604c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 4 -> 0xb539a000 -- 0xb539c000| 

 COUNT: 1  - ends at 0xb539a03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb53ba000 -- 0xb53bc000| 

 COUNT: 1  - ends at 0xb53ba03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 967 TO ALLOCATE BLOCK OF SIZE 41
Adjusted size to: 64
removing node 0xb53b003c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 128 
created new node at 0xb53c404c whose previous is 0xb53c403c and size is 16 so prev+16 =0xb53c404c 
RETURN ADDRESS 0xb53c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337d00
removing node 0xb53c403c of size 64 


 REQUEST NUMBER 968 TO ALLOCATE BLOCK OF SIZE 447
Adjusted size to: 512
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337e00
removing node 0xb539a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 969 TO ALLOCATE BLOCK OF SIZE 138
Adjusted size to: 256
removing node 0xb53ba03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
removing node 0xb53ba03c of size 2048 
created new node at 0xb539a04c whose previous is 0xb539a03c and size is 16 so prev+16 =0xb539a04c 
removing node 0xb539a03c of size 1024 
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
removing node 0xb53c803c of size 512 
created new node at 0xb53ca04c whose previous is 0xb53ca03c and size is 16 so prev+16 =0xb53ca04c 
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538f000
removing node 0xb53ca03c of size 256 


 REQUEST NUMBER 970 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb53c603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53bc4e0
removing node 0xb53c603c of size 32 


 REQUEST NUMBER 971 TO ALLOCATE BLOCK OF SIZE 71
Adjusted size to: 128
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337d80
removing node 0xb53b003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 972 TO ALLOCATE BLOCK OF SIZE 649
Adjusted size to: 1024
RETURN ADDRESS 0xb539a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538f400
removing node 0xb539a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 973 TO ALLOCATE BLOCK OF SIZE 3457
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb539a000 and pagePtr 0x995d550 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 160 
stepping through nodes 
 we have 155 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dab4 and the new one at 0xb527dae0 
New page node points to data page 0xb539a000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 161 
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
RETURN ADDRESS IS ----------------------->>>>>0xb53b003c-> 0xb539a000
removing node 0xb53b003c of size 4096 


 REQUEST NUMBER 974 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
RETURN ADDRESS 0xb53c603c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bfb40
removing node 0xb53c603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 975 TO ALLOCATE BLOCK OF SIZE 101
Adjusted size to: 128
removing node 0xb53ca03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53ca04c whose previous is 0xb53ca03c and size is 16 so prev+16 =0xb53ca04c 
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538f100
removing node 0xb53ca03c of size 128 


 REQUEST NUMBER 976 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
removing node 0xb53c403c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53c404c whose previous is 0xb53c403c and size is 16 so prev+16 =0xb53c404c 
RETURN ADDRESS 0xb53c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337d40
removing node 0xb53c403c of size 32 


 REQUEST NUMBER 977 TO ALLOCATE BLOCK OF SIZE 296
Adjusted size to: 512
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb538f200
removing node 0xb53c803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 978 TO ALLOCATE BLOCK OF SIZE 84
Adjusted size to: 128
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538f180
removing node 0xb53ca03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 979 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
RETURN ADDRESS 0xb53c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337d60
removing node 0xb53c403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 980 TO FREE BLOCK 0xb5327800  OF SIZE 69
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5327800 and of size: 128 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb53c4000 -- 0xb53c6000| 

 COUNT: 1  - ends at 0xb53c403c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb53ba000 -- 0xb53bc000| 

 COUNT: 1  - ends at 0xb53ba03c 
	 7 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 981 TO ALLOCATE BLOCK OF SIZE 288
Adjusted size to: 512
removing node 0xb53ba03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
removing node 0xb53ba03c of size 1024 
created new node at 0xb53ca04c whose previous is 0xb53ca03c and size is 16 so prev+16 =0xb53ca04c 
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538f800
removing node 0xb53ca03c of size 512 


 REQUEST NUMBER 982 TO ALLOCATE BLOCK OF SIZE 88
Adjusted size to: 128
RETURN ADDRESS 0xb53c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327800
removing node 0xb53c403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 983 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb53ca03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53ca04c whose previous is 0xb53ca03c and size is 16 so prev+16 =0xb53ca04c 
removing node 0xb53ca03c of size 256 
created new node at 0xb53c404c whose previous is 0xb53c403c and size is 16 so prev+16 =0xb53c404c 
removing node 0xb53c403c of size 128 
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
removing node 0xb53c803c of size 64 
created new node at 0xb53c604c whose previous is 0xb53c603c and size is 16 so prev+16 =0xb53c604c 
RETURN ADDRESS 0xb53c603c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fa00
removing node 0xb53c603c of size 32 


 REQUEST NUMBER 984 TO ALLOCATE BLOCK OF SIZE 3151
Adjusted size to: 4096
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb539b000
removing node 0xb53b003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 985 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fa40
removing node 0xb53c803c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 986 TO ALLOCATE BLOCK OF SIZE 82
Adjusted size to: 128
RETURN ADDRESS 0xb53c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fa80
removing node 0xb53c403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 987 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
RETURN ADDRESS 0xb53c603c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fa20
removing node 0xb53c603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 988 TO ALLOCATE BLOCK OF SIZE 2263
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53c6000 and pagePtr 0x9907cf8 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 161 
stepping through nodes 
 we have 156 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dae0 and the new one at 0xb527db0c 
New page node points to data page 0xb53c6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 162 
created new node at 0xb53c404c whose previous is 0xb53c403c and size is 16 so prev+16 =0xb53c404c 
RETURN ADDRESS IS ----------------------->>>>>0xb53c403c-> 0xb53c6000
removing node 0xb53c403c of size 4096 


 REQUEST NUMBER 989 TO ALLOCATE BLOCK OF SIZE 427
Adjusted size to: 512
removing node 0xb53ba03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fc00
removing node 0xb53ba03c of size 512 


 REQUEST NUMBER 990 TO ALLOCATE BLOCK OF SIZE 3066
Adjusted size to: 4096
RETURN ADDRESS 0xb53c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53c7000
removing node 0xb53c403c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 991 TO ALLOCATE BLOCK OF SIZE 3741
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53c4000 and pagePtr 0x9918a88 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 162 
stepping through nodes 
 we have 157 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527db0c and the new one at 0xb527db38 
New page node points to data page 0xb53c4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 163 
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
RETURN ADDRESS IS ----------------------->>>>>0xb53c803c-> 0xb53c4000
removing node 0xb53c803c of size 4096 


 REQUEST NUMBER 992 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb53ca03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53ca04c whose previous is 0xb53ca03c and size is 16 so prev+16 =0xb53ca04c 
removing node 0xb53ca03c of size 128 
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 64 
created new node at 0xb53cc04c whose previous is 0xb53cc03c and size is 16 so prev+16 =0xb53cc04c 
RETURN ADDRESS 0xb53cc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fb00
removing node 0xb53cc03c of size 32 


 REQUEST NUMBER 993 TO ALLOCATE BLOCK OF SIZE 1080
Adjusted size to: 2048
removing node 0xb53c803c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53c5000
removing node 0xb53c803c of size 2048 


 REQUEST NUMBER 994 TO ALLOCATE BLOCK OF SIZE 467
Adjusted size to: 512
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fe00
removing node 0xb53ba03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 995 TO ALLOCATE BLOCK OF SIZE 217
Adjusted size to: 256
removing node 0xb53c803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
removing node 0xb53c803c of size 1024 
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
removing node 0xb53ba03c of size 512 
created new node at 0xb53ce04c whose previous is 0xb53ce03c and size is 16 so prev+16 =0xb53ce04c 
RETURN ADDRESS 0xb53ce03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53c5800
removing node 0xb53ce03c of size 256 


 REQUEST NUMBER 996 TO ALLOCATE BLOCK OF SIZE 150
Adjusted size to: 256
RETURN ADDRESS 0xb53ce03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53c5900
removing node 0xb53ce03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 997 TO ALLOCATE BLOCK OF SIZE 837
Adjusted size to: 1024
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53c5c00
removing node 0xb53c803c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 998 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb53cc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fb20
removing node 0xb53cc03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 999 TO ALLOCATE BLOCK OF SIZE 1821
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53cc000 and pagePtr 0x9907d38 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 163 
stepping through nodes 
 we have 158 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527db38 and the new one at 0xb527db64 
New page node points to data page 0xb53cc000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 164 
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
removing node 0xb53c803c of size 4096 
created new node at 0xb53ce04c whose previous is 0xb53ce03c and size is 16 so prev+16 =0xb53ce04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53ce03c-> 0xb53cc000
removing node 0xb53ce03c of size 2048 


 REQUEST NUMBER 1000 TO ALLOCATE BLOCK OF SIZE 66
Adjusted size to: 128
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fb80
removing node 0xb53ca03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1001 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
removing node 0xb53b003c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fb40
removing node 0xb53b003c of size 32 


 REQUEST NUMBER 1002 TO FREE BLOCK 0xb52ff000  OF SIZE 233
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52ff000 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb53ca000 -- 0xb53cc000| 

 COUNT: 1  - ends at 0xb53ca03c 
	 4 -> 0xb53ba000 -- 0xb53bc000| 

 COUNT: 1  - ends at 0xb53ba03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb53ce000 -- 0xb53d0000| 

 COUNT: 1  - ends at 0xb53ce03c 
	 7 -> 0xb53c8000 -- 0xb53ca000| 

 COUNT: 1  - ends at 0xb53c803c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1003 TO ALLOCATE BLOCK OF SIZE 130
Adjusted size to: 256
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ff000
removing node 0xb53ca03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1004 TO ALLOCATE BLOCK OF SIZE 2753
Adjusted size to: 4096
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cd000
removing node 0xb53c803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1005 TO ALLOCATE BLOCK OF SIZE 574
Adjusted size to: 1024
removing node 0xb53ce03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53ce04c whose previous is 0xb53ce03c and size is 16 so prev+16 =0xb53ce04c 
RETURN ADDRESS 0xb53ce03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cc800
removing node 0xb53ce03c of size 1024 


 REQUEST NUMBER 1006 TO ALLOCATE BLOCK OF SIZE 233
Adjusted size to: 256
removing node 0xb53ba03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53ba04c whose previous is 0xb53ba03c and size is 16 so prev+16 =0xb53ba04c 
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53c5a00
removing node 0xb53ba03c of size 256 


 REQUEST NUMBER 1007 TO ALLOCATE BLOCK OF SIZE 997
Adjusted size to: 1024
RETURN ADDRESS 0xb53ce03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ccc00
removing node 0xb53ce03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1008 TO ALLOCATE BLOCK OF SIZE 408
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53ce000 and pagePtr 0x99d7660 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 164 
stepping through nodes 
 we have 159 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527db64 and the new one at 0xb527db90 
New page node points to data page 0xb53ce000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 165 
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
removing node 0xb53c803c of size 4096 
created new node at 0xb53ca04c whose previous is 0xb53ca03c and size is 16 so prev+16 =0xb53ca04c 
removing node 0xb53ca03c of size 2048 
created new node at 0xb53d004c whose previous is 0xb53d003c and size is 16 so prev+16 =0xb53d004c 
removing node 0xb53d003c of size 1024 
created new node at 0xb53d204c whose previous is 0xb53d203c and size is 16 so prev+16 =0xb53d204c 
RETURN ADDRESS IS ----------------------->>>>>0xb53d203c-> 0xb53ce000
removing node 0xb53d203c of size 512 


 REQUEST NUMBER 1009 TO FREE BLOCK 0xb52d8cc0  OF SIZE 60
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52d8cc0 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 1 -> 0xb53d4000 -- 0xb53d6000| 

 COUNT: 1  - ends at 0xb53d403c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb53ba000 -- 0xb53bc000| 

 COUNT: 1  - ends at 0xb53ba03c 
	 4 -> 0xb53d2000 -- 0xb53d4000| 

 COUNT: 1  - ends at 0xb53d203c 
	 5 -> 0xb53d0000 -- 0xb53d2000| 

 COUNT: 1  - ends at 0xb53d003c 
	 6 -> 0xb53ca000 -- 0xb53cc000| 

 COUNT: 1  - ends at 0xb53ca03c 
	 7 -> 0xb53c8000 -- 0xb53ca000| 

 COUNT: 1  - ends at 0xb53c803c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1010 TO ALLOCATE BLOCK OF SIZE 135
Adjusted size to: 256
RETURN ADDRESS 0xb53ba03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53c5b00
removing node 0xb53ba03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1011 TO ALLOCATE BLOCK OF SIZE 1677
Adjusted size to: 2048
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ce800
removing node 0xb53ca03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1012 TO FREE BLOCK 0xb52c4000  OF SIZE 7032
removing pageNode to page with ptr 0x98f8a88 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
out of loop 
IN LOOPP 0xb527c564 -> 0xb527c590 (next) 
IN LOOPP 0xb527c590 -> 0xb527c5bc (next) 
IN LOOPP 0xb527c5bc -> 0xb527c5e8 (next) 
IN LOOPP 0xb527c5e8 -> 0xb527c614 (next) 
IN LOOPP 0xb527c614 -> 0xb527c640 (next) 
IN LOOPP 0xb527c640 -> 0xb527c66c (next) 
IN LOOPP 0xb527c66c -> 0xb527c698 (next) 
IN LOOPP 0xb527c698 -> 0xb527c6c4 (next) 
IN LOOPP 0xb527c6c4 -> 0xb527c6f0 (next) 
IN LOOPP 0xb527c6f0 -> 0xb527c71c (next) 
IN LOOPP 0xb527c71c -> 0xb527c748 (next) 
IN LOOPP 0xb527c748 -> 0xb527c774 (next) 
IN LOOPP 0xb527c774 -> 0xb527c7a0 (next) 
IN LOOPP 0xb527c7a0 -> 0xb527c7cc (next) 
IN LOOPP 0xb527c7cc -> 0xb527c7f8 (next) 
IN LOOPP 0xb527c7f8 -> 0xb527c824 (next) 
IN LOOPP 0xb527c824 -> 0xb527c850 (next) 
IN LOOPP 0xb527c850 -> 0xb527c87c (next) 
IN LOOPP 0xb527c87c -> 0xb527c8a8 (next) 
IN LOOPP 0xb527c8a8 -> 0xb527c8d4 (next) 
IN LOOPP 0xb527c8d4 -> 0xb527c900 (next) 
IN LOOPP 0xb527c900 -> 0xb527c92c (next) 
IN LOOPP 0xb527c92c -> 0xb527c958 (next) 
IN LOOPP 0xb527c958 -> 0xb527c984 (next) 
IN LOOPP 0xb527c984 -> 0xb527c9b0 (next) 
IN LOOPP 0xb527c9b0 -> 0xb527c9dc (next) 
IN LOOPP 0xb527c9dc -> 0xb527ca08 (next) 
IN LOOPP 0xb527ca08 -> 0xb527ca34 (next) 
IN LOOPP 0xb527ca34 -> 0xb527ca60 (next) 
IN LOOPP 0xb527ca60 -> 0xb527ca8c (next) 
IN LOOPP 0xb527ca8c -> 0xb527cab8 (next) 
IN LOOPP 0xb527cab8 -> 0xb527cae4 (next) 
IN LOOPP 0xb527cae4 -> 0xb527cb10 (next) 
IN LOOPP 0xb527cb10 -> 0xb527cb3c (next) 
IN LOOPP 0xb527cb3c -> 0xb527cb68 (next) 
IN LOOPP 0xb527cb68 -> 0xb527cb94 (next) 
IN LOOPP 0xb527cb94 -> 0xb527cbc0 (next) 
IN LOOPP 0xb527cbc0 -> 0xb527cbec (next) 
IN LOOPP 0xb527cbec -> 0xb527cc18 (next) 
IN LOOPP 0xb527cc18 -> 0xb527cc44 (next) 
IN LOOPP 0xb527cc44 -> 0xb527cc70 (next) 
IN LOOPP 0xb527cc70 -> 0xb527cc9c (next) 
IN LOOPP 0xb527cc9c -> 0xb527ccc8 (next) 
IN LOOPP 0xb527ccc8 -> 0xb527ccf4 (next) 
IN LOOPP 0xb527ccf4 -> 0xb527cd20 (next) 
IN LOOPP 0xb527cd20 -> 0xb527cd4c (next) 
IN LOOPP 0xb527cd4c -> 0xb527cd78 (next) 
IN LOOPP 0xb527cd78 -> 0xb527cda4 (next) 
IN LOOPP 0xb527cda4 -> 0xb527cdd0 (next) 
IN LOOPP 0xb527cdd0 -> 0xb527cdfc (next) 
IN LOOPP 0xb527cdfc -> 0xb527ce28 (next) 
IN LOOPP 0xb527ce28 -> 0xb527ce54 (next) 
IN LOOPP 0xb527ce54 -> 0xb527ce80 (next) 
IN LOOPP 0xb527ce80 -> 0xb527ceac (next) 
IN LOOPP 0xb527ceac -> 0xb527ced8 (next) 
IN LOOPP 0xb527ced8 -> 0xb527cf04 (next) 
IN LOOPP 0xb527cf04 -> 0xb527cf30 (next) 
IN LOOPP 0xb527cf30 -> 0xb527cf5c (next) 
IN LOOPP 0xb527cf5c -> 0xb527cf88 (next) 
IN LOOPP 0xb527cf88 -> 0xb527cfb4 (next) 
IN LOOPP 0xb527cfb4 -> 0xb527cfe0 (next) 
IN LOOPP 0xb527cfe0 -> 0xb527d00c (next) 
IN LOOPP 0xb527d00c -> 0xb527d038 (next) 
IN LOOPP 0xb527d038 -> 0xb527d064 (next) 
IN LOOPP 0xb527d064 -> 0xb527d090 (next) 
IN LOOPP 0xb527d090 -> 0xb527d0bc (next) 
IN LOOPP 0xb527d0bc -> 0xb527d0e8 (next) 
IN LOOPP 0xb527d0e8 -> 0xb527d114 (next) 
IN LOOPP 0xb527d114 -> 0xb527d140 (next) 
IN LOOPP 0xb527d140 -> 0xb527d16c (next) 
IN LOOPP 0xb527d16c -> 0xb527d198 (next) 
IN LOOPP 0xb527d198 -> 0xb527d1c4 (next) 
IN LOOPP 0xb527d1c4 -> 0xb527d1f0 (next) 
IN LOOPP 0xb527d1f0 -> 0xb527d21c (next) 
IN LOOPP 0xb527d21c -> 0xb527d248 (next) 
IN LOOPP 0xb527d248 -> 0xb527d274 (next) 
IN LOOPP 0xb527d274 -> 0xb527d2a0 (next) 
IN LOOPP 0xb527d2a0 -> 0xb527d2cc (next) 
IN LOOPP 0xb527d2cc -> 0xb527d2f8 (next) 
IN LOOPP 0xb527d2f8 -> 0xb527d324 (next) 
IN LOOPP 0xb527d324 -> 0xb527d350 (next) 
IN LOOPP 0xb527d350 -> 0xb527d37c (next) 
IN LOOPP 0xb527d37c -> 0xb527d3a8 (next) 
IN LOOPP 0xb527d3a8 -> 0xb527d3d4 (next) 
IN LOOPP 0xb527d3d4 -> 0xb527d400 (next) 
IN LOOPP 0xb527d400 -> 0xb527d42c (next) 
IN LOOPP 0xb527d42c -> 0xb527d458 (next) 
IN LOOPP 0xb527d458 -> 0xb527d484 (next) 
IN LOOPP 0xb527d484 -> 0xb527d4b0 (next) 
IN LOOPP 0xb527d4b0 -> 0xb527d4dc (next) 
IN LOOPP 0xb527d4dc -> 0xb527d508 (next) 
IN LOOPP 0xb527d508 -> 0xb527d534 (next) 
IN LOOPP 0xb527d534 -> 0xb527d560 (next) 
IN LOOPP 0xb527d560 -> 0xb527d58c (next) 
IN LOOPP 0xb527d58c -> 0xb527d5b8 (next) 
IN LOOPP 0xb527d5b8 -> 0xb527d5e4 (next) 
IN LOOPP 0xb527d5e4 -> 0xb527d610 (next) 
IN LOOPP 0xb527d610 -> 0xb527d63c (next) 
IN LOOPP 0xb527d63c -> 0xb527d668 (next) 
IN LOOPP 0xb527d668 -> 0xb527d694 (next) 
IN LOOPP 0xb527d694 -> 0xb527d6c0 (next) 
IN LOOPP 0xb527d6c0 -> 0xb527d6ec (next) 
IN LOOPP 0xb527d6ec -> 0xb527d718 (next) 
IN LOOPP 0xb527d718 -> 0xb527d744 (next) 
IN LOOPP 0xb527d744 -> 0xb527d770 (next) 
IN LOOPP 0xb527d770 -> 0xb527d79c (next) 
IN LOOPP 0xb527d79c -> 0xb527d7c8 (next) 
IN LOOPP 0xb527d7c8 -> 0xb527d7f4 (next) 
IN LOOPP 0xb527d7f4 -> 0xb527d820 (next) 
IN LOOPP 0xb527d820 -> 0xb527d84c (next) 
IN LOOPP 0xb527d84c -> 0xb527d878 (next) 
IN LOOPP 0xb527d878 -> 0xb527d8a4 (next) 
IN LOOPP 0xb527d8a4 -> 0xb527d8d0 (next) 
IN LOOPP 0xb527d8d0 -> 0xb527d8fc (next) 
IN LOOPP 0xb527d8fc -> 0xb527d928 (next) 
IN LOOPP 0xb527d928 -> 0xb527d954 (next) 
IN LOOPP 0xb527d954 -> 0xb527d980 (next) 
IN LOOPP 0xb527d980 -> 0xb527d9ac (next) 
IN LOOPP 0xb527d9ac -> 0xb527d9d8 (next) 
IN LOOPP 0xb527d9d8 -> 0xb527da04 (next) 
IN LOOPP 0xb527da04 -> 0xb527da30 (next) 
IN LOOPP 0xb527da30 -> 0xb527da5c (next) 
IN LOOPP 0xb527da5c -> 0xb527da88 (next) 
IN LOOPP 0xb527da88 -> 0xb527dab4 (next) 
IN LOOPP 0xb527dab4 -> 0xb527dae0 (next) 
IN LOOPP 0xb527dae0 -> 0xb527db0c (next) 
IN LOOPP 0xb527db0c -> 0xb527db38 (next) 
IN LOOPP 0xb527db38 -> 0xb527db64 (next) 
IN LOOPP 0xb527db64 -> 0xb527db90 (next) 
IN LOOPP 0xb527db90 -> (nil) (next) 
Add 0xb527db38 we set the next to null 
Prev: 0xb527db90, current: (nil) 
Page to decrease counter: 0xb527c000 from 165 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 1 -> 0xb53d4000 -- 0xb53d6000| 

 COUNT: 1  - ends at 0xb53d403c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb53d2000 -- 0xb53d4000| 

 COUNT: 1  - ends at 0xb53d203c 
	 5 -> 0xb53d0000 -- 0xb53d2000| 

 COUNT: 1  - ends at 0xb53d003c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb53c8000 -- 0xb53ca000| 

 COUNT: 1  - ends at 0xb53c803c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1013 TO ALLOCATE BLOCK OF SIZE 317
Adjusted size to: 512
RETURN ADDRESS 0xb53d203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ce200
removing node 0xb53d203c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1014 TO ALLOCATE BLOCK OF SIZE 914
Adjusted size to: 1024
RETURN ADDRESS 0xb53d003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ce400
removing node 0xb53d003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1015 TO ALLOCATE BLOCK OF SIZE 570
Adjusted size to: 1024
removing node 0xb53c803c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
removing node 0xb53c803c of size 2048 
created new node at 0xb53d004c whose previous is 0xb53d003c and size is 16 so prev+16 =0xb53d004c 
RETURN ADDRESS 0xb53d003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf000
removing node 0xb53d003c of size 1024 


 REQUEST NUMBER 1016 TO ALLOCATE BLOCK OF SIZE 2601
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53d2000 and pagePtr 0x9918a78 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 164 
stepping through nodes 
 we have 158 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527db38 and the new one at 0xb527db64 
New page node points to data page 0xb53d2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 165 
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
RETURN ADDRESS IS ----------------------->>>>>0xb52c403c-> 0xb53d2000
removing node 0xb52c403c of size 4096 


 REQUEST NUMBER 1017 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb538fb60
removing node 0xb53b003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1018 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
removing node 0xb53d403c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53d404c whose previous is 0xb53d403c and size is 16 so prev+16 =0xb53d404c 
RETURN ADDRESS 0xb53d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8cc0
removing node 0xb53d403c of size 32 


 REQUEST NUMBER 1019 TO ALLOCATE BLOCK OF SIZE 84
Adjusted size to: 128
removing node 0xb53d003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53d004c whose previous is 0xb53d003c and size is 16 so prev+16 =0xb53d004c 
removing node 0xb53d003c of size 512 
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 256 
created new node at 0xb53ca04c whose previous is 0xb53ca03c and size is 16 so prev+16 =0xb53ca04c 
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf400
removing node 0xb53ca03c of size 128 


 REQUEST NUMBER 1020 TO ALLOCATE BLOCK OF SIZE 915
Adjusted size to: 1024
removing node 0xb53c803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf800
removing node 0xb53c803c of size 1024 


 REQUEST NUMBER 1021 TO ALLOCATE BLOCK OF SIZE 4189
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x992c1d0 and page at 0xb53ba000 
adding page node for the page located at 0xb53ba000 and pagePtr 0x992c1d0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 165 
stepping through nodes 
 we have 159 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527db64 and the new one at 0xb527db90 
New page node points to data page 0xb53ba000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 166 
RETURN ADDRESS IS 0xb53ba000 


 REQUEST NUMBER 1022 TO ALLOCATE BLOCK OF SIZE 108
Adjusted size to: 128
RETURN ADDRESS 0xb53ca03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf480
removing node 0xb53ca03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1023 TO ALLOCATE BLOCK OF SIZE 4242
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x992c1c0 and page at 0xb53ca000 
adding page node for the page located at 0xb53ca000 and pagePtr 0x992c1c0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 166 
stepping through nodes 
 we have 160 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527db90 and the new one at 0xb527dbbc 
New page node points to data page 0xb53ca000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 167 
RETURN ADDRESS IS 0xb53ca000 


 REQUEST NUMBER 1024 TO ALLOCATE BLOCK OF SIZE 59
Adjusted size to: 64
removing node 0xb53b003c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 128 
created new node at 0xb53d604c whose previous is 0xb53d603c and size is 16 so prev+16 =0xb53d604c 
RETURN ADDRESS 0xb53d603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf500
removing node 0xb53d603c of size 64 


 REQUEST NUMBER 1025 TO ALLOCATE BLOCK OF SIZE 5716
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x992c1f0 and page at 0xb53d8000 
adding page node for the page located at 0xb53d8000 and pagePtr 0x992c1f0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 167 
stepping through nodes 
 we have 161 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dbbc and the new one at 0xb527dbe8 
New page node points to data page 0xb53d8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 168 
RETURN ADDRESS IS 0xb53d8000 


 REQUEST NUMBER 1026 TO ALLOCATE BLOCK OF SIZE 32
Adjusted size to: 32
RETURN ADDRESS 0xb53d403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8ce0
removing node 0xb53d403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1027 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
removing node 0xb53d603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53d604c whose previous is 0xb53d603c and size is 16 so prev+16 =0xb53d604c 
RETURN ADDRESS 0xb53d603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf540
removing node 0xb53d603c of size 32 


 REQUEST NUMBER 1028 TO ALLOCATE BLOCK OF SIZE 155
Adjusted size to: 256
removing node 0xb53d003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53d004c whose previous is 0xb53d003c and size is 16 so prev+16 =0xb53d004c 
RETURN ADDRESS 0xb53d003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf600
removing node 0xb53d003c of size 256 


 REQUEST NUMBER 1029 TO ALLOCATE BLOCK OF SIZE 1699
Adjusted size to: 2048
removing node 0xb52c403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
RETURN ADDRESS 0xb52c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53d3000
removing node 0xb52c403c of size 2048 


 REQUEST NUMBER 1030 TO ALLOCATE BLOCK OF SIZE 2358
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53d4000 and pagePtr 0x99c1798 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 168 
stepping through nodes 
 we have 162 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dbe8 and the new one at 0xb527dc14 
New page node points to data page 0xb53d4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 169 
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53da03c-> 0xb53d4000
removing node 0xb53da03c of size 4096 


 REQUEST NUMBER 1031 TO ALLOCATE BLOCK OF SIZE 403
Adjusted size to: 512
removing node 0xb53c803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cfc00
removing node 0xb53c803c of size 512 


 REQUEST NUMBER 1032 TO ALLOCATE BLOCK OF SIZE 575
Adjusted size to: 1024
removing node 0xb52c403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
RETURN ADDRESS 0xb52c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53d3800
removing node 0xb52c403c of size 1024 


 REQUEST NUMBER 1033 TO ALLOCATE BLOCK OF SIZE 1644
Adjusted size to: 2048
removing node 0xb53da03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53d5000
removing node 0xb53da03c of size 2048 


 REQUEST NUMBER 1034 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
RETURN ADDRESS 0xb53d603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf560
removing node 0xb53d603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1035 TO ALLOCATE BLOCK OF SIZE 884
Adjusted size to: 1024
RETURN ADDRESS 0xb52c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53d3c00
removing node 0xb52c403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1036 TO ALLOCATE BLOCK OF SIZE 131
Adjusted size to: 256
RETURN ADDRESS 0xb53d003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf700
removing node 0xb53d003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1037 TO ALLOCATE BLOCK OF SIZE 489
Adjusted size to: 512
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cfe00
removing node 0xb53c803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1038 TO ALLOCATE BLOCK OF SIZE 1561
Adjusted size to: 2048
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53d5800
removing node 0xb53da03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1039 TO FREE BLOCK 0xb5382000  OF SIZE 2695
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5382000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb53da000 -- 0xb53dc000| 

 COUNT: 1  - ends at 0xb53da03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1040 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb53b003c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 64 
created new node at 0xb53c804c whose previous is 0xb53c803c and size is 16 so prev+16 =0xb53c804c 
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf580
removing node 0xb53c803c of size 32 


 REQUEST NUMBER 1041 TO ALLOCATE BLOCK OF SIZE 6562
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99c16e0 and page at 0xb53d0000 
adding page node for the page located at 0xb53d0000 and pagePtr 0x99c16e0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 169 
stepping through nodes 
 we have 163 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dc14 and the new one at 0xb527dc40 
New page node points to data page 0xb53d0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 170 
RETURN ADDRESS IS 0xb53d0000 


 REQUEST NUMBER 1042 TO ALLOCATE BLOCK OF SIZE 484
Adjusted size to: 512
removing node 0xb53da03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
removing node 0xb53da03c of size 2048 
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
removing node 0xb52c403c of size 1024 
created new node at 0xb53d604c whose previous is 0xb53d603c and size is 16 so prev+16 =0xb53d604c 
RETURN ADDRESS 0xb53d603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382000
removing node 0xb53d603c of size 512 


 REQUEST NUMBER 1043 TO ALLOCATE BLOCK OF SIZE 303
Adjusted size to: 512
RETURN ADDRESS 0xb53d603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382200
removing node 0xb53d603c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1044 TO ALLOCATE BLOCK OF SIZE 65
Adjusted size to: 128
removing node 0xb52c403c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
removing node 0xb52c403c of size 512 
created new node at 0xb53d604c whose previous is 0xb53d603c and size is 16 so prev+16 =0xb53d604c 
removing node 0xb53d603c of size 256 
created new node at 0xb53dc04c whose previous is 0xb53dc03c and size is 16 so prev+16 =0xb53dc04c 
RETURN ADDRESS 0xb53dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382400
removing node 0xb53dc03c of size 128 


 REQUEST NUMBER 1045 TO ALLOCATE BLOCK OF SIZE 1722
Adjusted size to: 2048
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382800
removing node 0xb53da03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1046 TO ALLOCATE BLOCK OF SIZE 40
Adjusted size to: 64
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf5c0
removing node 0xb53b003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1047 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb53c803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53cf5a0
removing node 0xb53c803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1048 TO ALLOCATE BLOCK OF SIZE 5013
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9907d48 and page at 0xb53c8000 
adding page node for the page located at 0xb53c8000 and pagePtr 0x9907d48 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 170 
stepping through nodes 
 we have 164 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dc40 and the new one at 0xb527dc6c 
New page node points to data page 0xb53c8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 171 
RETURN ADDRESS IS 0xb53c8000 


 REQUEST NUMBER 1049 TO ALLOCATE BLOCK OF SIZE 164
Adjusted size to: 256
RETURN ADDRESS 0xb53d603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382500
removing node 0xb53d603c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1050 TO ALLOCATE BLOCK OF SIZE 1812
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53d6000 and pagePtr 0x99a3a68 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 171 
stepping through nodes 
 we have 165 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dc6c and the new one at 0xb527dc98 
New page node points to data page 0xb53d6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 172 
created new node at 0xb53b004c whose previous is 0xb53b003c and size is 16 so prev+16 =0xb53b004c 
removing node 0xb53b003c of size 4096 
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53da03c-> 0xb53d6000
removing node 0xb53da03c of size 2048 


 REQUEST NUMBER 1051 TO ALLOCATE BLOCK OF SIZE 61
Adjusted size to: 64
removing node 0xb53dc03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53dc04c whose previous is 0xb53dc03c and size is 16 so prev+16 =0xb53dc04c 
RETURN ADDRESS 0xb53dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382480
removing node 0xb53dc03c of size 64 


 REQUEST NUMBER 1052 TO ALLOCATE BLOCK OF SIZE 88
Adjusted size to: 128
removing node 0xb52c403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
removing node 0xb52c403c of size 256 
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382600
removing node 0xb53de03c of size 128 


 REQUEST NUMBER 1053 TO ALLOCATE BLOCK OF SIZE 55
Adjusted size to: 64
RETURN ADDRESS 0xb53dc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53824c0
removing node 0xb53dc03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1054 TO ALLOCATE BLOCK OF SIZE 46
Adjusted size to: 64
removing node 0xb53de03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382680
removing node 0xb53de03c of size 64 


 REQUEST NUMBER 1055 TO ALLOCATE BLOCK OF SIZE 36
Adjusted size to: 64
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53826c0
removing node 0xb53de03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1056 TO ALLOCATE BLOCK OF SIZE 45
Adjusted size to: 64
removing node 0xb52c403c of size 256 
*** freeing page for lists of size 3
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
removing node 0xb52c403c of size 128 
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382700
removing node 0xb53de03c of size 64 


 REQUEST NUMBER 1057 TO ALLOCATE BLOCK OF SIZE 847
Adjusted size to: 1024
removing node 0xb53da03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53d6800
removing node 0xb53da03c of size 1024 


 REQUEST NUMBER 1058 TO ALLOCATE BLOCK OF SIZE 4936
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9918108 and page at 0xb53dc000 
adding page node for the page located at 0xb53dc000 and pagePtr 0x9918108 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 172 
stepping through nodes 
 we have 166 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dc98 and the new one at 0xb527dcc4 
New page node points to data page 0xb53dc000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 173 
RETURN ADDRESS IS 0xb53dc000 


 REQUEST NUMBER 1059 TO FREE BLOCK 0xb53700c0  OF SIZE 9
coalescing blocks if possible
trying to coalesce a block at ptr 0xb53700c0 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53e0000 -- 0xb53e2000| 

 COUNT: 1  - ends at 0xb53e003c 
	 1 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 1  - ends at 0xb53de03c 
	 2 -> 0xb52c4000 -- 0xb52c6000| 

 COUNT: 1  - ends at 0xb52c403c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb53da000 -- 0xb53dc000| 

 COUNT: 1  - ends at 0xb53da03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1060 TO ALLOCATE BLOCK OF SIZE 4969
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99a41c0 and page at 0xb53e2000 
adding page node for the page located at 0xb53e2000 and pagePtr 0x99a41c0 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 173 
stepping through nodes 
 we have 167 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dcc4 and the new one at 0xb527dcf0 
New page node points to data page 0xb53e2000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 174 
RETURN ADDRESS IS 0xb53e2000 


 REQUEST NUMBER 1061 TO FREE BLOCK 0xb5302e00  OF SIZE 39
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5302e00 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53e0000 -- 0xb53e2000| 

 COUNT: 1  - ends at 0xb53e003c 
	 1 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 2  - ends at 0xb53de04c 
	 2 -> 0xb52c4000 -- 0xb52c6000| 

 COUNT: 1  - ends at 0xb52c403c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb53da000 -- 0xb53dc000| 

 COUNT: 1  - ends at 0xb53da03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb53b0000 -- 0xb53b2000| 

 COUNT: 1  - ends at 0xb53b003c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1062 TO ALLOCATE BLOCK OF SIZE 4795
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99e5760 and page at 0xb53e4000 
adding page node for the page located at 0xb53e4000 and pagePtr 0x99e5760 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 174 
stepping through nodes 
 we have 168 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dcf0 and the new one at 0xb527dd1c 
New page node points to data page 0xb53e4000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 175 
RETURN ADDRESS IS 0xb53e4000 


 REQUEST NUMBER 1063 TO ALLOCATE BLOCK OF SIZE 7922
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f8b48 and page at 0xb53e6000 
adding page node for the page located at 0xb53e6000 and pagePtr 0x98f8b48 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 175 
stepping through nodes 
 we have 169 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dd1c and the new one at 0xb527dd48 
New page node points to data page 0xb53e6000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 176 
RETURN ADDRESS IS 0xb53e6000 


 REQUEST NUMBER 1064 TO ALLOCATE BLOCK OF SIZE 3210
Adjusted size to: 4096
RETURN ADDRESS 0xb53b003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53d7000
removing node 0xb53b003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1065 TO ALLOCATE BLOCK OF SIZE 7062
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x98f8a88 and page at 0xb53b0000 
adding page node for the page located at 0xb53b0000 and pagePtr 0x98f8a88 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 176 
stepping through nodes 
 we have 170 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dd48 and the new one at 0xb527dd74 
New page node points to data page 0xb53b0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 177 
RETURN ADDRESS IS 0xb53b0000 


 REQUEST NUMBER 1066 TO ALLOCATE BLOCK OF SIZE 825
Adjusted size to: 1024
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53d6c00
removing node 0xb53da03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1067 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
RETURN ADDRESS 0xb53e003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53700c0
removing node 0xb53e003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1068 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb53de03c of size 64 
created new node at 0xb53e004c whose previous is 0xb53e003c and size is 16 so prev+16 =0xb53e004c 
RETURN ADDRESS 0xb53e003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382740
removing node 0xb53e003c of size 32 


 REQUEST NUMBER 1069 TO FREE BLOCK 0xb533e000  OF SIZE 4130
removing pageNode to page with ptr 0x996cf98 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
IN THE LOOp 0xb527c66c 
IN THE LOOp 0xb527c698 
IN THE LOOp 0xb527c6c4 
IN THE LOOp 0xb527c6f0 
IN THE LOOp 0xb527c71c 
IN THE LOOp 0xb527c748 
IN THE LOOp 0xb527c774 
IN THE LOOp 0xb527c7a0 
IN THE LOOp 0xb527c7cc 
IN THE LOOp 0xb527c7f8 
IN THE LOOp 0xb527c824 
IN THE LOOp 0xb527c850 
IN THE LOOp 0xb527c87c 
IN THE LOOp 0xb527c8a8 
IN THE LOOp 0xb527c8d4 
IN THE LOOp 0xb527c900 
IN THE LOOp 0xb527c92c 
IN THE LOOp 0xb527c958 
IN THE LOOp 0xb527c984 
IN THE LOOp 0xb527c9b0 
IN THE LOOp 0xb527c9dc 
IN THE LOOp 0xb527ca08 
IN THE LOOp 0xb527ca34 
IN THE LOOp 0xb527ca60 
IN THE LOOp 0xb527ca8c 
IN THE LOOp 0xb527cab8 
IN THE LOOp 0xb527cae4 
IN THE LOOp 0xb527cb10 
IN THE LOOp 0xb527cb3c 
IN THE LOOp 0xb527cb68 
IN THE LOOp 0xb527cb94 
IN THE LOOp 0xb527cbc0 
IN THE LOOp 0xb527cbec 
IN THE LOOp 0xb527cc18 
IN THE LOOp 0xb527cc44 
IN THE LOOp 0xb527cc70 
IN THE LOOp 0xb527cc9c 
IN THE LOOp 0xb527ccc8 
IN THE LOOp 0xb527ccf4 
IN THE LOOp 0xb527cd20 
IN THE LOOp 0xb527cd4c 
IN THE LOOp 0xb527cd78 
IN THE LOOp 0xb527cda4 
IN THE LOOp 0xb527cdd0 
IN THE LOOp 0xb527cdfc 
IN THE LOOp 0xb527ce28 
IN THE LOOp 0xb527ce54 
IN THE LOOp 0xb527ce80 
IN THE LOOp 0xb527ceac 
IN THE LOOp 0xb527ced8 
IN THE LOOp 0xb527cf04 
IN THE LOOp 0xb527cf30 
IN THE LOOp 0xb527cf5c 
IN THE LOOp 0xb527cf88 
IN THE LOOp 0xb527cfb4 
IN THE LOOp 0xb527cfe0 
IN THE LOOp 0xb527d00c 
IN THE LOOp 0xb527d038 
IN THE LOOp 0xb527d064 
IN THE LOOp 0xb527d090 
IN THE LOOp 0xb527d0bc 
IN THE LOOp 0xb527d0e8 
IN THE LOOp 0xb527d114 
IN THE LOOp 0xb527d140 
IN THE LOOp 0xb527d16c 
IN THE LOOp 0xb527d198 
IN THE LOOp 0xb527d1c4 
IN THE LOOp 0xb527d1f0 
IN THE LOOp 0xb527d21c 
IN THE LOOp 0xb527d248 
IN THE LOOp 0xb527d274 
out of loop 
IN LOOPP 0xb527d2cc -> 0xb527d2f8 (next) 
IN LOOPP 0xb527d2f8 -> 0xb527d324 (next) 
IN LOOPP 0xb527d324 -> 0xb527d350 (next) 
IN LOOPP 0xb527d350 -> 0xb527d37c (next) 
IN LOOPP 0xb527d37c -> 0xb527d3a8 (next) 
IN LOOPP 0xb527d3a8 -> 0xb527d3d4 (next) 
IN LOOPP 0xb527d3d4 -> 0xb527d400 (next) 
IN LOOPP 0xb527d400 -> 0xb527d42c (next) 
IN LOOPP 0xb527d42c -> 0xb527d458 (next) 
IN LOOPP 0xb527d458 -> 0xb527d484 (next) 
IN LOOPP 0xb527d484 -> 0xb527d4b0 (next) 
IN LOOPP 0xb527d4b0 -> 0xb527d4dc (next) 
IN LOOPP 0xb527d4dc -> 0xb527d508 (next) 
IN LOOPP 0xb527d508 -> 0xb527d534 (next) 
IN LOOPP 0xb527d534 -> 0xb527d560 (next) 
IN LOOPP 0xb527d560 -> 0xb527d58c (next) 
IN LOOPP 0xb527d58c -> 0xb527d5b8 (next) 
IN LOOPP 0xb527d5b8 -> 0xb527d5e4 (next) 
IN LOOPP 0xb527d5e4 -> 0xb527d610 (next) 
IN LOOPP 0xb527d610 -> 0xb527d63c (next) 
IN LOOPP 0xb527d63c -> 0xb527d668 (next) 
IN LOOPP 0xb527d668 -> 0xb527d694 (next) 
IN LOOPP 0xb527d694 -> 0xb527d6c0 (next) 
IN LOOPP 0xb527d6c0 -> 0xb527d6ec (next) 
IN LOOPP 0xb527d6ec -> 0xb527d718 (next) 
IN LOOPP 0xb527d718 -> 0xb527d744 (next) 
IN LOOPP 0xb527d744 -> 0xb527d770 (next) 
IN LOOPP 0xb527d770 -> 0xb527d79c (next) 
IN LOOPP 0xb527d79c -> 0xb527d7c8 (next) 
IN LOOPP 0xb527d7c8 -> 0xb527d7f4 (next) 
IN LOOPP 0xb527d7f4 -> 0xb527d820 (next) 
IN LOOPP 0xb527d820 -> 0xb527d84c (next) 
IN LOOPP 0xb527d84c -> 0xb527d878 (next) 
IN LOOPP 0xb527d878 -> 0xb527d8a4 (next) 
IN LOOPP 0xb527d8a4 -> 0xb527d8d0 (next) 
IN LOOPP 0xb527d8d0 -> 0xb527d8fc (next) 
IN LOOPP 0xb527d8fc -> 0xb527d928 (next) 
IN LOOPP 0xb527d928 -> 0xb527d954 (next) 
IN LOOPP 0xb527d954 -> 0xb527d980 (next) 
IN LOOPP 0xb527d980 -> 0xb527d9ac (next) 
IN LOOPP 0xb527d9ac -> 0xb527d9d8 (next) 
IN LOOPP 0xb527d9d8 -> 0xb527da04 (next) 
IN LOOPP 0xb527da04 -> 0xb527da30 (next) 
IN LOOPP 0xb527da30 -> 0xb527da5c (next) 
IN LOOPP 0xb527da5c -> 0xb527da88 (next) 
IN LOOPP 0xb527da88 -> 0xb527dab4 (next) 
IN LOOPP 0xb527dab4 -> 0xb527dae0 (next) 
IN LOOPP 0xb527dae0 -> 0xb527db0c (next) 
IN LOOPP 0xb527db0c -> 0xb527db38 (next) 
IN LOOPP 0xb527db38 -> 0xb527db64 (next) 
IN LOOPP 0xb527db64 -> 0xb527db90 (next) 
IN LOOPP 0xb527db90 -> 0xb527dbbc (next) 
IN LOOPP 0xb527dbbc -> 0xb527dbe8 (next) 
IN LOOPP 0xb527dbe8 -> 0xb527dc14 (next) 
IN LOOPP 0xb527dc14 -> 0xb527dc40 (next) 
IN LOOPP 0xb527dc40 -> 0xb527dc6c (next) 
IN LOOPP 0xb527dc6c -> 0xb527dc98 (next) 
IN LOOPP 0xb527dc98 -> 0xb527dcc4 (next) 
IN LOOPP 0xb527dcc4 -> 0xb527dcf0 (next) 
IN LOOPP 0xb527dcf0 -> 0xb527dd1c (next) 
IN LOOPP 0xb527dd1c -> 0xb527dd48 (next) 
IN LOOPP 0xb527dd48 -> 0xb527dd74 (next) 
IN LOOPP 0xb527dd74 -> (nil) (next) 
Add 0xb527dd1c we set the next to null 
Prev: 0xb527dd74, current: (nil) 
Page to decrease counter: 0xb527c000 from 177 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53e0000 -- 0xb53e2000| 

 COUNT: 1  - ends at 0xb53e003c 
	 1 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 1  - ends at 0xb53de03c 
	 2 -> 0xb52c4000 -- 0xb52c6000| 

 COUNT: 1  - ends at 0xb52c403c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1070 TO ALLOCATE BLOCK OF SIZE 81
Adjusted size to: 128
RETURN ADDRESS 0xb52c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382780
removing node 0xb52c403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1071 TO FREE BLOCK 0xb5321c60  OF SIZE 17
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5321c60 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb53e004c whose previous is 0xb53e003c and size is 16 so prev+16 =0xb53e004c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53e0000 -- 0xb53e2000| 

 COUNT: 2  - ends at 0xb53e004c 
	 1 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 1  - ends at 0xb53de03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1072 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
RETURN ADDRESS 0xb53e003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382760
removing node 0xb53e003c of size 32 


 REQUEST NUMBER 1073 TO ALLOCATE BLOCK OF SIZE 61
Adjusted size to: 64
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5302e00
removing node 0xb53de03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1074 TO ALLOCATE BLOCK OF SIZE 31
Adjusted size to: 32
RETURN ADDRESS 0xb53e003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321c60
removing node 0xb53e003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1075 TO ALLOCATE BLOCK OF SIZE 1891
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53e0000 and pagePtr 0x9926e38 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 176 
stepping through nodes 
 we have 169 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dd1c and the new one at 0xb527dd48 
New page node points to data page 0xb53e0000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 177 
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
removing node 0xb53de03c of size 4096 
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
RETURN ADDRESS IS ----------------------->>>>>0xb52c403c-> 0xb53e0000
removing node 0xb52c403c of size 2048 


 REQUEST NUMBER 1076 TO ALLOCATE BLOCK OF SIZE 119
Adjusted size to: 128
removing node 0xb52c403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
removing node 0xb52c403c of size 1024 
created new node at 0xb533e04c whose previous is 0xb533e03c and size is 16 so prev+16 =0xb533e04c 
removing node 0xb533e03c of size 512 
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
removing node 0xb53da03c of size 256 
created new node at 0xb53e804c whose previous is 0xb53e803c and size is 16 so prev+16 =0xb53e804c 
RETURN ADDRESS 0xb53e803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0800
removing node 0xb53e803c of size 128 


 REQUEST NUMBER 1077 TO ALLOCATE BLOCK OF SIZE 53
Adjusted size to: 64
removing node 0xb53e803c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53e804c whose previous is 0xb53e803c and size is 16 so prev+16 =0xb53e804c 
RETURN ADDRESS 0xb53e803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0880
removing node 0xb53e803c of size 64 


 REQUEST NUMBER 1078 TO ALLOCATE BLOCK OF SIZE 150
Adjusted size to: 256
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0900
removing node 0xb53da03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1079 TO ALLOCATE BLOCK OF SIZE 18
Adjusted size to: 32
removing node 0xb53e803c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53e804c whose previous is 0xb53e803c and size is 16 so prev+16 =0xb53e804c 
RETURN ADDRESS 0xb53e803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e08c0
removing node 0xb53e803c of size 32 


 REQUEST NUMBER 1080 TO ALLOCATE BLOCK OF SIZE 214
Adjusted size to: 256
removing node 0xb533e03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb533e04c whose previous is 0xb533e03c and size is 16 so prev+16 =0xb533e04c 
RETURN ADDRESS 0xb533e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0a00
removing node 0xb533e03c of size 256 


 REQUEST NUMBER 1081 TO ALLOCATE BLOCK OF SIZE 34
Adjusted size to: 64
removing node 0xb533e03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb533e04c whose previous is 0xb533e03c and size is 16 so prev+16 =0xb533e04c 
removing node 0xb533e03c of size 128 
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0b00
removing node 0xb53da03c of size 64 


 REQUEST NUMBER 1082 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb53e803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e08e0
removing node 0xb53e803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1083 TO ALLOCATE BLOCK OF SIZE 5461
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99ca358 and page at 0xb53e8000 
adding page node for the page located at 0xb53e8000 and pagePtr 0x99ca358 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 177 
stepping through nodes 
 we have 170 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dd48 and the new one at 0xb527dd74 
New page node points to data page 0xb53e8000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 178 
RETURN ADDRESS IS 0xb53e8000 


 REQUEST NUMBER 1084 TO ALLOCATE BLOCK OF SIZE 7850
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99ca368 and page at 0xb53ea000 
adding page node for the page located at 0xb53ea000 and pagePtr 0x99ca368 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 178 
stepping through nodes 
 we have 171 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dd74 and the new one at 0xb527dda0 
New page node points to data page 0xb53ea000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 179 
RETURN ADDRESS IS 0xb53ea000 


 REQUEST NUMBER 1085 TO ALLOCATE BLOCK OF SIZE 1085
Adjusted size to: 2048
removing node 0xb53de03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1000
removing node 0xb53de03c of size 2048 


 REQUEST NUMBER 1086 TO ALLOCATE BLOCK OF SIZE 619
Adjusted size to: 1024
RETURN ADDRESS 0xb52c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0c00
removing node 0xb52c403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1087 TO ALLOCATE BLOCK OF SIZE 203
Adjusted size to: 256
removing node 0xb53de03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
removing node 0xb53de03c of size 1024 
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
removing node 0xb52c403c of size 512 
created new node at 0xb53ec04c whose previous is 0xb53ec03c and size is 16 so prev+16 =0xb53ec04c 
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1800
removing node 0xb53ec03c of size 256 


 REQUEST NUMBER 1088 TO ALLOCATE BLOCK OF SIZE 65
Adjusted size to: 128
RETURN ADDRESS 0xb533e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0b80
removing node 0xb533e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1089 TO ALLOCATE BLOCK OF SIZE 7740
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99e2d38 and page at 0xb533e000 
adding page node for the page located at 0xb533e000 and pagePtr 0x99e2d38 
Page where we add the node is 0xb527c000 
not at a full page yet 
page at 0xb527c000 and counter is 179 
stepping through nodes 
 we have 172 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb527dda0 and the new one at 0xb527ddcc 
New page node points to data page 0xb533e000 
Address of page that holds the page node is 0xb527c000 
New page counter is at 180 
RETURN ADDRESS IS 0xb533e000 


 REQUEST NUMBER 1090 TO ALLOCATE BLOCK OF SIZE 1398
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53ee000 and pagePtr 0x996dfb0 
Page where we add the node is 0xb527c000 
creating new page of pagenodes 
I'm here! line 952 
I made it to line 963 
new page is at location 0x996dfc0 and kma_ptr is 0xb53f0000 
and the new page node is at 0xb53f003c 
created new node at 0xb53f204c whose previous is 0xb53f203c and size is 16 so prev+16 =0xb53f204c 
removing node 0xb53f203c of size 4096 
created new node at 0xb53f404c whose previous is 0xb53f403c and size is 16 so prev+16 =0xb53f404c 
RETURN ADDRESS IS ----------------------->>>>>0xb53f403c-> 0xb53ee000
removing node 0xb53f403c of size 2048 


 REQUEST NUMBER 1091 TO FREE BLOCK 0xb5378800  OF SIZE 483
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5378800 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb52c404c whose previous is 0xb52c403c and size is 16 so prev+16 =0xb52c404c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb53da000 -- 0xb53dc000| 

 COUNT: 1  - ends at 0xb53da03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb53ec000 -- 0xb53ee000| 

 COUNT: 1  - ends at 0xb53ec03c 
	 4 -> 0xb52c4000 -- 0xb52c6000| 

 COUNT: 2  - ends at 0xb52c404c 
	 5 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 1  - ends at 0xb53de03c 
	 6 -> 0xb53f4000 -- 0xb53f6000| 

 COUNT: 1  - ends at 0xb53f403c 
	 7 -> 0xb53f2000 -- 0xb53f4000| 

 COUNT: 1  - ends at 0xb53f203c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1092 TO ALLOCATE BLOCK OF SIZE 4573
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99b6660 and page at 0xb53f6000 
adding page node for the page located at 0xb53f6000 and pagePtr 0x99b6660 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 1 
stepping through nodes 
 we have 174 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f003c and the new one at 0xb53f0068 
New page node points to data page 0xb53f6000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 2 
RETURN ADDRESS IS 0xb53f6000 


 REQUEST NUMBER 1093 TO ALLOCATE BLOCK OF SIZE 7270
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99b6670 and page at 0xb53f8000 
adding page node for the page located at 0xb53f8000 and pagePtr 0x99b6670 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 2 
stepping through nodes 
 we have 175 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0068 and the new one at 0xb53f0094 
New page node points to data page 0xb53f8000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 3 
RETURN ADDRESS IS 0xb53f8000 


 REQUEST NUMBER 1094 TO ALLOCATE BLOCK OF SIZE 66
Adjusted size to: 128
removing node 0xb53ec03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53ec04c whose previous is 0xb53ec03c and size is 16 so prev+16 =0xb53ec04c 
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1900
removing node 0xb53ec03c of size 128 


 REQUEST NUMBER 1095 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
removing node 0xb53da03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0b40
removing node 0xb53da03c of size 32 


 REQUEST NUMBER 1096 TO ALLOCATE BLOCK OF SIZE 40
Adjusted size to: 64
removing node 0xb53ec03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53ec04c whose previous is 0xb53ec03c and size is 16 so prev+16 =0xb53ec04c 
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1980
removing node 0xb53ec03c of size 64 


 REQUEST NUMBER 1097 TO ALLOCATE BLOCK OF SIZE 460
Adjusted size to: 512
RETURN ADDRESS 0xb52c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1a00
removing node 0xb52c403c of size 512 


 REQUEST NUMBER 1098 TO ALLOCATE BLOCK OF SIZE 2179
Adjusted size to: 4096
RETURN ADDRESS 0xb53f203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ef000
removing node 0xb53f203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1099 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0b60
removing node 0xb53da03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1100 TO ALLOCATE BLOCK OF SIZE 468
Adjusted size to: 512
RETURN ADDRESS 0xb52c403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378800
removing node 0xb52c403c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1101 TO ALLOCATE BLOCK OF SIZE 24
Adjusted size to: 32
removing node 0xb53ec03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53ec04c whose previous is 0xb53ec03c and size is 16 so prev+16 =0xb53ec04c 
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e19c0
removing node 0xb53ec03c of size 32 


 REQUEST NUMBER 1102 TO ALLOCATE BLOCK OF SIZE 3843
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb52c4000 and pagePtr 0x99d7b40 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 3 
stepping through nodes 
 we have 176 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0094 and the new one at 0xb53f00c0 
New page node points to data page 0xb52c4000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 4 
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS IS ----------------------->>>>>0xb53da03c-> 0xb52c4000
removing node 0xb53da03c of size 4096 


 REQUEST NUMBER 1103 TO ALLOCATE BLOCK OF SIZE 162
Adjusted size to: 256
removing node 0xb53de03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
removing node 0xb53de03c of size 512 
created new node at 0xb53f204c whose previous is 0xb53f203c and size is 16 so prev+16 =0xb53f204c 
RETURN ADDRESS 0xb53f203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1c00
removing node 0xb53f203c of size 256 


 REQUEST NUMBER 1104 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e19e0
removing node 0xb53ec03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1105 TO ALLOCATE BLOCK OF SIZE 1091
Adjusted size to: 2048
RETURN ADDRESS 0xb53f403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ee800
removing node 0xb53f403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1106 TO ALLOCATE BLOCK OF SIZE 137
Adjusted size to: 256
RETURN ADDRESS 0xb53f203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1d00
removing node 0xb53f203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1107 TO ALLOCATE BLOCK OF SIZE 1396
Adjusted size to: 2048
removing node 0xb53da03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c5000
removing node 0xb53da03c of size 2048 


 REQUEST NUMBER 1108 TO ALLOCATE BLOCK OF SIZE 102
Adjusted size to: 128
removing node 0xb53de03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
removing node 0xb53de03c of size 256 
created new node at 0xb53f204c whose previous is 0xb53f203c and size is 16 so prev+16 =0xb53f204c 
RETURN ADDRESS 0xb53f203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1e00
removing node 0xb53f203c of size 128 


 REQUEST NUMBER 1109 TO ALLOCATE BLOCK OF SIZE 72
Adjusted size to: 128
RETURN ADDRESS 0xb53f203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1e80
removing node 0xb53f203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1110 TO ALLOCATE BLOCK OF SIZE 2759
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53f2000 and pagePtr 0x99f09c8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 4 
stepping through nodes 
 we have 177 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f00c0 and the new one at 0xb53f00ec 
New page node points to data page 0xb53f2000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 5 
created new node at 0xb53f404c whose previous is 0xb53f403c and size is 16 so prev+16 =0xb53f404c 
RETURN ADDRESS IS ----------------------->>>>>0xb53f403c-> 0xb53f2000
removing node 0xb53f403c of size 4096 


 REQUEST NUMBER 1111 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
removing node 0xb53de03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
removing node 0xb53de03c of size 128 
created new node at 0xb53ec04c whose previous is 0xb53ec03c and size is 16 so prev+16 =0xb53ec04c 
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1f00
removing node 0xb53ec03c of size 64 


 REQUEST NUMBER 1112 TO ALLOCATE BLOCK OF SIZE 179
Adjusted size to: 256
removing node 0xb53da03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
removing node 0xb53da03c of size 1024 
created new node at 0xb53fa04c whose previous is 0xb53fa03c and size is 16 so prev+16 =0xb53fa04c 
removing node 0xb53fa03c of size 512 
created new node at 0xb53fc04c whose previous is 0xb53fc03c and size is 16 so prev+16 =0xb53fc04c 
RETURN ADDRESS 0xb53fc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c5800
removing node 0xb53fc03c of size 256 


 REQUEST NUMBER 1113 TO ALLOCATE BLOCK OF SIZE 2451
Adjusted size to: 4096
RETURN ADDRESS 0xb53f403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53f3000
removing node 0xb53f403c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1114 TO ALLOCATE BLOCK OF SIZE 641
Adjusted size to: 1024
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c5c00
removing node 0xb53da03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1115 TO ALLOCATE BLOCK OF SIZE 154
Adjusted size to: 256
RETURN ADDRESS 0xb53fc03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c5900
removing node 0xb53fc03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1116 TO ALLOCATE BLOCK OF SIZE 1179
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53fc000 and pagePtr 0x99f6ec8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 5 
stepping through nodes 
 we have 178 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f00ec and the new one at 0xb53f0118 
New page node points to data page 0xb53fc000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 6 
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
removing node 0xb53da03c of size 4096 
created new node at 0xb53f404c whose previous is 0xb53f403c and size is 16 so prev+16 =0xb53f404c 
RETURN ADDRESS IS ----------------------->>>>>0xb53f403c-> 0xb53fc000
removing node 0xb53f403c of size 2048 


 REQUEST NUMBER 1117 TO ALLOCATE BLOCK OF SIZE 2009
Adjusted size to: 2048
RETURN ADDRESS 0xb53f403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fc800
removing node 0xb53f403c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1118 TO ALLOCATE BLOCK OF SIZE 5990
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99f09b8 and page at 0xb53f4000 
adding page node for the page located at 0xb53f4000 and pagePtr 0x99f09b8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 6 
stepping through nodes 
 we have 179 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0118 and the new one at 0xb53f0144 
New page node points to data page 0xb53f4000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 7 
RETURN ADDRESS IS 0xb53f4000 


 REQUEST NUMBER 1119 TO ALLOCATE BLOCK OF SIZE 1766
Adjusted size to: 2048
removing node 0xb53da03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fd000
removing node 0xb53da03c of size 2048 


 REQUEST NUMBER 1120 TO FREE BLOCK 0xb527ee40  OF SIZE 30
coalescing blocks if possible
trying to coalesce a block at ptr 0xb527ee40 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53fe000 -- 0xb5400000| 

 COUNT: 1  - ends at 0xb53fe03c 
	 1 -> 0xb53ec000 -- 0xb53ee000| 

 COUNT: 1  - ends at 0xb53ec03c 
	 2 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 1  - ends at 0xb53de03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb53fa000 -- 0xb53fc000| 

 COUNT: 1  - ends at 0xb53fa03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb53da000 -- 0xb53dc000| 

 COUNT: 1  - ends at 0xb53da03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1121 TO ALLOCATE BLOCK OF SIZE 251
Adjusted size to: 256
removing node 0xb53fa03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb53fa04c whose previous is 0xb53fa03c and size is 16 so prev+16 =0xb53fa04c 
RETURN ADDRESS 0xb53fa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c5a00
removing node 0xb53fa03c of size 256 


 REQUEST NUMBER 1122 TO FREE BLOCK 0xb5368ec0  OF SIZE 29
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5368ec0 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb53fe04c whose previous is 0xb53fe03c and size is 16 so prev+16 =0xb53fe04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53fe000 -- 0xb5400000| 

 COUNT: 2  - ends at 0xb53fe04c 
	 1 -> 0xb53ec000 -- 0xb53ee000| 

 COUNT: 1  - ends at 0xb53ec03c 
	 2 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 1  - ends at 0xb53de03c 
	 3 -> 0xb53fa000 -- 0xb53fc000| 

 COUNT: 1  - ends at 0xb53fa03c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb53da000 -- 0xb53dc000| 

 COUNT: 1  - ends at 0xb53da03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1123 TO ALLOCATE BLOCK OF SIZE 4297
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99fa850 and page at 0xb5400000 
adding page node for the page located at 0xb5400000 and pagePtr 0x99fa850 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 7 
stepping through nodes 
 we have 180 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0144 and the new one at 0xb53f0170 
New page node points to data page 0xb5400000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 8 
RETURN ADDRESS IS 0xb5400000 


 REQUEST NUMBER 1124 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb53fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb527ee40
removing node 0xb53fe03c of size 32 


 REQUEST NUMBER 1125 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb53fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5368ec0
removing node 0xb53fe03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1126 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
removing node 0xb53ec03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53ec04c whose previous is 0xb53ec03c and size is 16 so prev+16 =0xb53ec04c 
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1f40
removing node 0xb53ec03c of size 32 


 REQUEST NUMBER 1127 TO ALLOCATE BLOCK OF SIZE 141
Adjusted size to: 256
RETURN ADDRESS 0xb53fa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52c5b00
removing node 0xb53fa03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1128 TO FREE BLOCK 0xb5399000  OF SIZE 3757
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5399000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb53ec000 -- 0xb53ee000| 

 COUNT: 1  - ends at 0xb53ec03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 1  - ends at 0xb53de03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb53da000 -- 0xb53dc000| 

 COUNT: 1  - ends at 0xb53da03c 
	 7 -> 0xb53fa000 -- 0xb53fc000| 

 COUNT: 1  - ends at 0xb53fa03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1129 TO ALLOCATE BLOCK OF SIZE 2376
Adjusted size to: 4096
RETURN ADDRESS 0xb53fa03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5399000
removing node 0xb53fa03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1130 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1f60
removing node 0xb53ec03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1131 TO ALLOCATE BLOCK OF SIZE 690
Adjusted size to: 1024
removing node 0xb53da03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fd800
removing node 0xb53da03c of size 1024 


 REQUEST NUMBER 1132 TO ALLOCATE BLOCK OF SIZE 242
Adjusted size to: 256
removing node 0xb53da03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53da04c whose previous is 0xb53da03c and size is 16 so prev+16 =0xb53da04c 
removing node 0xb53da03c of size 512 
created new node at 0xb53ec04c whose previous is 0xb53ec03c and size is 16 so prev+16 =0xb53ec04c 
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fdc00
removing node 0xb53ec03c of size 256 


 REQUEST NUMBER 1133 TO ALLOCATE BLOCK OF SIZE 531
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53fa000 and pagePtr 0x99b8818 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 8 
stepping through nodes 
 we have 181 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0170 and the new one at 0xb53f019c 
New page node points to data page 0xb53fa000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 9 
created new node at 0xb53fe04c whose previous is 0xb53fe03c and size is 16 so prev+16 =0xb53fe04c 
removing node 0xb53fe03c of size 4096 
created new node at 0xb540204c whose previous is 0xb540203c and size is 16 so prev+16 =0xb540204c 
removing node 0xb540203c of size 2048 
created new node at 0xb540404c whose previous is 0xb540403c and size is 16 so prev+16 =0xb540404c 
RETURN ADDRESS IS ----------------------->>>>>0xb540403c-> 0xb53fa000
removing node 0xb540403c of size 1024 


 REQUEST NUMBER 1134 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
removing node 0xb53de03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
removing node 0xb53de03c of size 64 
created new node at 0xb540604c whose previous is 0xb540603c and size is 16 so prev+16 =0xb540604c 
RETURN ADDRESS 0xb540603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1f80
removing node 0xb540603c of size 32 


 REQUEST NUMBER 1135 TO ALLOCATE BLOCK OF SIZE 2016
Adjusted size to: 2048
RETURN ADDRESS 0xb540203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fa800
removing node 0xb540203c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1136 TO ALLOCATE BLOCK OF SIZE 299
Adjusted size to: 512
RETURN ADDRESS 0xb53da03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fde00
removing node 0xb53da03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1137 TO FREE BLOCK 0xb5327c00  OF SIZE 632
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5327c00 and of size: 1024 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb540404c whose previous is 0xb540403c and size is 16 so prev+16 =0xb540404c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5406000 -- 0xb5408000| 

 COUNT: 1  - ends at 0xb540603c 
	 1 -> 0xb53de000 -- 0xb53e0000| 

 COUNT: 1  - ends at 0xb53de03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb53ec000 -- 0xb53ee000| 

 COUNT: 1  - ends at 0xb53ec03c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5404000 -- 0xb5406000| 

 COUNT: 2  - ends at 0xb540404c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb53fe000 -- 0xb5400000| 

 COUNT: 1  - ends at 0xb53fe03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1138 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb540603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1fa0
removing node 0xb540603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1139 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb53de03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1fc0
removing node 0xb53de03c of size 32 


 REQUEST NUMBER 1140 TO ALLOCATE BLOCK OF SIZE 43
Adjusted size to: 64
removing node 0xb53ec03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb53ec04c whose previous is 0xb53ec03c and size is 16 so prev+16 =0xb53ec04c 
removing node 0xb53ec03c of size 128 
created new node at 0xb540604c whose previous is 0xb540603c and size is 16 so prev+16 =0xb540604c 
RETURN ADDRESS 0xb540603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fdd00
removing node 0xb540603c of size 64 


 REQUEST NUMBER 1141 TO ALLOCATE BLOCK OF SIZE 845
Adjusted size to: 1024
RETURN ADDRESS 0xb540403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fa400
removing node 0xb540403c of size 1024 


 REQUEST NUMBER 1142 TO ALLOCATE BLOCK OF SIZE 121
Adjusted size to: 128
RETURN ADDRESS 0xb53ec03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fdd80
removing node 0xb53ec03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1143 TO ALLOCATE BLOCK OF SIZE 509
Adjusted size to: 512
removing node 0xb540403c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb540404c whose previous is 0xb540403c and size is 16 so prev+16 =0xb540404c 
RETURN ADDRESS 0xb540403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327c00
removing node 0xb540403c of size 512 


 REQUEST NUMBER 1144 TO ALLOCATE BLOCK OF SIZE 1703
Adjusted size to: 2048
removing node 0xb53fe03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb53fe04c whose previous is 0xb53fe03c and size is 16 so prev+16 =0xb53fe04c 
RETURN ADDRESS 0xb53fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fb000
removing node 0xb53fe03c of size 2048 


 REQUEST NUMBER 1145 TO ALLOCATE BLOCK OF SIZE 6353
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99fa740 and page at 0xb53ec000 
adding page node for the page located at 0xb53ec000 and pagePtr 0x99fa740 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 9 
stepping through nodes 
 we have 182 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f019c and the new one at 0xb53f01c8 
New page node points to data page 0xb53ec000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 10 
RETURN ADDRESS IS 0xb53ec000 


 REQUEST NUMBER 1146 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e1fe0
removing node 0xb53de03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1147 TO ALLOCATE BLOCK OF SIZE 111
Adjusted size to: 128
removing node 0xb540403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb540404c whose previous is 0xb540403c and size is 16 so prev+16 =0xb540404c 
removing node 0xb540403c of size 256 
created new node at 0xb53de04c whose previous is 0xb53de03c and size is 16 so prev+16 =0xb53de04c 
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327e00
removing node 0xb53de03c of size 128 


 REQUEST NUMBER 1148 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
removing node 0xb540603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb540604c whose previous is 0xb540603c and size is 16 so prev+16 =0xb540604c 
RETURN ADDRESS 0xb540603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fdd40
removing node 0xb540603c of size 32 


 REQUEST NUMBER 1149 TO ALLOCATE BLOCK OF SIZE 532
Adjusted size to: 1024
removing node 0xb53fe03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb53fe04c whose previous is 0xb53fe03c and size is 16 so prev+16 =0xb53fe04c 
RETURN ADDRESS 0xb53fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fb800
removing node 0xb53fe03c of size 1024 


 REQUEST NUMBER 1150 TO ALLOCATE BLOCK OF SIZE 1247
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53da000 and pagePtr 0x99b8838 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 10 
stepping through nodes 
 we have 183 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f01c8 and the new one at 0xb53f01f4 
New page node points to data page 0xb53da000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 11 
created new node at 0xb540204c whose previous is 0xb540203c and size is 16 so prev+16 =0xb540204c 
removing node 0xb540203c of size 4096 
created new node at 0xb540804c whose previous is 0xb540803c and size is 16 so prev+16 =0xb540804c 
RETURN ADDRESS IS ----------------------->>>>>0xb540803c-> 0xb53da000
removing node 0xb540803c of size 2048 


 REQUEST NUMBER 1151 TO ALLOCATE BLOCK OF SIZE 2425
Adjusted size to: 4096
RETURN ADDRESS 0xb540203c
RETURN ADDRESS IS ----------------------->>>>> 0xb53db000
removing node 0xb540203c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1152 TO ALLOCATE BLOCK OF SIZE 401
Adjusted size to: 512
removing node 0xb53fe03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb53fe04c whose previous is 0xb53fe03c and size is 16 so prev+16 =0xb53fe04c 
RETURN ADDRESS 0xb53fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fbc00
removing node 0xb53fe03c of size 512 


 REQUEST NUMBER 1153 TO ALLOCATE BLOCK OF SIZE 6707
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99b89c0 and page at 0xb5402000 
adding page node for the page located at 0xb5402000 and pagePtr 0x99b89c0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 11 
stepping through nodes 
 we have 184 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f01f4 and the new one at 0xb53f0220 
New page node points to data page 0xb5402000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 12 
RETURN ADDRESS IS 0xb5402000 


 REQUEST NUMBER 1154 TO ALLOCATE BLOCK OF SIZE 125
Adjusted size to: 128
RETURN ADDRESS 0xb53de03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327e80
removing node 0xb53de03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1155 TO ALLOCATE BLOCK OF SIZE 2292
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53de000 and pagePtr 0x99a3a78 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 12 
stepping through nodes 
 we have 185 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0220 and the new one at 0xb53f024c 
New page node points to data page 0xb53de000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 13 
created new node at 0xb540a04c whose previous is 0xb540a03c and size is 16 so prev+16 =0xb540a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb540a03c-> 0xb53de000
removing node 0xb540a03c of size 4096 


 REQUEST NUMBER 1156 TO ALLOCATE BLOCK OF SIZE 1747
Adjusted size to: 2048
RETURN ADDRESS 0xb540803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53da800
removing node 0xb540803c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1157 TO ALLOCATE BLOCK OF SIZE 60
Adjusted size to: 64
removing node 0xb540403c of size 256 
*** freeing page for lists of size 3
created new node at 0xb540404c whose previous is 0xb540403c and size is 16 so prev+16 =0xb540404c 
removing node 0xb540403c of size 128 
created new node at 0xb540804c whose previous is 0xb540803c and size is 16 so prev+16 =0xb540804c 
RETURN ADDRESS 0xb540803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327f00
removing node 0xb540803c of size 64 


 REQUEST NUMBER 1158 TO ALLOCATE BLOCK OF SIZE 283
Adjusted size to: 512
RETURN ADDRESS 0xb53fe03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fbe00
removing node 0xb53fe03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1159 TO ALLOCATE BLOCK OF SIZE 1146
Adjusted size to: 2048
removing node 0xb540a03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb540a04c whose previous is 0xb540a03c and size is 16 so prev+16 =0xb540a04c 
RETURN ADDRESS 0xb540a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53df000
removing node 0xb540a03c of size 2048 


 REQUEST NUMBER 1160 TO ALLOCATE BLOCK OF SIZE 4019
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb53fe000 and pagePtr 0x99b8828 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 13 
stepping through nodes 
 we have 186 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f024c and the new one at 0xb53f0278 
New page node points to data page 0xb53fe000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 14 
created new node at 0xb540c04c whose previous is 0xb540c03c and size is 16 so prev+16 =0xb540c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb540c03c-> 0xb53fe000
removing node 0xb540c03c of size 4096 


 REQUEST NUMBER 1161 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb540603c
RETURN ADDRESS IS ----------------------->>>>> 0xb53fdd60
removing node 0xb540603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1162 TO ALLOCATE BLOCK OF SIZE 1736
Adjusted size to: 2048
RETURN ADDRESS 0xb540a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53df800
removing node 0xb540a03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1163 TO ALLOCATE BLOCK OF SIZE 889
Adjusted size to: 1024
removing node 0xb540c03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb540c04c whose previous is 0xb540c03c and size is 16 so prev+16 =0xb540c04c 
removing node 0xb540c03c of size 2048 
created new node at 0xb540a04c whose previous is 0xb540a03c and size is 16 so prev+16 =0xb540a04c 
RETURN ADDRESS 0xb540a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff000
removing node 0xb540a03c of size 1024 


 REQUEST NUMBER 1164 TO ALLOCATE BLOCK OF SIZE 332
Adjusted size to: 512
removing node 0xb540a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb540a04c whose previous is 0xb540a03c and size is 16 so prev+16 =0xb540a04c 
RETURN ADDRESS 0xb540a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff400
removing node 0xb540a03c of size 512 


 REQUEST NUMBER 1165 TO ALLOCATE BLOCK OF SIZE 252
Adjusted size to: 256
removing node 0xb540a03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb540a04c whose previous is 0xb540a03c and size is 16 so prev+16 =0xb540a04c 
RETURN ADDRESS 0xb540a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff600
removing node 0xb540a03c of size 256 


 REQUEST NUMBER 1166 TO FREE BLOCK 0xb52dca80  OF SIZE 66
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52dca80 and of size: 128 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb540404c whose previous is 0xb540403c and size is 16 so prev+16 =0xb540404c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5408000 -- 0xb540a000| 

 COUNT: 1  - ends at 0xb540803c 
	 2 -> 0xb5404000 -- 0xb5406000| 

 COUNT: 2  - ends at 0xb540404c 
	 3 -> 0xb540a000 -- 0xb540c000| 

 COUNT: 1  - ends at 0xb540a03c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb540c000 -- 0xb540e000| 

 COUNT: 1  - ends at 0xb540c03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1167 TO ALLOCATE BLOCK OF SIZE 2919
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5406000 and pagePtr 0x996ded0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 14 
stepping through nodes 
 we have 187 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0278 and the new one at 0xb53f02a4 
New page node points to data page 0xb5406000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 15 
created new node at 0xb540e04c whose previous is 0xb540e03c and size is 16 so prev+16 =0xb540e04c 
RETURN ADDRESS IS ----------------------->>>>>0xb540e03c-> 0xb5406000
removing node 0xb540e03c of size 4096 


 REQUEST NUMBER 1168 TO ALLOCATE BLOCK OF SIZE 47
Adjusted size to: 64
RETURN ADDRESS 0xb540803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327f40
removing node 0xb540803c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1169 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
removing node 0xb540403c of size 128 
created new node at 0xb540804c whose previous is 0xb540803c and size is 16 so prev+16 =0xb540804c 
removing node 0xb540803c of size 64 
created new node at 0xb541004c whose previous is 0xb541003c and size is 16 so prev+16 =0xb541004c 
RETURN ADDRESS 0xb541003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327f80
removing node 0xb541003c of size 32 


 REQUEST NUMBER 1170 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
RETURN ADDRESS 0xb541003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327fa0
removing node 0xb541003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1171 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
removing node 0xb540803c of size 64 
*** freeing page for lists of size 1
created new node at 0xb540804c whose previous is 0xb540803c and size is 16 so prev+16 =0xb540804c 
RETURN ADDRESS 0xb540803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327fc0
removing node 0xb540803c of size 32 


 REQUEST NUMBER 1172 TO ALLOCATE BLOCK OF SIZE 94
Adjusted size to: 128
RETURN ADDRESS 0xb540403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52dca80
removing node 0xb540403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1173 TO ALLOCATE BLOCK OF SIZE 50
Adjusted size to: 64
removing node 0xb540a03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb540a04c whose previous is 0xb540a03c and size is 16 so prev+16 =0xb540a04c 
removing node 0xb540a03c of size 128 
created new node at 0xb540404c whose previous is 0xb540403c and size is 16 so prev+16 =0xb540404c 
RETURN ADDRESS 0xb540403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff700
removing node 0xb540403c of size 64 


 REQUEST NUMBER 1174 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
RETURN ADDRESS 0xb540803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327fe0
removing node 0xb540803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1175 TO ALLOCATE BLOCK OF SIZE 1899
Adjusted size to: 2048
RETURN ADDRESS 0xb540c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff800
removing node 0xb540c03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1176 TO ALLOCATE BLOCK OF SIZE 5978
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9967700 and page at 0xb540c000 
adding page node for the page located at 0xb540c000 and pagePtr 0x9967700 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 15 
stepping through nodes 
 we have 188 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f02a4 and the new one at 0xb53f02d0 
New page node points to data page 0xb540c000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 16 
RETURN ADDRESS IS 0xb540c000 


 REQUEST NUMBER 1177 TO ALLOCATE BLOCK OF SIZE 179
Adjusted size to: 256
removing node 0xb540e03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb540e04c whose previous is 0xb540e03c and size is 16 so prev+16 =0xb540e04c 
removing node 0xb540e03c of size 2048 
created new node at 0xb540804c whose previous is 0xb540803c and size is 16 so prev+16 =0xb540804c 
removing node 0xb540803c of size 1024 
created new node at 0xb541004c whose previous is 0xb541003c and size is 16 so prev+16 =0xb541004c 
removing node 0xb541003c of size 512 
created new node at 0xb541204c whose previous is 0xb541203c and size is 16 so prev+16 =0xb541204c 
RETURN ADDRESS 0xb541203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5407000
removing node 0xb541203c of size 256 


 REQUEST NUMBER 1178 TO ALLOCATE BLOCK OF SIZE 3014
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5414000 and pagePtr 0x9a072b0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 16 
stepping through nodes 
 we have 189 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f02d0 and the new one at 0xb53f02fc 
New page node points to data page 0xb5414000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 17 
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
RETURN ADDRESS IS ----------------------->>>>>0xb541603c-> 0xb5414000
removing node 0xb541603c of size 4096 


 REQUEST NUMBER 1179 TO FREE BLOCK 0xb52ee800  OF SIZE 1944
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52ee800 and of size: 2048 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb540e04c whose previous is 0xb540e03c and size is 16 so prev+16 =0xb540e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5404000 -- 0xb5406000| 

 COUNT: 1  - ends at 0xb540403c 
	 2 -> 0xb540a000 -- 0xb540c000| 

 COUNT: 1  - ends at 0xb540a03c 
	 3 -> 0xb5412000 -- 0xb5414000| 

 COUNT: 1  - ends at 0xb541203c 
	 4 -> 0xb5410000 -- 0xb5412000| 

 COUNT: 1  - ends at 0xb541003c 
	 5 -> 0xb5408000 -- 0xb540a000| 

 COUNT: 1  - ends at 0xb540803c 
	 6 -> 0xb540e000 -- 0xb5410000| 

 COUNT: 2  - ends at 0xb540e04c 
	 7 -> 0xb5416000 -- 0xb5418000| 

 COUNT: 1  - ends at 0xb541603c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1180 TO ALLOCATE BLOCK OF SIZE 807
Adjusted size to: 1024
RETURN ADDRESS 0xb540803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5407400
removing node 0xb540803c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1181 TO ALLOCATE BLOCK OF SIZE 5618
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a071c8 and page at 0xb5408000 
adding page node for the page located at 0xb5408000 and pagePtr 0x9a071c8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 17 
stepping through nodes 
 we have 190 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f02fc and the new one at 0xb53f0328 
New page node points to data page 0xb5408000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 18 
RETURN ADDRESS IS 0xb5408000 


 REQUEST NUMBER 1182 TO ALLOCATE BLOCK OF SIZE 53
Adjusted size to: 64
RETURN ADDRESS 0xb540403c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff740
removing node 0xb540403c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1183 TO ALLOCATE BLOCK OF SIZE 476
Adjusted size to: 512
RETURN ADDRESS 0xb541003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5407200
removing node 0xb541003c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1184 TO ALLOCATE BLOCK OF SIZE 4125
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a071d8 and page at 0xb5410000 
adding page node for the page located at 0xb5410000 and pagePtr 0x9a071d8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 18 
stepping through nodes 
 we have 191 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0328 and the new one at 0xb53f0354 
New page node points to data page 0xb5410000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 19 
RETURN ADDRESS IS 0xb5410000 


 REQUEST NUMBER 1185 TO ALLOCATE BLOCK OF SIZE 4692
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99b8848 and page at 0xb5404000 
adding page node for the page located at 0xb5404000 and pagePtr 0x99b8848 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 19 
stepping through nodes 
 we have 192 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0354 and the new one at 0xb53f0380 
New page node points to data page 0xb5404000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 20 
RETURN ADDRESS IS 0xb5404000 


 REQUEST NUMBER 1186 TO FREE BLOCK 0xb5337d80  OF SIZE 71
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5337d80 and of size: 128 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb540a04c whose previous is 0xb540a03c and size is 16 so prev+16 =0xb540a04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb540a000 -- 0xb540c000| 

 COUNT: 2  - ends at 0xb540a04c 
	 3 -> 0xb5412000 -- 0xb5414000| 

 COUNT: 1  - ends at 0xb541203c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb540e000 -- 0xb5410000| 

 COUNT: 2  - ends at 0xb540e04c 
	 7 -> 0xb5416000 -- 0xb5418000| 

 COUNT: 1  - ends at 0xb541603c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1187 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb540a03c of size 128 
created new node at 0xb541804c whose previous is 0xb541803c and size is 16 so prev+16 =0xb541804c 
removing node 0xb541803c of size 64 
created new node at 0xb541a04c whose previous is 0xb541a03c and size is 16 so prev+16 =0xb541a04c 
RETURN ADDRESS 0xb541a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff780
removing node 0xb541a03c of size 32 


 REQUEST NUMBER 1188 TO ALLOCATE BLOCK OF SIZE 947
Adjusted size to: 1024
removing node 0xb540e03c of size 2048 
created new node at 0xb541c04c whose previous is 0xb541c03c and size is 16 so prev+16 =0xb541c04c 
RETURN ADDRESS 0xb541c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5407800
removing node 0xb541c03c of size 1024 


 REQUEST NUMBER 1189 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
RETURN ADDRESS 0xb541a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff7a0
removing node 0xb541a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1190 TO ALLOCATE BLOCK OF SIZE 2646
Adjusted size to: 4096
RETURN ADDRESS 0xb541603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5415000
removing node 0xb541603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1191 TO ALLOCATE BLOCK OF SIZE 576
Adjusted size to: 1024
RETURN ADDRESS 0xb541c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5407c00
removing node 0xb541c03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1192 TO ALLOCATE BLOCK OF SIZE 938
Adjusted size to: 1024
removing node 0xb540e03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb540e04c whose previous is 0xb540e03c and size is 16 so prev+16 =0xb540e04c 
RETURN ADDRESS 0xb540e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ee800
removing node 0xb540e03c of size 1024 


 REQUEST NUMBER 1193 TO ALLOCATE BLOCK OF SIZE 161
Adjusted size to: 256
RETURN ADDRESS 0xb541203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5407100
removing node 0xb541203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1194 TO ALLOCATE BLOCK OF SIZE 4261
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a071e8 and page at 0xb5412000 
adding page node for the page located at 0xb5412000 and pagePtr 0x9a071e8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 20 
stepping through nodes 
 we have 193 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0380 and the new one at 0xb53f03ac 
New page node points to data page 0xb5412000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 21 
RETURN ADDRESS IS 0xb5412000 


 REQUEST NUMBER 1195 TO ALLOCATE BLOCK OF SIZE 65
Adjusted size to: 128
RETURN ADDRESS 0xb540a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337d80
removing node 0xb540a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1196 TO ALLOCATE BLOCK OF SIZE 1237
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb540a000 and pagePtr 0x99676b0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 21 
stepping through nodes 
 we have 194 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f03ac and the new one at 0xb53f03d8 
New page node points to data page 0xb540a000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 22 
created new node at 0xb541c04c whose previous is 0xb541c03c and size is 16 so prev+16 =0xb541c04c 
removing node 0xb541c03c of size 4096 
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
RETURN ADDRESS IS ----------------------->>>>>0xb541603c-> 0xb540a000
removing node 0xb541603c of size 2048 


 REQUEST NUMBER 1197 TO ALLOCATE BLOCK OF SIZE 37
Adjusted size to: 64
RETURN ADDRESS 0xb541803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff7c0
removing node 0xb541803c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1198 TO ALLOCATE BLOCK OF SIZE 977
Adjusted size to: 1024
RETURN ADDRESS 0xb540e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52eec00
removing node 0xb540e03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1199 TO ALLOCATE BLOCK OF SIZE 2708
Adjusted size to: 4096
RETURN ADDRESS 0xb541c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb540b000
removing node 0xb541c03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1200 TO ALLOCATE BLOCK OF SIZE 5207
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9967728 and page at 0xb541c000 
adding page node for the page located at 0xb541c000 and pagePtr 0x9967728 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 22 
stepping through nodes 
 we have 195 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f03d8 and the new one at 0xb53f0404 
New page node points to data page 0xb541c000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 23 
RETURN ADDRESS IS 0xb541c000 


 REQUEST NUMBER 1201 TO ALLOCATE BLOCK OF SIZE 3603
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb540e000 and pagePtr 0x9907de8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 23 
stepping through nodes 
 we have 196 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0404 and the new one at 0xb53f0430 
New page node points to data page 0xb540e000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 24 
created new node at 0xb541804c whose previous is 0xb541803c and size is 16 so prev+16 =0xb541804c 
RETURN ADDRESS IS ----------------------->>>>>0xb541803c-> 0xb540e000
removing node 0xb541803c of size 4096 


 REQUEST NUMBER 1202 TO FREE BLOCK 0xb539f000  OF SIZE 3510
coalescing blocks if possible
trying to coalesce a block at ptr 0xb539f000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb541804c whose previous is 0xb541803c and size is 16 so prev+16 =0xb541804c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb5416000 -- 0xb5418000| 

 COUNT: 1  - ends at 0xb541603c 
	 7 -> 0xb5418000 -- 0xb541a000| 

 COUNT: 2  - ends at 0xb541804c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1203 TO ALLOCATE BLOCK OF SIZE 5077
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9907e20 and page at 0xb541a000 
adding page node for the page located at 0xb541a000 and pagePtr 0x9907e20 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 24 
stepping through nodes 
 we have 197 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0430 and the new one at 0xb53f045c 
New page node points to data page 0xb541a000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 25 
RETURN ADDRESS IS 0xb541a000 


 REQUEST NUMBER 1204 TO ALLOCATE BLOCK OF SIZE 453
Adjusted size to: 512
removing node 0xb541603c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
removing node 0xb541603c of size 1024 
created new node at 0xb541e04c whose previous is 0xb541e03c and size is 16 so prev+16 =0xb541e04c 
RETURN ADDRESS 0xb541e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb540a800
removing node 0xb541e03c of size 512 


 REQUEST NUMBER 1205 TO ALLOCATE BLOCK OF SIZE 1548
Adjusted size to: 2048
removing node 0xb541803c of size 4096 
created new node at 0xb542004c whose previous is 0xb542003c and size is 16 so prev+16 =0xb542004c 
RETURN ADDRESS 0xb542003c
RETURN ADDRESS IS ----------------------->>>>> 0xb540f000
removing node 0xb542003c of size 2048 


 REQUEST NUMBER 1206 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb541e03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb541e04c whose previous is 0xb541e03c and size is 16 so prev+16 =0xb541e04c 
removing node 0xb541e03c of size 256 
created new node at 0xb542204c whose previous is 0xb542203c and size is 16 so prev+16 =0xb542204c 
removing node 0xb542203c of size 128 
created new node at 0xb542404c whose previous is 0xb542403c and size is 16 so prev+16 =0xb542404c 
removing node 0xb542403c of size 64 
created new node at 0xb542604c whose previous is 0xb542603c and size is 16 so prev+16 =0xb542604c 
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb540aa00
removing node 0xb542603c of size 32 


 REQUEST NUMBER 1207 TO ALLOCATE BLOCK OF SIZE 2587
Adjusted size to: 4096
RETURN ADDRESS 0xb541803c
RETURN ADDRESS IS ----------------------->>>>> 0xb539f000
removing node 0xb541803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1208 TO ALLOCATE BLOCK OF SIZE 3937
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5418000 and pagePtr 0x9a072c0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 25 
stepping through nodes 
 we have 198 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f045c and the new one at 0xb53f0488 
New page node points to data page 0xb5418000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 26 
created new node at 0xb542804c whose previous is 0xb542803c and size is 16 so prev+16 =0xb542804c 
RETURN ADDRESS IS ----------------------->>>>>0xb542803c-> 0xb5418000
removing node 0xb542803c of size 4096 


 REQUEST NUMBER 1209 TO ALLOCATE BLOCK OF SIZE 102
Adjusted size to: 128
RETURN ADDRESS 0xb542203c
RETURN ADDRESS IS ----------------------->>>>> 0xb540aa80
removing node 0xb542203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1210 TO ALLOCATE BLOCK OF SIZE 7168
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9940b30 and page at 0xb5422000 
adding page node for the page located at 0xb5422000 and pagePtr 0x9940b30 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 26 
stepping through nodes 
 we have 199 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0488 and the new one at 0xb53f04b4 
New page node points to data page 0xb5422000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 27 
RETURN ADDRESS IS 0xb5422000 


 REQUEST NUMBER 1211 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
RETURN ADDRESS 0xb542403c
RETURN ADDRESS IS ----------------------->>>>> 0xb540aa40
removing node 0xb542403c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1212 TO ALLOCATE BLOCK OF SIZE 12
Adjusted size to: 32
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb540aa20
removing node 0xb542603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1213 TO ALLOCATE BLOCK OF SIZE 166
Adjusted size to: 256
RETURN ADDRESS 0xb541e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ab00
removing node 0xb541e03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1214 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
removing node 0xb541603c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
removing node 0xb541603c of size 512 
created new node at 0xb541e04c whose previous is 0xb541e03c and size is 16 so prev+16 =0xb541e04c 
removing node 0xb541e03c of size 256 
created new node at 0xb542604c whose previous is 0xb542603c and size is 16 so prev+16 =0xb542604c 
removing node 0xb542603c of size 128 
created new node at 0xb542404c whose previous is 0xb542403c and size is 16 so prev+16 =0xb542404c 
RETURN ADDRESS 0xb542403c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ac00
removing node 0xb542403c of size 64 


 REQUEST NUMBER 1215 TO ALLOCATE BLOCK OF SIZE 351
Adjusted size to: 512
RETURN ADDRESS 0xb541603c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ae00
removing node 0xb541603c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1216 TO ALLOCATE BLOCK OF SIZE 2231
Adjusted size to: 4096
RETURN ADDRESS 0xb542803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5419000
removing node 0xb542803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1217 TO ALLOCATE BLOCK OF SIZE 325
Adjusted size to: 512
removing node 0xb542003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb542004c whose previous is 0xb542003c and size is 16 so prev+16 =0xb542004c 
removing node 0xb542003c of size 1024 
created new node at 0xb542804c whose previous is 0xb542803c and size is 16 so prev+16 =0xb542804c 
RETURN ADDRESS 0xb542803c
RETURN ADDRESS IS ----------------------->>>>> 0xb540f800
removing node 0xb542803c of size 512 


 REQUEST NUMBER 1218 TO ALLOCATE BLOCK OF SIZE 737
Adjusted size to: 1024
RETURN ADDRESS 0xb542003c
RETURN ADDRESS IS ----------------------->>>>> 0xb540fc00
removing node 0xb542003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1219 TO ALLOCATE BLOCK OF SIZE 2274
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5420000 and pagePtr 0x9907df8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 27 
stepping through nodes 
 we have 200 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f04b4 and the new one at 0xb53f04e0 
New page node points to data page 0xb5420000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 28 
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
RETURN ADDRESS IS ----------------------->>>>>0xb541603c-> 0xb5420000
removing node 0xb541603c of size 4096 


 REQUEST NUMBER 1220 TO ALLOCATE BLOCK OF SIZE 691
Adjusted size to: 1024
removing node 0xb541603c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
removing node 0xb541603c of size 2048 
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5421000
removing node 0xb542a03c of size 1024 


 REQUEST NUMBER 1221 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
removing node 0xb542403c of size 64 
*** freeing page for lists of size 1
created new node at 0xb542404c whose previous is 0xb542403c and size is 16 so prev+16 =0xb542404c 
RETURN ADDRESS 0xb542403c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ac40
removing node 0xb542403c of size 32 


 REQUEST NUMBER 1222 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb542403c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ac60
removing node 0xb542403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1223 TO ALLOCATE BLOCK OF SIZE 61
Adjusted size to: 64
removing node 0xb542603c of size 128 
*** freeing page for lists of size 2
created new node at 0xb542604c whose previous is 0xb542603c and size is 16 so prev+16 =0xb542604c 
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ac80
removing node 0xb542603c of size 64 


 REQUEST NUMBER 1224 TO ALLOCATE BLOCK OF SIZE 1629
Adjusted size to: 2048
RETURN ADDRESS 0xb541603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5421800
removing node 0xb541603c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1225 TO ALLOCATE BLOCK OF SIZE 351
Adjusted size to: 512
RETURN ADDRESS 0xb542803c
RETURN ADDRESS IS ----------------------->>>>> 0xb540fa00
removing node 0xb542803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1226 TO ALLOCATE BLOCK OF SIZE 76
Adjusted size to: 128
removing node 0xb541e03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb541e04c whose previous is 0xb541e03c and size is 16 so prev+16 =0xb541e04c 
RETURN ADDRESS 0xb541e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ad00
removing node 0xb541e03c of size 128 


 REQUEST NUMBER 1227 TO ALLOCATE BLOCK OF SIZE 77
Adjusted size to: 128
RETURN ADDRESS 0xb541e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ad80
removing node 0xb541e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1228 TO ALLOCATE BLOCK OF SIZE 402
Adjusted size to: 512
removing node 0xb542a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5421400
removing node 0xb542a03c of size 512 


 REQUEST NUMBER 1229 TO FREE BLOCK 0xb52a1700  OF SIZE 25
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52a1700 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb541e000 -- 0xb5420000| 

 COUNT: 1  - ends at 0xb541e03c 
	 1 -> 0xb5426000 -- 0xb5428000| 

 COUNT: 1  - ends at 0xb542603c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 1  - ends at 0xb542a03c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1230 TO ALLOCATE BLOCK OF SIZE 156
Adjusted size to: 256
removing node 0xb542a03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5421600
removing node 0xb542a03c of size 256 


 REQUEST NUMBER 1231 TO ALLOCATE BLOCK OF SIZE 3217
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5428000 and pagePtr 0x9940b70 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 28 
stepping through nodes 
 we have 201 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f04e0 and the new one at 0xb53f050c 
New page node points to data page 0xb5428000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 29 
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
RETURN ADDRESS IS ----------------------->>>>>0xb541603c-> 0xb5428000
removing node 0xb541603c of size 4096 


 REQUEST NUMBER 1232 TO ALLOCATE BLOCK OF SIZE 34
Adjusted size to: 64
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb540acc0
removing node 0xb542603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1233 TO FREE BLOCK 0xb53e0a00  OF SIZE 214
coalescing blocks if possible
trying to coalesce a block at ptr 0xb53e0a00 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb541e000 -- 0xb5420000| 

 COUNT: 1  - ends at 0xb541e03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 2  - ends at 0xb542a04c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb5416000 -- 0xb5418000| 

 COUNT: 1  - ends at 0xb541603c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1234 TO ALLOCATE BLOCK OF SIZE 43
Adjusted size to: 64
removing node 0xb542a03c of size 256 
created new node at 0xb542604c whose previous is 0xb542603c and size is 16 so prev+16 =0xb542604c 
removing node 0xb542603c of size 128 
created new node at 0xb542404c whose previous is 0xb542403c and size is 16 so prev+16 =0xb542404c 
RETURN ADDRESS 0xb542403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5421700
removing node 0xb542403c of size 64 


 REQUEST NUMBER 1235 TO ALLOCATE BLOCK OF SIZE 126
Adjusted size to: 128
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5421780
removing node 0xb542603c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1236 TO ALLOCATE BLOCK OF SIZE 174
Adjusted size to: 256
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53e0a00
removing node 0xb542a03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1237 TO ALLOCATE BLOCK OF SIZE 861
Adjusted size to: 1024
removing node 0xb541603c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
removing node 0xb541603c of size 2048 
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5429000
removing node 0xb542a03c of size 1024 


 REQUEST NUMBER 1238 TO ALLOCATE BLOCK OF SIZE 1066
Adjusted size to: 2048
RETURN ADDRESS 0xb541603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5429800
removing node 0xb541603c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1239 TO ALLOCATE BLOCK OF SIZE 436
Adjusted size to: 512
removing node 0xb542a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5429400
removing node 0xb542a03c of size 512 


 REQUEST NUMBER 1240 TO ALLOCATE BLOCK OF SIZE 35
Adjusted size to: 64
RETURN ADDRESS 0xb542403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5421740
removing node 0xb542403c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1241 TO ALLOCATE BLOCK OF SIZE 4887
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99b5840 and page at 0xb5424000 
adding page node for the page located at 0xb5424000 and pagePtr 0x99b5840 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 29 
stepping through nodes 
 we have 202 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f050c and the new one at 0xb53f0538 
New page node points to data page 0xb5424000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 30 
RETURN ADDRESS IS 0xb5424000 


 REQUEST NUMBER 1242 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
RETURN ADDRESS 0xb541e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1700
removing node 0xb541e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1243 TO ALLOCATE BLOCK OF SIZE 483
Adjusted size to: 512
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5429600
removing node 0xb542a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1244 TO FREE BLOCK 0xb53ff700  OF SIZE 50
coalescing blocks if possible
trying to coalesce a block at ptr 0xb53ff700 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 1  - ends at 0xb542a03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1245 TO ALLOCATE BLOCK OF SIZE 103
Adjusted size to: 128
RETURN ADDRESS (nil)
adding page node for the page located at 0xb541e000 and pagePtr 0x9940b20 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 30 
stepping through nodes 
 we have 203 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0538 and the new one at 0xb53f0564 
New page node points to data page 0xb541e000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 31 
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
removing node 0xb541603c of size 4096 
created new node at 0xb542604c whose previous is 0xb542603c and size is 16 so prev+16 =0xb542604c 
removing node 0xb542603c of size 2048 
created new node at 0xb542c04c whose previous is 0xb542c03c and size is 16 so prev+16 =0xb542c04c 
removing node 0xb542c03c of size 1024 
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
removing node 0xb542e03c of size 512 
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
removing node 0xb543003c of size 256 
created new node at 0xb543204c whose previous is 0xb543203c and size is 16 so prev+16 =0xb543204c 
RETURN ADDRESS IS ----------------------->>>>>0xb543203c-> 0xb541e000
removing node 0xb543203c of size 128 


 REQUEST NUMBER 1246 TO FREE BLOCK 0xb5354000  OF SIZE 3780
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5354000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 1  - ends at 0xb542a03c 
	 2 -> 0xb5432000 -- 0xb5434000| 

 COUNT: 1  - ends at 0xb543203c 
	 3 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 1  - ends at 0xb543003c 
	 4 -> 0xb542e000 -- 0xb5430000| 

 COUNT: 1  - ends at 0xb542e03c 
	 5 -> 0xb542c000 -- 0xb542e000| 

 COUNT: 1  - ends at 0xb542c03c 
	 6 -> 0xb5426000 -- 0xb5428000| 

 COUNT: 1  - ends at 0xb542603c 
	 7 -> 0xb5416000 -- 0xb5418000| 

 COUNT: 2  - ends at 0xb541604c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1247 TO ALLOCATE BLOCK OF SIZE 33
Adjusted size to: 64
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53ff700
removing node 0xb542a03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1248 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
removing node 0xb543203c of size 128 
*** freeing page for lists of size 2
created new node at 0xb543204c whose previous is 0xb543203c and size is 16 so prev+16 =0xb543204c 
removing node 0xb543203c of size 64 
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e080
removing node 0xb542a03c of size 32 


 REQUEST NUMBER 1249 TO ALLOCATE BLOCK OF SIZE 994
Adjusted size to: 1024
RETURN ADDRESS 0xb542c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e400
removing node 0xb542c03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1250 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e0a0
removing node 0xb542a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1251 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
removing node 0xb543203c of size 64 
*** freeing page for lists of size 1
created new node at 0xb543204c whose previous is 0xb543203c and size is 16 so prev+16 =0xb543204c 
RETURN ADDRESS 0xb543203c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e0c0
removing node 0xb543203c of size 32 


 REQUEST NUMBER 1252 TO ALLOCATE BLOCK OF SIZE 725
Adjusted size to: 1024
removing node 0xb542603c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb542604c whose previous is 0xb542603c and size is 16 so prev+16 =0xb542604c 
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e800
removing node 0xb542603c of size 1024 


 REQUEST NUMBER 1253 TO ALLOCATE BLOCK OF SIZE 289
Adjusted size to: 512
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e200
removing node 0xb542e03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1254 TO ALLOCATE BLOCK OF SIZE 1391
Adjusted size to: 2048
removing node 0xb541603c of size 4096 
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541f000
removing node 0xb542e03c of size 2048 


 REQUEST NUMBER 1255 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
RETURN ADDRESS 0xb543203c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e0e0
removing node 0xb543203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1256 TO ALLOCATE BLOCK OF SIZE 575
Adjusted size to: 1024
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb541ec00
removing node 0xb542603c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1257 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb543003c of size 256 
*** freeing page for lists of size 3
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
removing node 0xb543003c of size 128 
created new node at 0xb542604c whose previous is 0xb542603c and size is 16 so prev+16 =0xb542604c 
removing node 0xb542603c of size 64 
created new node at 0xb543204c whose previous is 0xb543203c and size is 16 so prev+16 =0xb543204c 
RETURN ADDRESS 0xb543203c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e100
removing node 0xb543203c of size 32 


 REQUEST NUMBER 1258 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
RETURN ADDRESS 0xb543203c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e120
removing node 0xb543203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1259 TO ALLOCATE BLOCK OF SIZE 210
Adjusted size to: 256
removing node 0xb542e03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
removing node 0xb542e03c of size 1024 
created new node at 0xb543204c whose previous is 0xb543203c and size is 16 so prev+16 =0xb543204c 
removing node 0xb543203c of size 512 
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541f800
removing node 0xb542a03c of size 256 


 REQUEST NUMBER 1260 TO ALLOCATE BLOCK OF SIZE 40
Adjusted size to: 64
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e140
removing node 0xb542603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1261 TO FREE BLOCK 0xb5382780  OF SIZE 81
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5382780 and of size: 128 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 2  - ends at 0xb543004c 
	 3 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 1  - ends at 0xb542a03c 
	 4 -> 0xb5432000 -- 0xb5434000| 

 COUNT: 1  - ends at 0xb543203c 
	 5 -> 0xb542e000 -- 0xb5430000| 

 COUNT: 1  - ends at 0xb542e03c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb5416000 -- 0xb5418000| 

 COUNT: 1  - ends at 0xb541603c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1262 TO ALLOCATE BLOCK OF SIZE 1477
Adjusted size to: 2048
removing node 0xb541603c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb541604c whose previous is 0xb541603c and size is 16 so prev+16 =0xb541604c 
RETURN ADDRESS 0xb541603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5354000
removing node 0xb541603c of size 2048 


 REQUEST NUMBER 1263 TO ALLOCATE BLOCK OF SIZE 235
Adjusted size to: 256
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541f900
removing node 0xb542a03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1264 TO FREE BLOCK 0xb5379000  OF SIZE 2541
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5379000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 2  - ends at 0xb543004c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5432000 -- 0xb5434000| 

 COUNT: 1  - ends at 0xb543203c 
	 5 -> 0xb542e000 -- 0xb5430000| 

 COUNT: 1  - ends at 0xb542e03c 
	 6 -> 0xb5416000 -- 0xb5418000| 

 COUNT: 1  - ends at 0xb541603c 
	 7 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 1  - ends at 0xb542a03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1265 TO ALLOCATE BLOCK OF SIZE 2414
Adjusted size to: 4096
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5379000
removing node 0xb542a03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1266 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
removing node 0xb543003c of size 128 
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
removing node 0xb542a03c of size 64 
created new node at 0xb542604c whose previous is 0xb542603c and size is 16 so prev+16 =0xb542604c 
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e180
removing node 0xb542603c of size 32 


 REQUEST NUMBER 1267 TO ALLOCATE BLOCK OF SIZE 843
Adjusted size to: 1024
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541fc00
removing node 0xb542e03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1268 TO ALLOCATE BLOCK OF SIZE 90
Adjusted size to: 128
RETURN ADDRESS 0xb543003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382780
removing node 0xb543003c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1269 TO FREE BLOCK 0xb5386000  OF SIZE 5296
removing pageNode to page with ptr 0x9996148 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
IN THE LOOp 0xb527c66c 
IN THE LOOp 0xb527c698 
IN THE LOOp 0xb527c6c4 
IN THE LOOp 0xb527c6f0 
IN THE LOOp 0xb527c71c 
IN THE LOOp 0xb527c748 
IN THE LOOp 0xb527c774 
IN THE LOOp 0xb527c7a0 
IN THE LOOp 0xb527c7cc 
IN THE LOOp 0xb527c7f8 
IN THE LOOp 0xb527c824 
IN THE LOOp 0xb527c850 
IN THE LOOp 0xb527c87c 
IN THE LOOp 0xb527c8a8 
IN THE LOOp 0xb527c8d4 
IN THE LOOp 0xb527c900 
IN THE LOOp 0xb527c92c 
IN THE LOOp 0xb527c958 
IN THE LOOp 0xb527c984 
IN THE LOOp 0xb527c9b0 
IN THE LOOp 0xb527c9dc 
IN THE LOOp 0xb527ca08 
IN THE LOOp 0xb527ca34 
IN THE LOOp 0xb527ca60 
IN THE LOOp 0xb527ca8c 
IN THE LOOp 0xb527cab8 
IN THE LOOp 0xb527cae4 
IN THE LOOp 0xb527cb10 
IN THE LOOp 0xb527cb3c 
IN THE LOOp 0xb527cb68 
IN THE LOOp 0xb527cb94 
IN THE LOOp 0xb527cbc0 
IN THE LOOp 0xb527cbec 
IN THE LOOp 0xb527cc18 
IN THE LOOp 0xb527cc44 
IN THE LOOp 0xb527cc70 
IN THE LOOp 0xb527cc9c 
IN THE LOOp 0xb527ccc8 
IN THE LOOp 0xb527ccf4 
IN THE LOOp 0xb527cd20 
IN THE LOOp 0xb527cd4c 
IN THE LOOp 0xb527cd78 
IN THE LOOp 0xb527cda4 
IN THE LOOp 0xb527cdd0 
IN THE LOOp 0xb527cdfc 
IN THE LOOp 0xb527ce28 
IN THE LOOp 0xb527ce54 
IN THE LOOp 0xb527ce80 
IN THE LOOp 0xb527ceac 
IN THE LOOp 0xb527ced8 
IN THE LOOp 0xb527cf04 
IN THE LOOp 0xb527cf30 
IN THE LOOp 0xb527cf5c 
IN THE LOOp 0xb527cf88 
IN THE LOOp 0xb527cfb4 
IN THE LOOp 0xb527cfe0 
IN THE LOOp 0xb527d00c 
IN THE LOOp 0xb527d038 
IN THE LOOp 0xb527d064 
IN THE LOOp 0xb527d090 
IN THE LOOp 0xb527d0bc 
IN THE LOOp 0xb527d0e8 
IN THE LOOp 0xb527d114 
IN THE LOOp 0xb527d140 
IN THE LOOp 0xb527d16c 
IN THE LOOp 0xb527d198 
IN THE LOOp 0xb527d1c4 
IN THE LOOp 0xb527d1f0 
IN THE LOOp 0xb527d21c 
IN THE LOOp 0xb527d248 
IN THE LOOp 0xb527d274 
IN THE LOOp 0xb527d2a0 
IN THE LOOp 0xb527d2cc 
IN THE LOOp 0xb527d2f8 
IN THE LOOp 0xb527d324 
IN THE LOOp 0xb527d350 
IN THE LOOp 0xb527d37c 
IN THE LOOp 0xb527d3a8 
IN THE LOOp 0xb527d3d4 
IN THE LOOp 0xb527d400 
IN THE LOOp 0xb527d42c 
IN THE LOOp 0xb527d458 
IN THE LOOp 0xb527d484 
IN THE LOOp 0xb527d4b0 
IN THE LOOp 0xb527d4dc 
out of loop 
IN LOOPP 0xb527d534 -> 0xb527d560 (next) 
IN LOOPP 0xb527d560 -> 0xb527d58c (next) 
IN LOOPP 0xb527d58c -> 0xb527d5b8 (next) 
IN LOOPP 0xb527d5b8 -> 0xb527d5e4 (next) 
IN LOOPP 0xb527d5e4 -> 0xb527d610 (next) 
IN LOOPP 0xb527d610 -> 0xb527d63c (next) 
IN LOOPP 0xb527d63c -> 0xb527d668 (next) 
IN LOOPP 0xb527d668 -> 0xb527d694 (next) 
IN LOOPP 0xb527d694 -> 0xb527d6c0 (next) 
IN LOOPP 0xb527d6c0 -> 0xb527d6ec (next) 
IN LOOPP 0xb527d6ec -> 0xb527d718 (next) 
IN LOOPP 0xb527d718 -> 0xb527d744 (next) 
IN LOOPP 0xb527d744 -> 0xb527d770 (next) 
IN LOOPP 0xb527d770 -> 0xb527d79c (next) 
IN LOOPP 0xb527d79c -> 0xb527d7c8 (next) 
IN LOOPP 0xb527d7c8 -> 0xb527d7f4 (next) 
IN LOOPP 0xb527d7f4 -> 0xb527d820 (next) 
IN LOOPP 0xb527d820 -> 0xb527d84c (next) 
IN LOOPP 0xb527d84c -> 0xb527d878 (next) 
IN LOOPP 0xb527d878 -> 0xb527d8a4 (next) 
IN LOOPP 0xb527d8a4 -> 0xb527d8d0 (next) 
IN LOOPP 0xb527d8d0 -> 0xb527d8fc (next) 
IN LOOPP 0xb527d8fc -> 0xb527d928 (next) 
IN LOOPP 0xb527d928 -> 0xb527d954 (next) 
IN LOOPP 0xb527d954 -> 0xb527d980 (next) 
IN LOOPP 0xb527d980 -> 0xb527d9ac (next) 
IN LOOPP 0xb527d9ac -> 0xb527d9d8 (next) 
IN LOOPP 0xb527d9d8 -> 0xb527da04 (next) 
IN LOOPP 0xb527da04 -> 0xb527da30 (next) 
IN LOOPP 0xb527da30 -> 0xb527da5c (next) 
IN LOOPP 0xb527da5c -> 0xb527da88 (next) 
IN LOOPP 0xb527da88 -> 0xb527dab4 (next) 
IN LOOPP 0xb527dab4 -> 0xb527dae0 (next) 
IN LOOPP 0xb527dae0 -> 0xb527db0c (next) 
IN LOOPP 0xb527db0c -> 0xb527db38 (next) 
IN LOOPP 0xb527db38 -> 0xb527db64 (next) 
IN LOOPP 0xb527db64 -> 0xb527db90 (next) 
IN LOOPP 0xb527db90 -> 0xb527dbbc (next) 
IN LOOPP 0xb527dbbc -> 0xb527dbe8 (next) 
IN LOOPP 0xb527dbe8 -> 0xb527dc14 (next) 
IN LOOPP 0xb527dc14 -> 0xb527dc40 (next) 
IN LOOPP 0xb527dc40 -> 0xb527dc6c (next) 
IN LOOPP 0xb527dc6c -> 0xb527dc98 (next) 
IN LOOPP 0xb527dc98 -> 0xb527dcc4 (next) 
IN LOOPP 0xb527dcc4 -> 0xb527dcf0 (next) 
IN LOOPP 0xb527dcf0 -> 0xb527dd1c (next) 
IN LOOPP 0xb527dd1c -> 0xb527dd48 (next) 
IN LOOPP 0xb527dd48 -> 0xb527dd74 (next) 
IN LOOPP 0xb527dd74 -> 0xb527dda0 (next) 
IN LOOPP 0xb527dda0 -> 0xb527ddcc (next) 
IN LOOPP 0xb527ddcc -> 0xb53f003c (next) 
IN LOOPP 0xb53f003c -> 0xb53f0068 (next) 
IN LOOPP 0xb53f0068 -> 0xb53f0094 (next) 
IN LOOPP 0xb53f0094 -> 0xb53f00c0 (next) 
IN LOOPP 0xb53f00c0 -> 0xb53f00ec (next) 
IN LOOPP 0xb53f00ec -> 0xb53f0118 (next) 
IN LOOPP 0xb53f0118 -> 0xb53f0144 (next) 
IN LOOPP 0xb53f0144 -> 0xb53f0170 (next) 
IN LOOPP 0xb53f0170 -> 0xb53f019c (next) 
IN LOOPP 0xb53f019c -> 0xb53f01c8 (next) 
IN LOOPP 0xb53f01c8 -> 0xb53f01f4 (next) 
IN LOOPP 0xb53f01f4 -> 0xb53f0220 (next) 
IN LOOPP 0xb53f0220 -> 0xb53f024c (next) 
IN LOOPP 0xb53f024c -> 0xb53f0278 (next) 
IN LOOPP 0xb53f0278 -> 0xb53f02a4 (next) 
IN LOOPP 0xb53f02a4 -> 0xb53f02d0 (next) 
IN LOOPP 0xb53f02d0 -> 0xb53f02fc (next) 
IN LOOPP 0xb53f02fc -> 0xb53f0328 (next) 
IN LOOPP 0xb53f0328 -> 0xb53f0354 (next) 
IN LOOPP 0xb53f0354 -> 0xb53f0380 (next) 
IN LOOPP 0xb53f0380 -> 0xb53f03ac (next) 
IN LOOPP 0xb53f03ac -> 0xb53f03d8 (next) 
IN LOOPP 0xb53f03d8 -> 0xb53f0404 (next) 
IN LOOPP 0xb53f0404 -> 0xb53f0430 (next) 
IN LOOPP 0xb53f0430 -> 0xb53f045c (next) 
IN LOOPP 0xb53f045c -> 0xb53f0488 (next) 
IN LOOPP 0xb53f0488 -> 0xb53f04b4 (next) 
IN LOOPP 0xb53f04b4 -> 0xb53f04e0 (next) 
IN LOOPP 0xb53f04e0 -> 0xb53f050c (next) 
IN LOOPP 0xb53f050c -> 0xb53f0538 (next) 
IN LOOPP 0xb53f0538 -> 0xb53f0564 (next) 
IN LOOPP 0xb53f0564 -> (nil) (next) 
Add 0xb53f050c we set the next to null 
Prev: 0xb53f0564, current: (nil) 
Page to decrease counter: 0xb53f0000 from 31 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5426000 -- 0xb5428000| 

 COUNT: 1  - ends at 0xb542603c 
	 1 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 1  - ends at 0xb542a03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5432000 -- 0xb5434000| 

 COUNT: 1  - ends at 0xb543203c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb5416000 -- 0xb5418000| 

 COUNT: 1  - ends at 0xb541603c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1270 TO ALLOCATE BLOCK OF SIZE 243
Adjusted size to: 256
removing node 0xb543203c of size 512 
*** freeing page for lists of size 4
created new node at 0xb543204c whose previous is 0xb543203c and size is 16 so prev+16 =0xb543204c 
RETURN ADDRESS 0xb543203c
RETURN ADDRESS IS ----------------------->>>>> 0xb541fa00
removing node 0xb543203c of size 256 


 REQUEST NUMBER 1271 TO ALLOCATE BLOCK OF SIZE 30
Adjusted size to: 32
RETURN ADDRESS 0xb542603c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e1a0
removing node 0xb542603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1272 TO ALLOCATE BLOCK OF SIZE 4501
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9985788 and page at 0xb5426000 
adding page node for the page located at 0xb5426000 and pagePtr 0x9985788 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 30 
stepping through nodes 
 we have 202 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f050c and the new one at 0xb53f0538 
New page node points to data page 0xb5426000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 31 
RETURN ADDRESS IS 0xb5426000 


 REQUEST NUMBER 1273 TO ALLOCATE BLOCK OF SIZE 1387
Adjusted size to: 2048
RETURN ADDRESS 0xb541603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5354800
removing node 0xb541603c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1274 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb542a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e1c0
removing node 0xb542a03c of size 32 


 REQUEST NUMBER 1275 TO ALLOCATE BLOCK OF SIZE 472
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5416000 and pagePtr 0x99b6420 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 31 
stepping through nodes 
 we have 203 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0538 and the new one at 0xb53f0564 
New page node points to data page 0xb5416000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 32 
created new node at 0xb538604c whose previous is 0xb538603c and size is 16 so prev+16 =0xb538604c 
removing node 0xb538603c of size 4096 
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
removing node 0xb543003c of size 2048 
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
removing node 0xb542e03c of size 1024 
created new node at 0xb542c04c whose previous is 0xb542c03c and size is 16 so prev+16 =0xb542c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb542c03c-> 0xb5416000
removing node 0xb542c03c of size 512 


 REQUEST NUMBER 1276 TO FREE BLOCK 0xb52bf800  OF SIZE 35
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52bf800 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 1  - ends at 0xb542a03c 
	 1 -> 0xb5434000 -- 0xb5436000| 

 COUNT: 1  - ends at 0xb543403c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5432000 -- 0xb5434000| 

 COUNT: 1  - ends at 0xb543203c 
	 4 -> 0xb542c000 -- 0xb542e000| 

 COUNT: 1  - ends at 0xb542c03c 
	 5 -> 0xb542e000 -- 0xb5430000| 

 COUNT: 1  - ends at 0xb542e03c 
	 6 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 1  - ends at 0xb543003c 
	 7 -> 0xb5386000 -- 0xb5388000| 

 COUNT: 1  - ends at 0xb538603c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1277 TO ALLOCATE BLOCK OF SIZE 422
Adjusted size to: 512
RETURN ADDRESS 0xb542c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416200
removing node 0xb542c03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1278 TO ALLOCATE BLOCK OF SIZE 2392
Adjusted size to: 4096
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5417000
removing node 0xb538603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1279 TO ALLOCATE BLOCK OF SIZE 788
Adjusted size to: 1024
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416400
removing node 0xb542e03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1280 TO FREE BLOCK 0xb540ac40  OF SIZE 13
coalescing blocks if possible
trying to coalesce a block at ptr 0xb540ac40 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb542a04c whose previous is 0xb542a03c and size is 16 so prev+16 =0xb542a04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb542a000 -- 0xb542c000| 

 COUNT: 2  - ends at 0xb542a04c 
	 1 -> 0xb5434000 -- 0xb5436000| 

 COUNT: 1  - ends at 0xb543403c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5432000 -- 0xb5434000| 

 COUNT: 1  - ends at 0xb543203c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 1  - ends at 0xb543003c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1281 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb541e1e0
removing node 0xb542a03c of size 32 


 REQUEST NUMBER 1282 TO ALLOCATE BLOCK OF SIZE 451
Adjusted size to: 512
removing node 0xb543003c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
removing node 0xb543003c of size 1024 
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416800
removing node 0xb542e03c of size 512 


 REQUEST NUMBER 1283 TO ALLOCATE BLOCK OF SIZE 1013
Adjusted size to: 1024
RETURN ADDRESS 0xb543003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416c00
removing node 0xb543003c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1284 TO ALLOCATE BLOCK OF SIZE 72
Adjusted size to: 128
removing node 0xb543203c of size 256 
*** freeing page for lists of size 3
created new node at 0xb543204c whose previous is 0xb543203c and size is 16 so prev+16 =0xb543204c 
RETURN ADDRESS 0xb543203c
RETURN ADDRESS IS ----------------------->>>>> 0xb541fb00
removing node 0xb543203c of size 128 


 REQUEST NUMBER 1285 TO ALLOCATE BLOCK OF SIZE 31
Adjusted size to: 32
RETURN ADDRESS 0xb542a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb540ac40
removing node 0xb542a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1286 TO ALLOCATE BLOCK OF SIZE 1076
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb542a000 and pagePtr 0x9940b40 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 32 
stepping through nodes 
 we have 204 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0564 and the new one at 0xb53f0590 
New page node points to data page 0xb542a000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 33 
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
removing node 0xb543003c of size 4096 
created new node at 0xb538604c whose previous is 0xb538603c and size is 16 so prev+16 =0xb538604c 
RETURN ADDRESS IS ----------------------->>>>>0xb538603c-> 0xb542a000
removing node 0xb538603c of size 2048 


 REQUEST NUMBER 1287 TO ALLOCATE BLOCK OF SIZE 26
Adjusted size to: 32
removing node 0xb543403c of size 64 
*** freeing page for lists of size 1
created new node at 0xb543404c whose previous is 0xb543403c and size is 16 so prev+16 =0xb543404c 
RETURN ADDRESS 0xb543403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bf800
removing node 0xb543403c of size 32 


 REQUEST NUMBER 1288 TO ALLOCATE BLOCK OF SIZE 2196
Adjusted size to: 4096
RETURN ADDRESS 0xb543003c
RETURN ADDRESS IS ----------------------->>>>> 0xb542b000
removing node 0xb543003c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1289 TO FREE BLOCK 0xb53a0800  OF SIZE 620
coalescing blocks if possible
trying to coalesce a block at ptr 0xb53a0800 and of size: 1024 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5434000 -- 0xb5436000| 

 COUNT: 1  - ends at 0xb543403c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5432000 -- 0xb5434000| 

 COUNT: 1  - ends at 0xb543203c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb542e000 -- 0xb5430000| 

 COUNT: 1  - ends at 0xb542e03c 
	 5 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 1  - ends at 0xb543003c 
	 6 -> 0xb5386000 -- 0xb5388000| 

 COUNT: 1  - ends at 0xb538603c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1290 TO ALLOCATE BLOCK OF SIZE 159
Adjusted size to: 256
removing node 0xb542e03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416a00
removing node 0xb542e03c of size 256 


 REQUEST NUMBER 1291 TO FREE BLOCK 0xb5327900  OF SIZE 146
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5327900 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5434000 -- 0xb5436000| 

 COUNT: 1  - ends at 0xb543403c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5432000 -- 0xb5434000| 

 COUNT: 1  - ends at 0xb543203c 
	 3 -> 0xb542e000 -- 0xb5430000| 

 COUNT: 2  - ends at 0xb542e04c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 1  - ends at 0xb543003c 
	 6 -> 0xb5386000 -- 0xb5388000| 

 COUNT: 1  - ends at 0xb538603c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1292 TO ALLOCATE BLOCK OF SIZE 85
Adjusted size to: 128
RETURN ADDRESS 0xb543203c
RETURN ADDRESS IS ----------------------->>>>> 0xb541fb80
removing node 0xb543203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1293 TO ALLOCATE BLOCK OF SIZE 5085
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a1a748 and page at 0xb5432000 
adding page node for the page located at 0xb5432000 and pagePtr 0x9a1a748 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 33 
stepping through nodes 
 we have 205 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0590 and the new one at 0xb53f05bc 
New page node points to data page 0xb5432000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 34 
RETURN ADDRESS IS 0xb5432000 


 REQUEST NUMBER 1294 TO ALLOCATE BLOCK OF SIZE 446
Adjusted size to: 512
removing node 0xb543003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
RETURN ADDRESS 0xb543003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a0800
removing node 0xb543003c of size 512 


 REQUEST NUMBER 1295 TO ALLOCATE BLOCK OF SIZE 128
Adjusted size to: 128
removing node 0xb542e03c of size 256 
created new node at 0xb542c04c whose previous is 0xb542c03c and size is 16 so prev+16 =0xb542c04c 
RETURN ADDRESS 0xb542c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416b00
removing node 0xb542c03c of size 128 


 REQUEST NUMBER 1296 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb543403c
RETURN ADDRESS IS ----------------------->>>>> 0xb52bf820
removing node 0xb543403c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1297 TO ALLOCATE BLOCK OF SIZE 2446
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5434000 and pagePtr 0x99652e8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 34 
stepping through nodes 
 we have 206 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f05bc and the new one at 0xb53f05e8 
New page node points to data page 0xb5434000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 35 
created new node at 0xb543604c whose previous is 0xb543603c and size is 16 so prev+16 =0xb543604c 
RETURN ADDRESS IS ----------------------->>>>>0xb543603c-> 0xb5434000
removing node 0xb543603c of size 4096 


 REQUEST NUMBER 1298 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
removing node 0xb542c03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb542c04c whose previous is 0xb542c03c and size is 16 so prev+16 =0xb542c04c 
removing node 0xb542c03c of size 64 
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416b80
removing node 0xb543803c of size 32 


 REQUEST NUMBER 1299 TO ALLOCATE BLOCK OF SIZE 730
Adjusted size to: 1024
removing node 0xb538603c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb538604c whose previous is 0xb538603c and size is 16 so prev+16 =0xb538604c 
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb542a800
removing node 0xb538603c of size 1024 


 REQUEST NUMBER 1300 TO ALLOCATE BLOCK OF SIZE 499
Adjusted size to: 512
RETURN ADDRESS 0xb543003c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a0a00
removing node 0xb543003c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1301 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416ba0
removing node 0xb543803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1302 TO ALLOCATE BLOCK OF SIZE 3207
Adjusted size to: 4096
RETURN ADDRESS 0xb543603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5435000
removing node 0xb543603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1303 TO ALLOCATE BLOCK OF SIZE 36
Adjusted size to: 64
RETURN ADDRESS 0xb542c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5416bc0
removing node 0xb542c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1304 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
removing node 0xb542e03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
removing node 0xb542e03c of size 128 
created new node at 0xb542c04c whose previous is 0xb542c03c and size is 16 so prev+16 =0xb542c04c 
removing node 0xb542c03c of size 64 
created new node at 0xb543604c whose previous is 0xb543603c and size is 16 so prev+16 =0xb543604c 
RETURN ADDRESS 0xb543603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327900
removing node 0xb543603c of size 32 


 REQUEST NUMBER 1305 TO ALLOCATE BLOCK OF SIZE 698
Adjusted size to: 1024
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb542ac00
removing node 0xb538603c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1306 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
RETURN ADDRESS 0xb543603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327920
removing node 0xb543603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1307 TO ALLOCATE BLOCK OF SIZE 462
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5436000 and pagePtr 0x9918ad8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 35 
stepping through nodes 
 we have 207 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f05e8 and the new one at 0xb53f0614 
New page node points to data page 0xb5436000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 36 
created new node at 0xb538604c whose previous is 0xb538603c and size is 16 so prev+16 =0xb538604c 
removing node 0xb538603c of size 4096 
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
removing node 0xb543803c of size 2048 
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
removing node 0xb543003c of size 1024 
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb543a03c-> 0xb5436000
removing node 0xb543a03c of size 512 


 REQUEST NUMBER 1308 TO ALLOCATE BLOCK OF SIZE 79
Adjusted size to: 128
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327980
removing node 0xb542e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1309 TO ALLOCATE BLOCK OF SIZE 56
Adjusted size to: 64
RETURN ADDRESS 0xb542c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327940
removing node 0xb542c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1310 TO ALLOCATE BLOCK OF SIZE 6805
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99652f8 and page at 0xb542c000 
adding page node for the page located at 0xb542c000 and pagePtr 0x99652f8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 36 
stepping through nodes 
 we have 208 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0614 and the new one at 0xb53f0640 
New page node points to data page 0xb542c000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 37 
RETURN ADDRESS IS 0xb542c000 


 REQUEST NUMBER 1311 TO ALLOCATE BLOCK OF SIZE 32
Adjusted size to: 32
removing node 0xb543a03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
removing node 0xb543a03c of size 256 
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
removing node 0xb542e03c of size 128 
created new node at 0xb543c04c whose previous is 0xb543c03c and size is 16 so prev+16 =0xb543c04c 
removing node 0xb543c03c of size 64 
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
RETURN ADDRESS 0xb543e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436200
removing node 0xb543e03c of size 32 


 REQUEST NUMBER 1312 TO ALLOCATE BLOCK OF SIZE 51
Adjusted size to: 64
RETURN ADDRESS 0xb543c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436240
removing node 0xb543c03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1313 TO FREE BLOCK 0xb5378b00  OF SIZE 253
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5378b00 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb543e000 -- 0xb5440000| 

 COUNT: 1  - ends at 0xb543e03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb542e000 -- 0xb5430000| 

 COUNT: 1  - ends at 0xb542e03c 
	 3 -> 0xb543a000 -- 0xb543c000| 

 COUNT: 2  - ends at 0xb543a04c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 1  - ends at 0xb543003c 
	 6 -> 0xb5438000 -- 0xb543a000| 

 COUNT: 1  - ends at 0xb543803c 
	 7 -> 0xb5386000 -- 0xb5388000| 

 COUNT: 1  - ends at 0xb538603c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1314 TO ALLOCATE BLOCK OF SIZE 35
Adjusted size to: 64
removing node 0xb542e03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb542e04c whose previous is 0xb542e03c and size is 16 so prev+16 =0xb542e04c 
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436280
removing node 0xb542e03c of size 64 


 REQUEST NUMBER 1315 TO ALLOCATE BLOCK OF SIZE 39
Adjusted size to: 64
RETURN ADDRESS 0xb542e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb54362c0
removing node 0xb542e03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1316 TO ALLOCATE BLOCK OF SIZE 5143
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9918ac8 and page at 0xb542e000 
adding page node for the page located at 0xb542e000 and pagePtr 0x9918ac8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 37 
stepping through nodes 
 we have 209 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0640 and the new one at 0xb53f066c 
New page node points to data page 0xb542e000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 38 
RETURN ADDRESS IS 0xb542e000 


 REQUEST NUMBER 1317 TO ALLOCATE BLOCK OF SIZE 376
Adjusted size to: 512
removing node 0xb543003c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
RETURN ADDRESS 0xb543003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436400
removing node 0xb543003c of size 512 


 REQUEST NUMBER 1318 TO FREE BLOCK 0xb52d8800  OF SIZE 431
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52d8800 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb543004c whose previous is 0xb543003c and size is 16 so prev+16 =0xb543004c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb543e000 -- 0xb5440000| 

 COUNT: 1  - ends at 0xb543e03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb543a000 -- 0xb543c000| 

 COUNT: 2  - ends at 0xb543a04c 
	 4 -> 0xb5430000 -- 0xb5432000| 

 COUNT: 2  - ends at 0xb543004c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb5438000 -- 0xb543a000| 

 COUNT: 1  - ends at 0xb543803c 
	 7 -> 0xb5386000 -- 0xb5388000| 

 COUNT: 1  - ends at 0xb538603c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1319 TO ALLOCATE BLOCK OF SIZE 3168
Adjusted size to: 4096
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5437000
removing node 0xb538603c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1320 TO ALLOCATE BLOCK OF SIZE 49
Adjusted size to: 64
removing node 0xb543a03c of size 256 
created new node at 0xb538604c whose previous is 0xb538603c and size is 16 so prev+16 =0xb538604c 
removing node 0xb538603c of size 128 
created new node at 0xb543c04c whose previous is 0xb543c03c and size is 16 so prev+16 =0xb543c04c 
RETURN ADDRESS 0xb543c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436300
removing node 0xb543c03c of size 64 


 REQUEST NUMBER 1321 TO ALLOCATE BLOCK OF SIZE 1412
Adjusted size to: 2048
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436800
removing node 0xb543803c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1322 TO ALLOCATE BLOCK OF SIZE 437
Adjusted size to: 512
RETURN ADDRESS 0xb543003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436600
removing node 0xb543003c of size 512 


 REQUEST NUMBER 1323 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
RETURN ADDRESS 0xb543e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436220
removing node 0xb543e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1324 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
removing node 0xb543c03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb543c04c whose previous is 0xb543c03c and size is 16 so prev+16 =0xb543c04c 
RETURN ADDRESS 0xb543c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436340
removing node 0xb543c03c of size 32 


 REQUEST NUMBER 1325 TO ALLOCATE BLOCK OF SIZE 117
Adjusted size to: 128
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436380
removing node 0xb538603c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1326 TO ALLOCATE BLOCK OF SIZE 44
Adjusted size to: 64
removing node 0xb543a03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
removing node 0xb543a03c of size 128 
created new node at 0xb538604c whose previous is 0xb538603c and size is 16 so prev+16 =0xb538604c 
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378b00
removing node 0xb538603c of size 64 


 REQUEST NUMBER 1327 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
RETURN ADDRESS 0xb543c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5436360
removing node 0xb543c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1328 TO ALLOCATE BLOCK OF SIZE 278
Adjusted size to: 512
RETURN ADDRESS 0xb543003c
RETURN ADDRESS IS ----------------------->>>>> 0xb52d8800
removing node 0xb543003c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1329 TO ALLOCATE BLOCK OF SIZE 270
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5430000 and pagePtr 0x9a20d78 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 38 
stepping through nodes 
 we have 210 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f066c and the new one at 0xb53f0698 
New page node points to data page 0xb5430000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 39 
created new node at 0xb543c04c whose previous is 0xb543c03c and size is 16 so prev+16 =0xb543c04c 
removing node 0xb543c03c of size 4096 
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
removing node 0xb543e03c of size 2048 
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
removing node 0xb543803c of size 1024 
created new node at 0xb544004c whose previous is 0xb544003c and size is 16 so prev+16 =0xb544004c 
RETURN ADDRESS IS ----------------------->>>>>0xb544003c-> 0xb5430000
removing node 0xb544003c of size 512 


 REQUEST NUMBER 1330 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb538603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb538604c whose previous is 0xb538603c and size is 16 so prev+16 =0xb538604c 
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378b40
removing node 0xb538603c of size 32 


 REQUEST NUMBER 1331 TO ALLOCATE BLOCK OF SIZE 185
Adjusted size to: 256
removing node 0xb544003c of size 512 
*** freeing page for lists of size 4
created new node at 0xb544004c whose previous is 0xb544003c and size is 16 so prev+16 =0xb544004c 
RETURN ADDRESS 0xb544003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430200
removing node 0xb544003c of size 256 


 REQUEST NUMBER 1332 TO ALLOCATE BLOCK OF SIZE 253
Adjusted size to: 256
RETURN ADDRESS 0xb544003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430300
removing node 0xb544003c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1333 TO ALLOCATE BLOCK OF SIZE 396
Adjusted size to: 512
removing node 0xb543803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430400
removing node 0xb543803c of size 512 


 REQUEST NUMBER 1334 TO ALLOCATE BLOCK OF SIZE 321
Adjusted size to: 512
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430600
removing node 0xb543803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1335 TO ALLOCATE BLOCK OF SIZE 736
Adjusted size to: 1024
removing node 0xb543e03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
RETURN ADDRESS 0xb543e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430800
removing node 0xb543e03c of size 1024 


 REQUEST NUMBER 1336 TO ALLOCATE BLOCK OF SIZE 80
Adjusted size to: 128
RETURN ADDRESS 0xb543a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378b80
removing node 0xb543a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1337 TO ALLOCATE BLOCK OF SIZE 83
Adjusted size to: 128
removing node 0xb543e03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
removing node 0xb543e03c of size 512 
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
removing node 0xb543a03c of size 256 
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430c00
removing node 0xb543803c of size 128 


 REQUEST NUMBER 1338 TO ALLOCATE BLOCK OF SIZE 6499
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99bb170 and page at 0xb5440000 
adding page node for the page located at 0xb5440000 and pagePtr 0x99bb170 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 39 
stepping through nodes 
 we have 211 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0698 and the new one at 0xb53f06c4 
New page node points to data page 0xb5440000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 40 
RETURN ADDRESS IS 0xb5440000 


 REQUEST NUMBER 1339 TO FREE BLOCK 0xb5370a00  OF SIZE 485
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5370a00 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5386000 -- 0xb5388000| 

 COUNT: 1  - ends at 0xb538603c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5438000 -- 0xb543a000| 

 COUNT: 1  - ends at 0xb543803c 
	 3 -> 0xb543a000 -- 0xb543c000| 

 COUNT: 1  - ends at 0xb543a03c 
	 4 -> 0xb543e000 -- 0xb5440000| 

 COUNT: 2  - ends at 0xb543e04c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb543c000 -- 0xb543e000| 

 COUNT: 1  - ends at 0xb543c03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1340 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5378b60
removing node 0xb538603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1341 TO FREE BLOCK 0xb5321de0  OF SIZE 26
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5321de0 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5386000 -- 0xb5388000| 

 COUNT: 1  - ends at 0xb538603c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5438000 -- 0xb543a000| 

 COUNT: 1  - ends at 0xb543803c 
	 3 -> 0xb543a000 -- 0xb543c000| 

 COUNT: 1  - ends at 0xb543a03c 
	 4 -> 0xb543e000 -- 0xb5440000| 

 COUNT: 2  - ends at 0xb543e04c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb543c000 -- 0xb543e000| 

 COUNT: 1  - ends at 0xb543c03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1342 TO ALLOCATE BLOCK OF SIZE 95
Adjusted size to: 128
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430c80
removing node 0xb543803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1343 TO ALLOCATE BLOCK OF SIZE 148
Adjusted size to: 256
RETURN ADDRESS 0xb543a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430d00
removing node 0xb543a03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1344 TO ALLOCATE BLOCK OF SIZE 92
Adjusted size to: 128
removing node 0xb543e03c of size 512 
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
removing node 0xb543a03c of size 256 
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430e00
removing node 0xb543803c of size 128 


 REQUEST NUMBER 1345 TO ALLOCATE BLOCK OF SIZE 98
Adjusted size to: 128
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430e80
removing node 0xb543803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1346 TO ALLOCATE BLOCK OF SIZE 3473
Adjusted size to: 4096
RETURN ADDRESS 0xb543c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5431000
removing node 0xb543c03c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1347 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb538603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321de0
removing node 0xb538603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1348 TO ALLOCATE BLOCK OF SIZE 68
Adjusted size to: 128
removing node 0xb543a03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
RETURN ADDRESS 0xb543a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430f00
removing node 0xb543a03c of size 128 


 REQUEST NUMBER 1349 TO ALLOCATE BLOCK OF SIZE 685
Adjusted size to: 1024
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5386000 and pagePtr 0x99b3728 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 40 
stepping through nodes 
 we have 212 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f06c4 and the new one at 0xb53f06f0 
New page node points to data page 0xb5386000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 41 
created new node at 0xb543c04c whose previous is 0xb543c03c and size is 16 so prev+16 =0xb543c04c 
removing node 0xb543c03c of size 4096 
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
removing node 0xb543803c of size 2048 
created new node at 0xb544204c whose previous is 0xb544203c and size is 16 so prev+16 =0xb544204c 
RETURN ADDRESS IS ----------------------->>>>>0xb544203c-> 0xb5386000
removing node 0xb544203c of size 1024 


 REQUEST NUMBER 1350 TO FREE BLOCK 0xb5419000  OF SIZE 2231
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5419000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb543c04c whose previous is 0xb543c03c and size is 16 so prev+16 =0xb543c04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb543a000 -- 0xb543c000| 

 COUNT: 1  - ends at 0xb543a03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb543e000 -- 0xb5440000| 

 COUNT: 1  - ends at 0xb543e03c 
	 5 -> 0xb5442000 -- 0xb5444000| 

 COUNT: 1  - ends at 0xb544203c 
	 6 -> 0xb5438000 -- 0xb543a000| 

 COUNT: 1  - ends at 0xb543803c 
	 7 -> 0xb543c000 -- 0xb543e000| 

 COUNT: 2  - ends at 0xb543c04c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1351 TO ALLOCATE BLOCK OF SIZE 1785
Adjusted size to: 2048
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5386800
removing node 0xb543803c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1352 TO FREE BLOCK 0xb5382200  OF SIZE 303
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5382200 and of size: 512 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb543a000 -- 0xb543c000| 

 COUNT: 1  - ends at 0xb543a03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb543e000 -- 0xb5440000| 

 COUNT: 2  - ends at 0xb543e04c 
	 5 -> 0xb5442000 -- 0xb5444000| 

 COUNT: 1  - ends at 0xb544203c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb543c000 -- 0xb543e000| 

 COUNT: 2  - ends at 0xb543c04c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1353 TO ALLOCATE BLOCK OF SIZE 855
Adjusted size to: 1024
RETURN ADDRESS 0xb544203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5386400
removing node 0xb544203c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1354 TO ALLOCATE BLOCK OF SIZE 49
Adjusted size to: 64
removing node 0xb543a03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
RETURN ADDRESS 0xb543a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430f80
removing node 0xb543a03c of size 64 


 REQUEST NUMBER 1355 TO FREE BLOCK 0xb52b4a00  OF SIZE 254
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52b4a00 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb543a000 -- 0xb543c000| 

 COUNT: 1  - ends at 0xb543a03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5442000 -- 0xb5444000| 

 COUNT: 1  - ends at 0xb544203c 
	 4 -> 0xb543e000 -- 0xb5440000| 

 COUNT: 2  - ends at 0xb543e04c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb543c000 -- 0xb543e000| 

 COUNT: 2  - ends at 0xb543c04c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1356 TO ALLOCATE BLOCK OF SIZE 1119
Adjusted size to: 2048
removing node 0xb543c03c of size 4096 
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387000
removing node 0xb543803c of size 2048 


 REQUEST NUMBER 1357 TO ALLOCATE BLOCK OF SIZE 584
Adjusted size to: 1024
removing node 0xb543803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387800
removing node 0xb543803c of size 1024 


 REQUEST NUMBER 1358 TO ALLOCATE BLOCK OF SIZE 20
Adjusted size to: 32
removing node 0xb543a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb543a04c whose previous is 0xb543a03c and size is 16 so prev+16 =0xb543a04c 
RETURN ADDRESS 0xb543a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430fc0
removing node 0xb543a03c of size 32 


 REQUEST NUMBER 1359 TO ALLOCATE BLOCK OF SIZE 6144
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9928f40 and page at 0xb5444000 
adding page node for the page located at 0xb5444000 and pagePtr 0x9928f40 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 41 
stepping through nodes 
 we have 213 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f06f0 and the new one at 0xb53f071c 
New page node points to data page 0xb5444000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 42 
RETURN ADDRESS IS 0xb5444000 


 REQUEST NUMBER 1360 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb543a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5430fe0
removing node 0xb543a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1361 TO ALLOCATE BLOCK OF SIZE 277
Adjusted size to: 512
RETURN ADDRESS 0xb543e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5370a00
removing node 0xb543e03c of size 512 


 REQUEST NUMBER 1362 TO ALLOCATE BLOCK OF SIZE 5258
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a16330 and page at 0xb543a000 
adding page node for the page located at 0xb543a000 and pagePtr 0x9a16330 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 42 
stepping through nodes 
 we have 214 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f071c and the new one at 0xb53f0748 
New page node points to data page 0xb543a000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 43 
RETURN ADDRESS IS 0xb543a000 


 REQUEST NUMBER 1363 TO ALLOCATE BLOCK OF SIZE 303
Adjusted size to: 512
RETURN ADDRESS 0xb543e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5382200
removing node 0xb543e03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1364 TO ALLOCATE BLOCK OF SIZE 477
Adjusted size to: 512
removing node 0xb543803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387c00
removing node 0xb543803c of size 512 


 REQUEST NUMBER 1365 TO ALLOCATE BLOCK OF SIZE 201
Adjusted size to: 256
RETURN ADDRESS 0xb544203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52b4a00
removing node 0xb544203c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1366 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb543803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
removing node 0xb543803c of size 256 
created new node at 0xb544204c whose previous is 0xb544203c and size is 16 so prev+16 =0xb544204c 
removing node 0xb544203c of size 128 
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
removing node 0xb543e03c of size 64 
created new node at 0xb544604c whose previous is 0xb544603c and size is 16 so prev+16 =0xb544604c 
RETURN ADDRESS 0xb544603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387e00
removing node 0xb544603c of size 32 


 REQUEST NUMBER 1367 TO ALLOCATE BLOCK OF SIZE 1931
Adjusted size to: 2048
removing node 0xb543c03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb543c04c whose previous is 0xb543c03c and size is 16 so prev+16 =0xb543c04c 
RETURN ADDRESS 0xb543c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5419000
removing node 0xb543c03c of size 2048 


 REQUEST NUMBER 1368 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
RETURN ADDRESS 0xb544603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387e20
removing node 0xb544603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1369 TO ALLOCATE BLOCK OF SIZE 812
Adjusted size to: 1024
removing node 0xb543c03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb543c04c whose previous is 0xb543c03c and size is 16 so prev+16 =0xb543c04c 
RETURN ADDRESS 0xb543c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5419800
removing node 0xb543c03c of size 1024 


 REQUEST NUMBER 1370 TO ALLOCATE BLOCK OF SIZE 1085
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5446000 and pagePtr 0x99a3a58 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 43 
stepping through nodes 
 we have 215 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0748 and the new one at 0xb53f0774 
New page node points to data page 0xb5446000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 44 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
removing node 0xb544803c of size 4096 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb544a03c-> 0xb5446000
removing node 0xb544a03c of size 2048 


 REQUEST NUMBER 1371 TO ALLOCATE BLOCK OF SIZE 191
Adjusted size to: 256
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387f00
removing node 0xb543803c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1372 TO ALLOCATE BLOCK OF SIZE 866
Adjusted size to: 1024
RETURN ADDRESS 0xb543c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5419c00
removing node 0xb543c03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1373 TO ALLOCATE BLOCK OF SIZE 4451
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99bb150 and page at 0xb543c000 
adding page node for the page located at 0xb543c000 and pagePtr 0x99bb150 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 44 
stepping through nodes 
 we have 216 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0774 and the new one at 0xb53f07a0 
New page node points to data page 0xb543c000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 45 
RETURN ADDRESS IS 0xb543c000 


 REQUEST NUMBER 1374 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
removing node 0xb543e03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
RETURN ADDRESS 0xb543e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387e40
removing node 0xb543e03c of size 32 


 REQUEST NUMBER 1375 TO FREE BLOCK 0xb538e000  OF SIZE 3452
coalescing blocks if possible
trying to coalesce a block at ptr 0xb538e000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb543e000 -- 0xb5440000| 

 COUNT: 1  - ends at 0xb543e03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5442000 -- 0xb5444000| 

 COUNT: 1  - ends at 0xb544203c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 7 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 2  - ends at 0xb544804c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1376 TO ALLOCATE BLOCK OF SIZE 85
Adjusted size to: 128
RETURN ADDRESS 0xb544203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387e80
removing node 0xb544203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1377 TO ALLOCATE BLOCK OF SIZE 3013
Adjusted size to: 4096
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5447000
removing node 0xb544803c of size 4096 


 REQUEST NUMBER 1378 TO ALLOCATE BLOCK OF SIZE 43
Adjusted size to: 64
removing node 0xb544a03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
removing node 0xb544a03c of size 1024 
created new node at 0xb544204c whose previous is 0xb544203c and size is 16 so prev+16 =0xb544204c 
removing node 0xb544203c of size 512 
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
removing node 0xb543803c of size 256 
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
removing node 0xb544c03c of size 128 
created new node at 0xb544e04c whose previous is 0xb544e03c and size is 16 so prev+16 =0xb544e04c 
RETURN ADDRESS 0xb544e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5446800
removing node 0xb544e03c of size 64 


 REQUEST NUMBER 1379 TO ALLOCATE BLOCK OF SIZE 318
Adjusted size to: 512
RETURN ADDRESS 0xb544203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5446a00
removing node 0xb544203c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1380 TO ALLOCATE BLOCK OF SIZE 2144
Adjusted size to: 4096
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb538e000
removing node 0xb544803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1381 TO ALLOCATE BLOCK OF SIZE 821
Adjusted size to: 1024
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5446c00
removing node 0xb544a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1382 TO ALLOCATE BLOCK OF SIZE 102
Adjusted size to: 128
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5446880
removing node 0xb544c03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1383 TO ALLOCATE BLOCK OF SIZE 42
Adjusted size to: 64
RETURN ADDRESS 0xb544e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5446840
removing node 0xb544e03c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1384 TO ALLOCATE BLOCK OF SIZE 2856
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb544e000 and pagePtr 0x9a163a0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 45 
stepping through nodes 
 we have 217 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f07a0 and the new one at 0xb53f07cc 
New page node points to data page 0xb544e000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 46 
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb544c03c-> 0xb544e000
removing node 0xb544c03c of size 4096 


 REQUEST NUMBER 1385 TO ALLOCATE BLOCK OF SIZE 112
Adjusted size to: 128
removing node 0xb543803c of size 256 
*** freeing page for lists of size 3
created new node at 0xb543804c whose previous is 0xb543803c and size is 16 so prev+16 =0xb543804c 
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5446900
removing node 0xb543803c of size 128 


 REQUEST NUMBER 1386 TO ALLOCATE BLOCK OF SIZE 414
Adjusted size to: 512
removing node 0xb544c03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
removing node 0xb544c03c of size 2048 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
removing node 0xb544a03c of size 1024 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb544f000
removing node 0xb544803c of size 512 


 REQUEST NUMBER 1387 TO ALLOCATE BLOCK OF SIZE 376
Adjusted size to: 512
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb544f200
removing node 0xb544803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1388 TO ALLOCATE BLOCK OF SIZE 121
Adjusted size to: 128
RETURN ADDRESS 0xb543803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5446980
removing node 0xb543803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1389 TO ALLOCATE BLOCK OF SIZE 636
Adjusted size to: 1024
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb544f400
removing node 0xb544a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1390 TO ALLOCATE BLOCK OF SIZE 321
Adjusted size to: 512
removing node 0xb544c03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
removing node 0xb544c03c of size 1024 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb544f800
removing node 0xb544a03c of size 512 


 REQUEST NUMBER 1391 TO ALLOCATE BLOCK OF SIZE 1083
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5438000 and pagePtr 0x9960508 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 46 
stepping through nodes 
 we have 218 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f07cc and the new one at 0xb53f07f8 
New page node points to data page 0xb5438000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 47 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
removing node 0xb544803c of size 4096 
created new node at 0xb544204c whose previous is 0xb544203c and size is 16 so prev+16 =0xb544204c 
RETURN ADDRESS IS ----------------------->>>>>0xb544203c-> 0xb5438000
removing node 0xb544203c of size 2048 


 REQUEST NUMBER 1392 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
RETURN ADDRESS 0xb543e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5387e60
removing node 0xb543e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1393 TO ALLOCATE BLOCK OF SIZE 294
Adjusted size to: 512
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fa00
removing node 0xb544a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1394 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
removing node 0xb544c03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
removing node 0xb544c03c of size 512 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
removing node 0xb544a03c of size 256 
created new node at 0xb543e04c whose previous is 0xb543e03c and size is 16 so prev+16 =0xb543e04c 
removing node 0xb543e03c of size 128 
created new node at 0xb545004c whose previous is 0xb545003c and size is 16 so prev+16 =0xb545004c 
removing node 0xb545003c of size 64 
created new node at 0xb545204c whose previous is 0xb545203c and size is 16 so prev+16 =0xb545204c 
RETURN ADDRESS 0xb545203c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fc00
removing node 0xb545203c of size 32 


 REQUEST NUMBER 1395 TO ALLOCATE BLOCK OF SIZE 176
Adjusted size to: 256
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fd00
removing node 0xb544a03c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1396 TO ALLOCATE BLOCK OF SIZE 3769
Adjusted size to: 4096
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5439000
removing node 0xb544803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1397 TO ALLOCATE BLOCK OF SIZE 82
Adjusted size to: 128
RETURN ADDRESS 0xb543e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fc80
removing node 0xb543e03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1398 TO ALLOCATE BLOCK OF SIZE 19
Adjusted size to: 32
RETURN ADDRESS 0xb545203c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fc20
removing node 0xb545203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1399 TO ALLOCATE BLOCK OF SIZE 42
Adjusted size to: 64
RETURN ADDRESS 0xb545003c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fc40
removing node 0xb545003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1400 TO ALLOCATE BLOCK OF SIZE 88
Adjusted size to: 128
removing node 0xb544c03c of size 512 
*** freeing page for lists of size 4
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
removing node 0xb544c03c of size 256 
created new node at 0xb545004c whose previous is 0xb545003c and size is 16 so prev+16 =0xb545004c 
RETURN ADDRESS 0xb545003c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fe00
removing node 0xb545003c of size 128 


 REQUEST NUMBER 1401 TO ALLOCATE BLOCK OF SIZE 1355
Adjusted size to: 2048
RETURN ADDRESS 0xb544203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5438800
removing node 0xb544203c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1402 TO FREE BLOCK 0xb52a1660  OF SIZE 13
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52a1660 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5442000 -- 0xb5444000| 

 COUNT: 1  - ends at 0xb544203c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5450000 -- 0xb5452000| 

 COUNT: 1  - ends at 0xb545003c 
	 3 -> 0xb544c000 -- 0xb544e000| 

 COUNT: 1  - ends at 0xb544c03c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1403 TO ALLOCATE BLOCK OF SIZE 37
Adjusted size to: 64
removing node 0xb545003c of size 128 
*** freeing page for lists of size 2
created new node at 0xb545004c whose previous is 0xb545003c and size is 16 so prev+16 =0xb545004c 
RETURN ADDRESS 0xb545003c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fe80
removing node 0xb545003c of size 64 


 REQUEST NUMBER 1404 TO ALLOCATE BLOCK OF SIZE 28
Adjusted size to: 32
RETURN ADDRESS 0xb544203c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a1660
removing node 0xb544203c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1405 TO ALLOCATE BLOCK OF SIZE 2351
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5442000 and pagePtr 0x9960518 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 47 
stepping through nodes 
 we have 219 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f07f8 and the new one at 0xb53f0824 
New page node points to data page 0xb5442000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 48 
created new node at 0xb545204c whose previous is 0xb545203c and size is 16 so prev+16 =0xb545204c 
RETURN ADDRESS IS ----------------------->>>>>0xb545203c-> 0xb5442000
removing node 0xb545203c of size 4096 


 REQUEST NUMBER 1406 TO ALLOCATE BLOCK OF SIZE 80
Adjusted size to: 128
removing node 0xb544c03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb544ff00
removing node 0xb544c03c of size 128 


 REQUEST NUMBER 1407 TO ALLOCATE BLOCK OF SIZE 4261
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a22ab8 and page at 0xb543e000 
adding page node for the page located at 0xb543e000 and pagePtr 0x9a22ab8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 48 
stepping through nodes 
 we have 220 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0824 and the new one at 0xb53f0850 
New page node points to data page 0xb543e000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 49 
RETURN ADDRESS IS 0xb543e000 


 REQUEST NUMBER 1408 TO ALLOCATE BLOCK OF SIZE 38
Adjusted size to: 64
RETURN ADDRESS 0xb545003c
RETURN ADDRESS IS ----------------------->>>>> 0xb544fec0
removing node 0xb545003c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1409 TO ALLOCATE BLOCK OF SIZE 7675
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a30a70 and page at 0xb5450000 
adding page node for the page located at 0xb5450000 and pagePtr 0x9a30a70 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 49 
stepping through nodes 
 we have 221 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0850 and the new one at 0xb53f087c 
New page node points to data page 0xb5450000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 50 
RETURN ADDRESS IS 0xb5450000 


 REQUEST NUMBER 1410 TO FREE BLOCK 0xb52a17c0  OF SIZE 47
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52a17c0 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 2 -> 0xb544c000 -- 0xb544e000| 

 COUNT: 1  - ends at 0xb544c03c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb5452000 -- 0xb5454000| 

 COUNT: 1  - ends at 0xb545203c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1411 TO ALLOCATE BLOCK OF SIZE 291
Adjusted size to: 512
removing node 0xb545203c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb545204c whose previous is 0xb545203c and size is 16 so prev+16 =0xb545204c 
removing node 0xb545203c of size 2048 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
removing node 0xb544a03c of size 1024 
created new node at 0xb545404c whose previous is 0xb545403c and size is 16 so prev+16 =0xb545404c 
RETURN ADDRESS 0xb545403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443000
removing node 0xb545403c of size 512 


 REQUEST NUMBER 1412 TO ALLOCATE BLOCK OF SIZE 71
Adjusted size to: 128
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb544ff80
removing node 0xb544c03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1413 TO FREE BLOCK 0xb53554c0  OF SIZE 37
coalescing blocks if possible
trying to coalesce a block at ptr 0xb53554c0 and of size: 64 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 2  - ends at 0xb544804c 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5454000 -- 0xb5456000| 

 COUNT: 1  - ends at 0xb545403c 
	 5 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 6 -> 0xb5452000 -- 0xb5454000| 

 COUNT: 1  - ends at 0xb545203c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1414 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb544803c of size 64 
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a17c0
removing node 0xb544c03c of size 32 


 REQUEST NUMBER 1415 TO ALLOCATE BLOCK OF SIZE 628
Adjusted size to: 1024
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443400
removing node 0xb544a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1416 TO ALLOCATE BLOCK OF SIZE 704
Adjusted size to: 1024
removing node 0xb545203c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb545204c whose previous is 0xb545203c and size is 16 so prev+16 =0xb545204c 
RETURN ADDRESS 0xb545203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443800
removing node 0xb545203c of size 1024 


 REQUEST NUMBER 1417 TO ALLOCATE BLOCK OF SIZE 40
Adjusted size to: 64
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb53554c0
removing node 0xb544803c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1418 TO ALLOCATE BLOCK OF SIZE 23
Adjusted size to: 32
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52a17e0
removing node 0xb544c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1419 TO ALLOCATE BLOCK OF SIZE 585
Adjusted size to: 1024
RETURN ADDRESS 0xb545203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443c00
removing node 0xb545203c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1420 TO ALLOCATE BLOCK OF SIZE 1293
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5452000 and pagePtr 0x9919528 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 50 
stepping through nodes 
 we have 222 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f087c and the new one at 0xb53f08a8 
New page node points to data page 0xb5452000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 51 
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
removing node 0xb544c03c of size 4096 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
RETURN ADDRESS IS ----------------------->>>>>0xb544803c-> 0xb5452000
removing node 0xb544803c of size 2048 


 REQUEST NUMBER 1421 TO ALLOCATE BLOCK OF SIZE 793
Adjusted size to: 1024
removing node 0xb544803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5452800
removing node 0xb544803c of size 1024 


 REQUEST NUMBER 1422 TO ALLOCATE BLOCK OF SIZE 939
Adjusted size to: 1024
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5452c00
removing node 0xb544803c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1423 TO ALLOCATE BLOCK OF SIZE 1280
Adjusted size to: 2048
removing node 0xb544c03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5453000
removing node 0xb544c03c of size 2048 


 REQUEST NUMBER 1424 TO FREE BLOCK 0xb52ef000  OF SIZE 2671
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52ef000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5454000 -- 0xb5456000| 

 COUNT: 1  - ends at 0xb545403c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb544c000 -- 0xb544e000| 

 COUNT: 1  - ends at 0xb544c03c 
	 7 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1425 TO ALLOCATE BLOCK OF SIZE 17
Adjusted size to: 32
removing node 0xb545403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb545404c whose previous is 0xb545403c and size is 16 so prev+16 =0xb545404c 
removing node 0xb545403c of size 256 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
removing node 0xb544a03c of size 128 
created new node at 0xb545604c whose previous is 0xb545603c and size is 16 so prev+16 =0xb545604c 
removing node 0xb545603c of size 64 
created new node at 0xb545804c whose previous is 0xb545803c and size is 16 so prev+16 =0xb545804c 
RETURN ADDRESS 0xb545803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443200
removing node 0xb545803c of size 32 


 REQUEST NUMBER 1426 TO ALLOCATE BLOCK OF SIZE 4688
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x993ee78 and page at 0xb545a000 
adding page node for the page located at 0xb545a000 and pagePtr 0x993ee78 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 51 
stepping through nodes 
 we have 223 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f08a8 and the new one at 0xb53f08d4 
New page node points to data page 0xb545a000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 52 
RETURN ADDRESS IS 0xb545a000 


 REQUEST NUMBER 1427 TO ALLOCATE BLOCK OF SIZE 1032
Adjusted size to: 2048
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5453800
removing node 0xb544c03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1428 TO FREE BLOCK 0xb53d8000  OF SIZE 5716
removing pageNode to page with ptr 0x992c1f0 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
IN THE LOOp 0xb527c66c 
IN THE LOOp 0xb527c698 
IN THE LOOp 0xb527c6c4 
IN THE LOOp 0xb527c6f0 
IN THE LOOp 0xb527c71c 
IN THE LOOp 0xb527c748 
IN THE LOOp 0xb527c774 
IN THE LOOp 0xb527c7a0 
IN THE LOOp 0xb527c7cc 
IN THE LOOp 0xb527c7f8 
IN THE LOOp 0xb527c824 
IN THE LOOp 0xb527c850 
IN THE LOOp 0xb527c87c 
IN THE LOOp 0xb527c8a8 
IN THE LOOp 0xb527c8d4 
IN THE LOOp 0xb527c900 
IN THE LOOp 0xb527c92c 
IN THE LOOp 0xb527c958 
IN THE LOOp 0xb527c984 
IN THE LOOp 0xb527c9b0 
IN THE LOOp 0xb527c9dc 
IN THE LOOp 0xb527ca08 
IN THE LOOp 0xb527ca34 
IN THE LOOp 0xb527ca60 
IN THE LOOp 0xb527ca8c 
IN THE LOOp 0xb527cab8 
IN THE LOOp 0xb527cae4 
IN THE LOOp 0xb527cb10 
IN THE LOOp 0xb527cb3c 
IN THE LOOp 0xb527cb68 
IN THE LOOp 0xb527cb94 
IN THE LOOp 0xb527cbc0 
IN THE LOOp 0xb527cbec 
IN THE LOOp 0xb527cc18 
IN THE LOOp 0xb527cc44 
IN THE LOOp 0xb527cc70 
IN THE LOOp 0xb527cc9c 
IN THE LOOp 0xb527ccc8 
IN THE LOOp 0xb527ccf4 
IN THE LOOp 0xb527cd20 
IN THE LOOp 0xb527cd4c 
IN THE LOOp 0xb527cd78 
IN THE LOOp 0xb527cda4 
IN THE LOOp 0xb527cdd0 
IN THE LOOp 0xb527cdfc 
IN THE LOOp 0xb527ce28 
IN THE LOOp 0xb527ce54 
IN THE LOOp 0xb527ce80 
IN THE LOOp 0xb527ceac 
IN THE LOOp 0xb527ced8 
IN THE LOOp 0xb527cf04 
IN THE LOOp 0xb527cf30 
IN THE LOOp 0xb527cf5c 
IN THE LOOp 0xb527cf88 
IN THE LOOp 0xb527cfb4 
IN THE LOOp 0xb527cfe0 
IN THE LOOp 0xb527d00c 
IN THE LOOp 0xb527d038 
IN THE LOOp 0xb527d064 
IN THE LOOp 0xb527d090 
IN THE LOOp 0xb527d0bc 
IN THE LOOp 0xb527d0e8 
IN THE LOOp 0xb527d114 
IN THE LOOp 0xb527d140 
IN THE LOOp 0xb527d16c 
IN THE LOOp 0xb527d198 
IN THE LOOp 0xb527d1c4 
IN THE LOOp 0xb527d1f0 
IN THE LOOp 0xb527d21c 
IN THE LOOp 0xb527d248 
IN THE LOOp 0xb527d274 
IN THE LOOp 0xb527d2a0 
IN THE LOOp 0xb527d2cc 
IN THE LOOp 0xb527d2f8 
IN THE LOOp 0xb527d324 
IN THE LOOp 0xb527d350 
IN THE LOOp 0xb527d37c 
IN THE LOOp 0xb527d3a8 
IN THE LOOp 0xb527d3d4 
IN THE LOOp 0xb527d400 
IN THE LOOp 0xb527d42c 
IN THE LOOp 0xb527d458 
IN THE LOOp 0xb527d484 
IN THE LOOp 0xb527d4b0 
IN THE LOOp 0xb527d4dc 
IN THE LOOp 0xb527d508 
IN THE LOOp 0xb527d534 
IN THE LOOp 0xb527d560 
IN THE LOOp 0xb527d58c 
IN THE LOOp 0xb527d5b8 
IN THE LOOp 0xb527d5e4 
IN THE LOOp 0xb527d610 
IN THE LOOp 0xb527d63c 
IN THE LOOp 0xb527d668 
IN THE LOOp 0xb527d694 
IN THE LOOp 0xb527d6c0 
IN THE LOOp 0xb527d6ec 
IN THE LOOp 0xb527d718 
IN THE LOOp 0xb527d744 
IN THE LOOp 0xb527d770 
IN THE LOOp 0xb527d79c 
IN THE LOOp 0xb527d7c8 
IN THE LOOp 0xb527d7f4 
IN THE LOOp 0xb527d820 
IN THE LOOp 0xb527d84c 
IN THE LOOp 0xb527d878 
IN THE LOOp 0xb527d8a4 
IN THE LOOp 0xb527d8d0 
IN THE LOOp 0xb527d8fc 
IN THE LOOp 0xb527d928 
IN THE LOOp 0xb527d954 
IN THE LOOp 0xb527d980 
IN THE LOOp 0xb527d9ac 
IN THE LOOp 0xb527d9d8 
IN THE LOOp 0xb527da04 
IN THE LOOp 0xb527da30 
IN THE LOOp 0xb527da5c 
IN THE LOOp 0xb527da88 
IN THE LOOp 0xb527dab4 
IN THE LOOp 0xb527dae0 
IN THE LOOp 0xb527db0c 
IN THE LOOp 0xb527db38 
IN THE LOOp 0xb527db64 
out of loop 
IN LOOPP 0xb527dbbc -> 0xb527dbe8 (next) 
IN LOOPP 0xb527dbe8 -> 0xb527dc14 (next) 
IN LOOPP 0xb527dc14 -> 0xb527dc40 (next) 
IN LOOPP 0xb527dc40 -> 0xb527dc6c (next) 
IN LOOPP 0xb527dc6c -> 0xb527dc98 (next) 
IN LOOPP 0xb527dc98 -> 0xb527dcc4 (next) 
IN LOOPP 0xb527dcc4 -> 0xb527dcf0 (next) 
IN LOOPP 0xb527dcf0 -> 0xb527dd1c (next) 
IN LOOPP 0xb527dd1c -> 0xb527dd48 (next) 
IN LOOPP 0xb527dd48 -> 0xb527dd74 (next) 
IN LOOPP 0xb527dd74 -> 0xb527dda0 (next) 
IN LOOPP 0xb527dda0 -> 0xb527ddcc (next) 
IN LOOPP 0xb527ddcc -> 0xb53f003c (next) 
IN LOOPP 0xb53f003c -> 0xb53f0068 (next) 
IN LOOPP 0xb53f0068 -> 0xb53f0094 (next) 
IN LOOPP 0xb53f0094 -> 0xb53f00c0 (next) 
IN LOOPP 0xb53f00c0 -> 0xb53f00ec (next) 
IN LOOPP 0xb53f00ec -> 0xb53f0118 (next) 
IN LOOPP 0xb53f0118 -> 0xb53f0144 (next) 
IN LOOPP 0xb53f0144 -> 0xb53f0170 (next) 
IN LOOPP 0xb53f0170 -> 0xb53f019c (next) 
IN LOOPP 0xb53f019c -> 0xb53f01c8 (next) 
IN LOOPP 0xb53f01c8 -> 0xb53f01f4 (next) 
IN LOOPP 0xb53f01f4 -> 0xb53f0220 (next) 
IN LOOPP 0xb53f0220 -> 0xb53f024c (next) 
IN LOOPP 0xb53f024c -> 0xb53f0278 (next) 
IN LOOPP 0xb53f0278 -> 0xb53f02a4 (next) 
IN LOOPP 0xb53f02a4 -> 0xb53f02d0 (next) 
IN LOOPP 0xb53f02d0 -> 0xb53f02fc (next) 
IN LOOPP 0xb53f02fc -> 0xb53f0328 (next) 
IN LOOPP 0xb53f0328 -> 0xb53f0354 (next) 
IN LOOPP 0xb53f0354 -> 0xb53f0380 (next) 
IN LOOPP 0xb53f0380 -> 0xb53f03ac (next) 
IN LOOPP 0xb53f03ac -> 0xb53f03d8 (next) 
IN LOOPP 0xb53f03d8 -> 0xb53f0404 (next) 
IN LOOPP 0xb53f0404 -> 0xb53f0430 (next) 
IN LOOPP 0xb53f0430 -> 0xb53f045c (next) 
IN LOOPP 0xb53f045c -> 0xb53f0488 (next) 
IN LOOPP 0xb53f0488 -> 0xb53f04b4 (next) 
IN LOOPP 0xb53f04b4 -> 0xb53f04e0 (next) 
IN LOOPP 0xb53f04e0 -> 0xb53f050c (next) 
IN LOOPP 0xb53f050c -> 0xb53f0538 (next) 
IN LOOPP 0xb53f0538 -> 0xb53f0564 (next) 
IN LOOPP 0xb53f0564 -> 0xb53f0590 (next) 
IN LOOPP 0xb53f0590 -> 0xb53f05bc (next) 
IN LOOPP 0xb53f05bc -> 0xb53f05e8 (next) 
IN LOOPP 0xb53f05e8 -> 0xb53f0614 (next) 
IN LOOPP 0xb53f0614 -> 0xb53f0640 (next) 
IN LOOPP 0xb53f0640 -> 0xb53f066c (next) 
IN LOOPP 0xb53f066c -> 0xb53f0698 (next) 
IN LOOPP 0xb53f0698 -> 0xb53f06c4 (next) 
IN LOOPP 0xb53f06c4 -> 0xb53f06f0 (next) 
IN LOOPP 0xb53f06f0 -> 0xb53f071c (next) 
IN LOOPP 0xb53f071c -> 0xb53f0748 (next) 
IN LOOPP 0xb53f0748 -> 0xb53f0774 (next) 
IN LOOPP 0xb53f0774 -> 0xb53f07a0 (next) 
IN LOOPP 0xb53f07a0 -> 0xb53f07cc (next) 
IN LOOPP 0xb53f07cc -> 0xb53f07f8 (next) 
IN LOOPP 0xb53f07f8 -> 0xb53f0824 (next) 
IN LOOPP 0xb53f0824 -> 0xb53f0850 (next) 
IN LOOPP 0xb53f0850 -> 0xb53f087c (next) 
IN LOOPP 0xb53f087c -> 0xb53f08a8 (next) 
IN LOOPP 0xb53f08a8 -> 0xb53f08d4 (next) 
IN LOOPP 0xb53f08d4 -> (nil) (next) 
Add 0xb53f087c we set the next to null 
Prev: 0xb53f08d4, current: (nil) 
Page to decrease counter: 0xb53f0000 from 52 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb5458000 -- 0xb545a000| 

 COUNT: 1  - ends at 0xb545803c 
	 1 -> 0xb5456000 -- 0xb5458000| 

 COUNT: 1  - ends at 0xb545603c 
	 2 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 3 -> 0xb5454000 -- 0xb5456000| 

 COUNT: 1  - ends at 0xb545403c 
	 4 -> (nil) -- 0x2000| 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1429 TO ALLOCATE BLOCK OF SIZE 5529
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x992c1f0 and page at 0xb53d8000 
adding page node for the page located at 0xb53d8000 and pagePtr 0x992c1f0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 51 
stepping through nodes 
 we have 222 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f087c and the new one at 0xb53f08a8 
New page node points to data page 0xb53d8000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 52 
RETURN ADDRESS IS 0xb53d8000 


 REQUEST NUMBER 1430 TO ALLOCATE BLOCK OF SIZE 2230
Adjusted size to: 4096
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ef000
removing node 0xb544803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1431 TO ALLOCATE BLOCK OF SIZE 84
Adjusted size to: 128
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443280
removing node 0xb544a03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1432 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb545803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443220
removing node 0xb545803c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1433 TO ALLOCATE BLOCK OF SIZE 8
Adjusted size to: 32
removing node 0xb545603c of size 64 
*** freeing page for lists of size 1
created new node at 0xb545604c whose previous is 0xb545603c and size is 16 so prev+16 =0xb545604c 
RETURN ADDRESS 0xb545603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443240
removing node 0xb545603c of size 32 


 REQUEST NUMBER 1434 TO ALLOCATE BLOCK OF SIZE 428
Adjusted size to: 512
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5458000 and pagePtr 0x99dd480 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 52 
stepping through nodes 
 we have 223 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f08a8 and the new one at 0xb53f08d4 
New page node points to data page 0xb5458000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 53 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
removing node 0xb544a03c of size 4096 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
removing node 0xb544803c of size 2048 
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
removing node 0xb544c03c of size 1024 
created new node at 0xb545c04c whose previous is 0xb545c03c and size is 16 so prev+16 =0xb545c04c 
RETURN ADDRESS IS ----------------------->>>>>0xb545c03c-> 0xb5458000
removing node 0xb545c03c of size 512 


 REQUEST NUMBER 1435 TO ALLOCATE BLOCK OF SIZE 159
Adjusted size to: 256
RETURN ADDRESS 0xb545403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443300
removing node 0xb545403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1436 TO ALLOCATE BLOCK OF SIZE 770
Adjusted size to: 1024
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458400
removing node 0xb544c03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1437 TO ALLOCATE BLOCK OF SIZE 430
Adjusted size to: 512
RETURN ADDRESS 0xb545c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458200
removing node 0xb545c03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1438 TO ALLOCATE BLOCK OF SIZE 5077
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a163c0 and page at 0xb545c000 
adding page node for the page located at 0xb545c000 and pagePtr 0x9a163c0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 53 
stepping through nodes 
 we have 224 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f08d4 and the new one at 0xb53f0900 
New page node points to data page 0xb545c000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 54 
RETURN ADDRESS IS 0xb545c000 


 REQUEST NUMBER 1439 TO ALLOCATE BLOCK OF SIZE 13
Adjusted size to: 32
RETURN ADDRESS 0xb545603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5443260
removing node 0xb545603c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1440 TO ALLOCATE BLOCK OF SIZE 21
Adjusted size to: 32
removing node 0xb544803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
removing node 0xb544803c of size 1024 
created new node at 0xb545604c whose previous is 0xb545603c and size is 16 so prev+16 =0xb545604c 
removing node 0xb545603c of size 512 
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
removing node 0xb544c03c of size 256 
created new node at 0xb545404c whose previous is 0xb545403c and size is 16 so prev+16 =0xb545404c 
removing node 0xb545403c of size 128 
created new node at 0xb545e04c whose previous is 0xb545e03c and size is 16 so prev+16 =0xb545e04c 
removing node 0xb545e03c of size 64 
created new node at 0xb546004c whose previous is 0xb546003c and size is 16 so prev+16 =0xb546004c 
RETURN ADDRESS 0xb546003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458800
removing node 0xb546003c of size 32 


 REQUEST NUMBER 1441 TO ALLOCATE BLOCK OF SIZE 76
Adjusted size to: 128
RETURN ADDRESS 0xb545403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458880
removing node 0xb545403c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1442 TO ALLOCATE BLOCK OF SIZE 126
Adjusted size to: 128
removing node 0xb544c03c of size 256 
*** freeing page for lists of size 3
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458900
removing node 0xb544c03c of size 128 


 REQUEST NUMBER 1443 TO ALLOCATE BLOCK OF SIZE 31
Adjusted size to: 32
RETURN ADDRESS 0xb546003c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458820
removing node 0xb546003c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1444 TO ALLOCATE BLOCK OF SIZE 142
Adjusted size to: 256
removing node 0xb545603c of size 512 
*** freeing page for lists of size 4
created new node at 0xb545604c whose previous is 0xb545603c and size is 16 so prev+16 =0xb545604c 
RETURN ADDRESS 0xb545603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458a00
removing node 0xb545603c of size 256 


 REQUEST NUMBER 1445 TO ALLOCATE BLOCK OF SIZE 22
Adjusted size to: 32
removing node 0xb545e03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb545e04c whose previous is 0xb545e03c and size is 16 so prev+16 =0xb545e04c 
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458840
removing node 0xb545e03c of size 32 


 REQUEST NUMBER 1446 TO ALLOCATE BLOCK OF SIZE 30
Adjusted size to: 32
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458860
removing node 0xb545e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1447 TO ALLOCATE BLOCK OF SIZE 1420
Adjusted size to: 2048
removing node 0xb544a03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5459000
removing node 0xb544a03c of size 2048 


 REQUEST NUMBER 1448 TO FREE BLOCK 0xb5327140  OF SIZE 10
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5327140 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb545e000 -- 0xb5460000| 

 COUNT: 1  - ends at 0xb545e03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb544c000 -- 0xb544e000| 

 COUNT: 1  - ends at 0xb544c03c 
	 3 -> 0xb5456000 -- 0xb5458000| 

 COUNT: 1  - ends at 0xb545603c 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 6 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1449 TO ALLOCATE BLOCK OF SIZE 501
Adjusted size to: 512
removing node 0xb544803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458c00
removing node 0xb544803c of size 512 


 REQUEST NUMBER 1450 TO ALLOCATE BLOCK OF SIZE 79
Adjusted size to: 128
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458980
removing node 0xb544c03c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1451 TO ALLOCATE BLOCK OF SIZE 615
Adjusted size to: 1024
removing node 0xb544a03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5459800
removing node 0xb544a03c of size 1024 


 REQUEST NUMBER 1452 TO FREE BLOCK 0xb52ee800  OF SIZE 938
coalescing blocks if possible
trying to coalesce a block at ptr 0xb52ee800 and of size: 1024 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb545e000 -- 0xb5460000| 

 COUNT: 1  - ends at 0xb545e03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5456000 -- 0xb5458000| 

 COUNT: 1  - ends at 0xb545603c 
	 4 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 5 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 2  - ends at 0xb544a04c 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1453 TO FREE BLOCK 0xb5337920  OF SIZE 9
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5337920 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb545e04c whose previous is 0xb545e03c and size is 16 so prev+16 =0xb545e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb545e000 -- 0xb5460000| 

 COUNT: 2  - ends at 0xb545e04c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5456000 -- 0xb5458000| 

 COUNT: 1  - ends at 0xb545603c 
	 4 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 5 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 2  - ends at 0xb544a04c 
	 6 -> (nil) -- 0x2000| 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1454 TO FREE BLOCK 0xb5369000  OF SIZE 2574
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5369000 and of size: 4096 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb545e000 -- 0xb5460000| 

 COUNT: 2  - ends at 0xb545e04c 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5456000 -- 0xb5458000| 

 COUNT: 1  - ends at 0xb545603c 
	 4 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 5 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 2  - ends at 0xb544a04c 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb544c000 -- 0xb544e000| 

 COUNT: 1  - ends at 0xb544c03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1455 TO ALLOCATE BLOCK OF SIZE 1576
Adjusted size to: 2048
removing node 0xb544c03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb544c04c whose previous is 0xb544c03c and size is 16 so prev+16 =0xb544c04c 
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5369000
removing node 0xb544c03c of size 2048 


 REQUEST NUMBER 1456 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327140
removing node 0xb545e03c of size 32 


 REQUEST NUMBER 1457 TO ALLOCATE BLOCK OF SIZE 83
Adjusted size to: 128
removing node 0xb545603c of size 256 
*** freeing page for lists of size 3
created new node at 0xb545604c whose previous is 0xb545603c and size is 16 so prev+16 =0xb545604c 
RETURN ADDRESS 0xb545603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458b00
removing node 0xb545603c of size 128 


 REQUEST NUMBER 1458 TO ALLOCATE BLOCK OF SIZE 344
Adjusted size to: 512
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458e00
removing node 0xb544803c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1459 TO FREE BLOCK 0xb538a000  OF SIZE 5042
removing pageNode to page with ptr 0x9996180 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
IN THE LOOp 0xb527c66c 
IN THE LOOp 0xb527c698 
IN THE LOOp 0xb527c6c4 
IN THE LOOp 0xb527c6f0 
IN THE LOOp 0xb527c71c 
IN THE LOOp 0xb527c748 
IN THE LOOp 0xb527c774 
IN THE LOOp 0xb527c7a0 
IN THE LOOp 0xb527c7cc 
IN THE LOOp 0xb527c7f8 
IN THE LOOp 0xb527c824 
IN THE LOOp 0xb527c850 
IN THE LOOp 0xb527c87c 
IN THE LOOp 0xb527c8a8 
IN THE LOOp 0xb527c8d4 
IN THE LOOp 0xb527c900 
IN THE LOOp 0xb527c92c 
IN THE LOOp 0xb527c958 
IN THE LOOp 0xb527c984 
IN THE LOOp 0xb527c9b0 
IN THE LOOp 0xb527c9dc 
IN THE LOOp 0xb527ca08 
IN THE LOOp 0xb527ca34 
IN THE LOOp 0xb527ca60 
IN THE LOOp 0xb527ca8c 
IN THE LOOp 0xb527cab8 
IN THE LOOp 0xb527cae4 
IN THE LOOp 0xb527cb10 
IN THE LOOp 0xb527cb3c 
IN THE LOOp 0xb527cb68 
IN THE LOOp 0xb527cb94 
IN THE LOOp 0xb527cbc0 
IN THE LOOp 0xb527cbec 
IN THE LOOp 0xb527cc18 
IN THE LOOp 0xb527cc44 
IN THE LOOp 0xb527cc70 
IN THE LOOp 0xb527cc9c 
IN THE LOOp 0xb527ccc8 
IN THE LOOp 0xb527ccf4 
IN THE LOOp 0xb527cd20 
IN THE LOOp 0xb527cd4c 
IN THE LOOp 0xb527cd78 
IN THE LOOp 0xb527cda4 
IN THE LOOp 0xb527cdd0 
IN THE LOOp 0xb527cdfc 
IN THE LOOp 0xb527ce28 
IN THE LOOp 0xb527ce54 
IN THE LOOp 0xb527ce80 
IN THE LOOp 0xb527ceac 
IN THE LOOp 0xb527ced8 
IN THE LOOp 0xb527cf04 
IN THE LOOp 0xb527cf30 
IN THE LOOp 0xb527cf5c 
IN THE LOOp 0xb527cf88 
IN THE LOOp 0xb527cfb4 
IN THE LOOp 0xb527cfe0 
IN THE LOOp 0xb527d00c 
IN THE LOOp 0xb527d038 
IN THE LOOp 0xb527d064 
IN THE LOOp 0xb527d090 
IN THE LOOp 0xb527d0bc 
IN THE LOOp 0xb527d0e8 
IN THE LOOp 0xb527d114 
IN THE LOOp 0xb527d140 
IN THE LOOp 0xb527d16c 
IN THE LOOp 0xb527d198 
IN THE LOOp 0xb527d1c4 
IN THE LOOp 0xb527d1f0 
IN THE LOOp 0xb527d21c 
IN THE LOOp 0xb527d248 
IN THE LOOp 0xb527d274 
IN THE LOOp 0xb527d2a0 
IN THE LOOp 0xb527d2cc 
IN THE LOOp 0xb527d2f8 
IN THE LOOp 0xb527d324 
IN THE LOOp 0xb527d350 
IN THE LOOp 0xb527d37c 
IN THE LOOp 0xb527d3a8 
IN THE LOOp 0xb527d3d4 
IN THE LOOp 0xb527d400 
IN THE LOOp 0xb527d42c 
IN THE LOOp 0xb527d458 
IN THE LOOp 0xb527d484 
IN THE LOOp 0xb527d4b0 
IN THE LOOp 0xb527d4dc 
IN THE LOOp 0xb527d508 
IN THE LOOp 0xb527d534 
out of loop 
IN LOOPP 0xb527d58c -> 0xb527d5b8 (next) 
IN LOOPP 0xb527d5b8 -> 0xb527d5e4 (next) 
IN LOOPP 0xb527d5e4 -> 0xb527d610 (next) 
IN LOOPP 0xb527d610 -> 0xb527d63c (next) 
IN LOOPP 0xb527d63c -> 0xb527d668 (next) 
IN LOOPP 0xb527d668 -> 0xb527d694 (next) 
IN LOOPP 0xb527d694 -> 0xb527d6c0 (next) 
IN LOOPP 0xb527d6c0 -> 0xb527d6ec (next) 
IN LOOPP 0xb527d6ec -> 0xb527d718 (next) 
IN LOOPP 0xb527d718 -> 0xb527d744 (next) 
IN LOOPP 0xb527d744 -> 0xb527d770 (next) 
IN LOOPP 0xb527d770 -> 0xb527d79c (next) 
IN LOOPP 0xb527d79c -> 0xb527d7c8 (next) 
IN LOOPP 0xb527d7c8 -> 0xb527d7f4 (next) 
IN LOOPP 0xb527d7f4 -> 0xb527d820 (next) 
IN LOOPP 0xb527d820 -> 0xb527d84c (next) 
IN LOOPP 0xb527d84c -> 0xb527d878 (next) 
IN LOOPP 0xb527d878 -> 0xb527d8a4 (next) 
IN LOOPP 0xb527d8a4 -> 0xb527d8d0 (next) 
IN LOOPP 0xb527d8d0 -> 0xb527d8fc (next) 
IN LOOPP 0xb527d8fc -> 0xb527d928 (next) 
IN LOOPP 0xb527d928 -> 0xb527d954 (next) 
IN LOOPP 0xb527d954 -> 0xb527d980 (next) 
IN LOOPP 0xb527d980 -> 0xb527d9ac (next) 
IN LOOPP 0xb527d9ac -> 0xb527d9d8 (next) 
IN LOOPP 0xb527d9d8 -> 0xb527da04 (next) 
IN LOOPP 0xb527da04 -> 0xb527da30 (next) 
IN LOOPP 0xb527da30 -> 0xb527da5c (next) 
IN LOOPP 0xb527da5c -> 0xb527da88 (next) 
IN LOOPP 0xb527da88 -> 0xb527dab4 (next) 
IN LOOPP 0xb527dab4 -> 0xb527dae0 (next) 
IN LOOPP 0xb527dae0 -> 0xb527db0c (next) 
IN LOOPP 0xb527db0c -> 0xb527db38 (next) 
IN LOOPP 0xb527db38 -> 0xb527db64 (next) 
IN LOOPP 0xb527db64 -> 0xb527db90 (next) 
IN LOOPP 0xb527db90 -> 0xb527dbbc (next) 
IN LOOPP 0xb527dbbc -> 0xb527dbe8 (next) 
IN LOOPP 0xb527dbe8 -> 0xb527dc14 (next) 
IN LOOPP 0xb527dc14 -> 0xb527dc40 (next) 
IN LOOPP 0xb527dc40 -> 0xb527dc6c (next) 
IN LOOPP 0xb527dc6c -> 0xb527dc98 (next) 
IN LOOPP 0xb527dc98 -> 0xb527dcc4 (next) 
IN LOOPP 0xb527dcc4 -> 0xb527dcf0 (next) 
IN LOOPP 0xb527dcf0 -> 0xb527dd1c (next) 
IN LOOPP 0xb527dd1c -> 0xb527dd48 (next) 
IN LOOPP 0xb527dd48 -> 0xb527dd74 (next) 
IN LOOPP 0xb527dd74 -> 0xb527dda0 (next) 
IN LOOPP 0xb527dda0 -> 0xb527ddcc (next) 
IN LOOPP 0xb527ddcc -> 0xb53f003c (next) 
IN LOOPP 0xb53f003c -> 0xb53f0068 (next) 
IN LOOPP 0xb53f0068 -> 0xb53f0094 (next) 
IN LOOPP 0xb53f0094 -> 0xb53f00c0 (next) 
IN LOOPP 0xb53f00c0 -> 0xb53f00ec (next) 
IN LOOPP 0xb53f00ec -> 0xb53f0118 (next) 
IN LOOPP 0xb53f0118 -> 0xb53f0144 (next) 
IN LOOPP 0xb53f0144 -> 0xb53f0170 (next) 
IN LOOPP 0xb53f0170 -> 0xb53f019c (next) 
IN LOOPP 0xb53f019c -> 0xb53f01c8 (next) 
IN LOOPP 0xb53f01c8 -> 0xb53f01f4 (next) 
IN LOOPP 0xb53f01f4 -> 0xb53f0220 (next) 
IN LOOPP 0xb53f0220 -> 0xb53f024c (next) 
IN LOOPP 0xb53f024c -> 0xb53f0278 (next) 
IN LOOPP 0xb53f0278 -> 0xb53f02a4 (next) 
IN LOOPP 0xb53f02a4 -> 0xb53f02d0 (next) 
IN LOOPP 0xb53f02d0 -> 0xb53f02fc (next) 
IN LOOPP 0xb53f02fc -> 0xb53f0328 (next) 
IN LOOPP 0xb53f0328 -> 0xb53f0354 (next) 
IN LOOPP 0xb53f0354 -> 0xb53f0380 (next) 
IN LOOPP 0xb53f0380 -> 0xb53f03ac (next) 
IN LOOPP 0xb53f03ac -> 0xb53f03d8 (next) 
IN LOOPP 0xb53f03d8 -> 0xb53f0404 (next) 
IN LOOPP 0xb53f0404 -> 0xb53f0430 (next) 
IN LOOPP 0xb53f0430 -> 0xb53f045c (next) 
IN LOOPP 0xb53f045c -> 0xb53f0488 (next) 
IN LOOPP 0xb53f0488 -> 0xb53f04b4 (next) 
IN LOOPP 0xb53f04b4 -> 0xb53f04e0 (next) 
IN LOOPP 0xb53f04e0 -> 0xb53f050c (next) 
IN LOOPP 0xb53f050c -> 0xb53f0538 (next) 
IN LOOPP 0xb53f0538 -> 0xb53f0564 (next) 
IN LOOPP 0xb53f0564 -> 0xb53f0590 (next) 
IN LOOPP 0xb53f0590 -> 0xb53f05bc (next) 
IN LOOPP 0xb53f05bc -> 0xb53f05e8 (next) 
IN LOOPP 0xb53f05e8 -> 0xb53f0614 (next) 
IN LOOPP 0xb53f0614 -> 0xb53f0640 (next) 
IN LOOPP 0xb53f0640 -> 0xb53f066c (next) 
IN LOOPP 0xb53f066c -> 0xb53f0698 (next) 
IN LOOPP 0xb53f0698 -> 0xb53f06c4 (next) 
IN LOOPP 0xb53f06c4 -> 0xb53f06f0 (next) 
IN LOOPP 0xb53f06f0 -> 0xb53f071c (next) 
IN LOOPP 0xb53f071c -> 0xb53f0748 (next) 
IN LOOPP 0xb53f0748 -> 0xb53f0774 (next) 
IN LOOPP 0xb53f0774 -> 0xb53f07a0 (next) 
IN LOOPP 0xb53f07a0 -> 0xb53f07cc (next) 
IN LOOPP 0xb53f07cc -> 0xb53f07f8 (next) 
IN LOOPP 0xb53f07f8 -> 0xb53f0824 (next) 
IN LOOPP 0xb53f0824 -> 0xb53f0850 (next) 
IN LOOPP 0xb53f0850 -> 0xb53f087c (next) 
IN LOOPP 0xb53f087c -> 0xb53f08a8 (next) 
IN LOOPP 0xb53f08a8 -> 0xb53f08d4 (next) 
IN LOOPP 0xb53f08d4 -> 0xb53f0900 (next) 
IN LOOPP 0xb53f0900 -> (nil) (next) 
Add 0xb53f08a8 we set the next to null 
Prev: 0xb53f0900, current: (nil) 
Page to decrease counter: 0xb53f0000 from 54 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb545e000 -- 0xb5460000| 

 COUNT: 1  - ends at 0xb545e03c 
	 1 -> (nil) -- 0x2000| 
	 2 -> 0xb5456000 -- 0xb5458000| 

 COUNT: 1  - ends at 0xb545603c 
	 3 -> (nil) -- 0x2000| 
	 4 -> (nil) -- 0x2000| 
	 5 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 2  - ends at 0xb544a04c 
	 6 -> 0xb544c000 -- 0xb544e000| 

 COUNT: 1  - ends at 0xb544c03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1460 TO ALLOCATE BLOCK OF SIZE 2280
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb538a000 and pagePtr 0x9996180 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 53 
stepping through nodes 
 we have 223 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f08a8 and the new one at 0xb53f08d4 
New page node points to data page 0xb538a000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 54 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
RETURN ADDRESS IS ----------------------->>>>>0xb544803c-> 0xb538a000
removing node 0xb544803c of size 4096 


 REQUEST NUMBER 1461 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5337920
removing node 0xb545e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1462 TO ALLOCATE BLOCK OF SIZE 29
Adjusted size to: 32
removing node 0xb545603c of size 128 
*** freeing page for lists of size 2
created new node at 0xb545604c whose previous is 0xb545603c and size is 16 so prev+16 =0xb545604c 
removing node 0xb545603c of size 64 
created new node at 0xb545e04c whose previous is 0xb545e03c and size is 16 so prev+16 =0xb545e04c 
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458b80
removing node 0xb545e03c of size 32 


 REQUEST NUMBER 1463 TO ALLOCATE BLOCK OF SIZE 4945
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9a0c958 and page at 0xb5460000 
adding page node for the page located at 0xb5460000 and pagePtr 0x9a0c958 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 54 
stepping through nodes 
 we have 224 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f08d4 and the new one at 0xb53f0900 
New page node points to data page 0xb5460000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 55 
RETURN ADDRESS IS 0xb5460000 


 REQUEST NUMBER 1464 TO ALLOCATE BLOCK OF SIZE 2257
Adjusted size to: 4096
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb538b000
removing node 0xb544803c of size 4096 
*** freeing page for lists of size 7


 REQUEST NUMBER 1465 TO ALLOCATE BLOCK OF SIZE 66
Adjusted size to: 128
removing node 0xb544a03c of size 1024 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
removing node 0xb544803c of size 512 
created new node at 0xb545404c whose previous is 0xb545403c and size is 16 so prev+16 =0xb545404c 
removing node 0xb545403c of size 256 
created new node at 0xb546204c whose previous is 0xb546203c and size is 16 so prev+16 =0xb546204c 
RETURN ADDRESS 0xb546203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5459c00
removing node 0xb546203c of size 128 


 REQUEST NUMBER 1466 TO ALLOCATE BLOCK OF SIZE 231
Adjusted size to: 256
RETURN ADDRESS 0xb545403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5459d00
removing node 0xb545403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1467 TO FREE BLOCK 0xb53a4f40  OF SIZE 15
coalescing blocks if possible
trying to coalesce a block at ptr 0xb53a4f40 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
created new node at 0xb545e04c whose previous is 0xb545e03c and size is 16 so prev+16 =0xb545e04c 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb545e000 -- 0xb5460000| 

 COUNT: 2  - ends at 0xb545e04c 
	 1 -> 0xb5456000 -- 0xb5458000| 

 COUNT: 1  - ends at 0xb545603c 
	 2 -> 0xb5462000 -- 0xb5464000| 

 COUNT: 1  - ends at 0xb546203c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 5 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 6 -> 0xb544c000 -- 0xb544e000| 

 COUNT: 1  - ends at 0xb544c03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1468 TO ALLOCATE BLOCK OF SIZE 2224
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5454000 and pagePtr 0x99dd4a0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 55 
stepping through nodes 
 we have 225 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0900 and the new one at 0xb53f092c 
New page node points to data page 0xb5454000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 56 
created new node at 0xb546404c whose previous is 0xb546403c and size is 16 so prev+16 =0xb546404c 
RETURN ADDRESS IS ----------------------->>>>>0xb546403c-> 0xb5454000
removing node 0xb546403c of size 4096 


 REQUEST NUMBER 1469 TO ALLOCATE BLOCK OF SIZE 14
Adjusted size to: 32
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458ba0
removing node 0xb545e03c of size 32 


 REQUEST NUMBER 1470 TO ALLOCATE BLOCK OF SIZE 250
Adjusted size to: 256
removing node 0xb544803c of size 512 
*** freeing page for lists of size 4
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5459e00
removing node 0xb544803c of size 256 


 REQUEST NUMBER 1471 TO ALLOCATE BLOCK OF SIZE 4970
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99a9c18 and page at 0xb5466000 
adding page node for the page located at 0xb5466000 and pagePtr 0x99a9c18 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 56 
stepping through nodes 
 we have 226 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f092c and the new one at 0xb53f0958 
New page node points to data page 0xb5466000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 57 
RETURN ADDRESS IS 0xb5466000 


 REQUEST NUMBER 1472 TO ALLOCATE BLOCK OF SIZE 1414
Adjusted size to: 2048
RETURN ADDRESS 0xb544c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5369800
removing node 0xb544c03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1473 TO ALLOCATE BLOCK OF SIZE 4630
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x9976c18 and page at 0xb544c000 
adding page node for the page located at 0xb544c000 and pagePtr 0x9976c18 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 57 
stepping through nodes 
 we have 227 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0958 and the new one at 0xb53f0984 
New page node points to data page 0xb544c000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 58 
RETURN ADDRESS IS 0xb544c000 


 REQUEST NUMBER 1474 TO ALLOCATE BLOCK OF SIZE 741
Adjusted size to: 1024
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb52ee800
removing node 0xb544a03c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1475 TO ALLOCATE BLOCK OF SIZE 1652
Adjusted size to: 2048
removing node 0xb546403c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb546404c whose previous is 0xb546403c and size is 16 so prev+16 =0xb546404c 
RETURN ADDRESS 0xb546403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5455000
removing node 0xb546403c of size 2048 


 REQUEST NUMBER 1476 TO ALLOCATE BLOCK OF SIZE 738
Adjusted size to: 1024
removing node 0xb546403c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb546404c whose previous is 0xb546403c and size is 16 so prev+16 =0xb546404c 
RETURN ADDRESS 0xb546403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5455800
removing node 0xb546403c of size 1024 


 REQUEST NUMBER 1477 TO ALLOCATE BLOCK OF SIZE 124
Adjusted size to: 128
RETURN ADDRESS 0xb546203c
RETURN ADDRESS IS ----------------------->>>>> 0xb5459c80
removing node 0xb546203c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1478 TO ALLOCATE BLOCK OF SIZE 1778
Adjusted size to: 2048
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5462000 and pagePtr 0x99dd4b0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 58 
stepping through nodes 
 we have 228 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0984 and the new one at 0xb53f09b0 
New page node points to data page 0xb5462000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 59 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
removing node 0xb544a03c of size 4096 
created new node at 0xb546804c whose previous is 0xb546803c and size is 16 so prev+16 =0xb546804c 
RETURN ADDRESS IS ----------------------->>>>>0xb546803c-> 0xb5462000
removing node 0xb546803c of size 2048 


 REQUEST NUMBER 1479 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb53a4f40
removing node 0xb545e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1480 TO ALLOCATE BLOCK OF SIZE 946
Adjusted size to: 1024
RETURN ADDRESS 0xb546403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5455c00
removing node 0xb546403c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1481 TO ALLOCATE BLOCK OF SIZE 339
Adjusted size to: 512
removing node 0xb546803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb546804c whose previous is 0xb546803c and size is 16 so prev+16 =0xb546804c 
removing node 0xb546803c of size 1024 
created new node at 0xb546404c whose previous is 0xb546403c and size is 16 so prev+16 =0xb546404c 
RETURN ADDRESS 0xb546403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5462800
removing node 0xb546403c of size 512 


 REQUEST NUMBER 1482 TO ALLOCATE BLOCK OF SIZE 622
Adjusted size to: 1024
RETURN ADDRESS 0xb546803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5462c00
removing node 0xb546803c of size 1024 
*** freeing page for lists of size 5


 REQUEST NUMBER 1483 TO ALLOCATE BLOCK OF SIZE 102
Adjusted size to: 128
removing node 0xb544803c of size 256 
*** freeing page for lists of size 3
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5459f00
removing node 0xb544803c of size 128 


 REQUEST NUMBER 1484 TO ALLOCATE BLOCK OF SIZE 56
Adjusted size to: 64
RETURN ADDRESS 0xb545603c
RETURN ADDRESS IS ----------------------->>>>> 0xb5458bc0
removing node 0xb545603c of size 64 
*** freeing page for lists of size 1


 REQUEST NUMBER 1485 TO ALLOCATE BLOCK OF SIZE 111
Adjusted size to: 128
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5459f80
removing node 0xb544803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1486 TO FREE BLOCK 0xb5297100  OF SIZE 193
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5297100 and of size: 256 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> (nil) -- 0x2000| 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 4 -> 0xb5464000 -- 0xb5466000| 

 COUNT: 1  - ends at 0xb546403c 
	 5 -> (nil) -- 0x2000| 
	 6 -> (nil) -- 0x2000| 
	 7 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1487 TO ALLOCATE BLOCK OF SIZE 1184
Adjusted size to: 2048
removing node 0xb544a03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5463000
removing node 0xb544a03c of size 2048 


 REQUEST NUMBER 1488 TO ALLOCATE BLOCK OF SIZE 3687
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb5456000 and pagePtr 0x9a163b0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 59 
stepping through nodes 
 we have 229 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f09b0 and the new one at 0xb53f09dc 
New page node points to data page 0xb5456000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 60 
created new node at 0xb546804c whose previous is 0xb546803c and size is 16 so prev+16 =0xb546804c 
RETURN ADDRESS IS ----------------------->>>>>0xb546803c-> 0xb5456000
removing node 0xb546803c of size 4096 


 REQUEST NUMBER 1489 TO ALLOCATE BLOCK OF SIZE 51
Adjusted size to: 64
removing node 0xb544803c of size 256 
*** freeing page for lists of size 3
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
removing node 0xb544803c of size 128 
created new node at 0xb545e04c whose previous is 0xb545e03c and size is 16 so prev+16 =0xb545e04c 
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297100
removing node 0xb545e03c of size 64 


 REQUEST NUMBER 1490 TO FREE BLOCK 0xb5321c60  OF SIZE 31
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5321c60 and of size: 32 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> 0xb546a000 -- 0xb546c000| 

 COUNT: 1  - ends at 0xb546a03c 
	 1 -> 0xb545e000 -- 0xb5460000| 

 COUNT: 1  - ends at 0xb545e03c 
	 2 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 3 -> (nil) -- 0x2000| 
	 4 -> 0xb5464000 -- 0xb5466000| 

 COUNT: 1  - ends at 0xb546403c 
	 5 -> (nil) -- 0x2000| 
	 6 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 7 -> 0xb5468000 -- 0xb546a000| 

 COUNT: 1  - ends at 0xb546803c 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1491 TO ALLOCATE BLOCK OF SIZE 648
Adjusted size to: 1024
removing node 0xb544a03c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5463800
removing node 0xb544a03c of size 1024 


 REQUEST NUMBER 1492 TO ALLOCATE BLOCK OF SIZE 9
Adjusted size to: 32
RETURN ADDRESS 0xb546a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5321c60
removing node 0xb546a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1493 TO ALLOCATE BLOCK OF SIZE 164
Adjusted size to: 256
removing node 0xb546403c of size 512 
*** freeing page for lists of size 4
created new node at 0xb546404c whose previous is 0xb546403c and size is 16 so prev+16 =0xb546404c 
RETURN ADDRESS 0xb546403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5462a00
removing node 0xb546403c of size 256 


 REQUEST NUMBER 1494 TO ALLOCATE BLOCK OF SIZE 74
Adjusted size to: 128
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297180
removing node 0xb544803c of size 128 
*** freeing page for lists of size 2


 REQUEST NUMBER 1495 TO ALLOCATE BLOCK OF SIZE 168
Adjusted size to: 256
RETURN ADDRESS 0xb546403c
RETURN ADDRESS IS ----------------------->>>>> 0xb5462b00
removing node 0xb546403c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1496 TO ALLOCATE BLOCK OF SIZE 4840
Adjusted size to: 8192
RETURN ADDRESS (nil)
allocating an entire page 
adding to page node list: pagePtr= 0x99dd4c0 and page at 0xb5464000 
adding page node for the page located at 0xb5464000 and pagePtr 0x99dd4c0 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 60 
stepping through nodes 
 we have 230 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f09dc and the new one at 0xb53f0a08 
New page node points to data page 0xb5464000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 61 
RETURN ADDRESS IS 0xb5464000 


 REQUEST NUMBER 1497 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
removing node 0xb545e03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb545e04c whose previous is 0xb545e03c and size is 16 so prev+16 =0xb545e04c 
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297140
removing node 0xb545e03c of size 32 


 REQUEST NUMBER 1498 TO ALLOCATE BLOCK OF SIZE 1423
Adjusted size to: 2048
removing node 0xb546803c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb546804c whose previous is 0xb546803c and size is 16 so prev+16 =0xb546804c 
RETURN ADDRESS 0xb546803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5457000
removing node 0xb546803c of size 2048 


 REQUEST NUMBER 1499 TO ALLOCATE BLOCK OF SIZE 462
Adjusted size to: 512
removing node 0xb544a03c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5463c00
removing node 0xb544a03c of size 512 


 REQUEST NUMBER 1500 TO ALLOCATE BLOCK OF SIZE 429
Adjusted size to: 512
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5463e00
removing node 0xb544a03c of size 512 
*** freeing page for lists of size 4


 REQUEST NUMBER 1501 TO ALLOCATE BLOCK OF SIZE 528
Adjusted size to: 1024
removing node 0xb546803c of size 2048 
*** freeing page for lists of size 6
created new node at 0xb546804c whose previous is 0xb546803c and size is 16 so prev+16 =0xb546804c 
RETURN ADDRESS 0xb546803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5457800
removing node 0xb546803c of size 1024 


 REQUEST NUMBER 1502 TO ALLOCATE BLOCK OF SIZE 16
Adjusted size to: 32
RETURN ADDRESS 0xb545e03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5297160
removing node 0xb545e03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1503 TO ALLOCATE BLOCK OF SIZE 2443
Adjusted size to: 4096
RETURN ADDRESS (nil)
adding page node for the page located at 0xb545e000 and pagePtr 0x99a9ce8 
type bitmap at 0xb527c000 and counter is 180 
Page where we add the node is 0xb53f0000 
not at a full page yet 
page at 0xb53f0000 and counter is 61 
stepping through nodes 
 we have 231 pagenodes in the total in this page 
Do we get here?
The last pagenode is at 0xb53f0a08 and the new one at 0xb53f0a34 
New page node points to data page 0xb545e000 
Address of page that holds the page node is 0xb53f0000 
New page counter is at 62 
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
RETURN ADDRESS IS ----------------------->>>>>0xb544a03c-> 0xb545e000
removing node 0xb544a03c of size 4096 


 REQUEST NUMBER 1504 TO ALLOCATE BLOCK OF SIZE 80
Adjusted size to: 128
removing node 0xb546803c of size 1024 
*** freeing page for lists of size 5
created new node at 0xb546804c whose previous is 0xb546803c and size is 16 so prev+16 =0xb546804c 
removing node 0xb546803c of size 512 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
removing node 0xb544803c of size 256 
created new node at 0xb546a04c whose previous is 0xb546a03c and size is 16 so prev+16 =0xb546a04c 
RETURN ADDRESS 0xb546a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5457c00
removing node 0xb546a03c of size 128 


 REQUEST NUMBER 1505 TO ALLOCATE BLOCK OF SIZE 10
Adjusted size to: 32
removing node 0xb546a03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb546a04c whose previous is 0xb546a03c and size is 16 so prev+16 =0xb546a04c 
removing node 0xb546a03c of size 64 
created new node at 0xb546c04c whose previous is 0xb546c03c and size is 16 so prev+16 =0xb546c04c 
RETURN ADDRESS 0xb546c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5457c80
removing node 0xb546c03c of size 32 


 REQUEST NUMBER 1506 TO ALLOCATE BLOCK OF SIZE 27
Adjusted size to: 32
RETURN ADDRESS 0xb546c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5457ca0
removing node 0xb546c03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1507 TO ALLOCATE BLOCK OF SIZE 699
Adjusted size to: 1024
removing node 0xb544a03c of size 4096 
*** freeing page for lists of size 7
created new node at 0xb544a04c whose previous is 0xb544a03c and size is 16 so prev+16 =0xb544a04c 
removing node 0xb544a03c of size 2048 
created new node at 0xb546c04c whose previous is 0xb546c03c and size is 16 so prev+16 =0xb546c04c 
RETURN ADDRESS 0xb546c03c
RETURN ADDRESS IS ----------------------->>>>> 0xb545f000
removing node 0xb546c03c of size 1024 


 REQUEST NUMBER 1508 TO FREE BLOCK 0xb52ce000  OF SIZE 6302
removing pageNode to page with ptr 0x9912eb0 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
out of loop 
IN LOOPP 0xb527c698 -> 0xb527c6c4 (next) 
IN LOOPP 0xb527c6c4 -> 0xb527c6f0 (next) 
IN LOOPP 0xb527c6f0 -> 0xb527c71c (next) 
IN LOOPP 0xb527c71c -> 0xb527c748 (next) 
IN LOOPP 0xb527c748 -> 0xb527c774 (next) 
IN LOOPP 0xb527c774 -> 0xb527c7a0 (next) 
IN LOOPP 0xb527c7a0 -> 0xb527c7cc (next) 
IN LOOPP 0xb527c7cc -> 0xb527c7f8 (next) 
IN LOOPP 0xb527c7f8 -> 0xb527c824 (next) 
IN LOOPP 0xb527c824 -> 0xb527c850 (next) 
IN LOOPP 0xb527c850 -> 0xb527c87c (next) 
IN LOOPP 0xb527c87c -> 0xb527c8a8 (next) 
IN LOOPP 0xb527c8a8 -> 0xb527c8d4 (next) 
IN LOOPP 0xb527c8d4 -> 0xb527c900 (next) 
IN LOOPP 0xb527c900 -> 0xb527c92c (next) 
IN LOOPP 0xb527c92c -> 0xb527c958 (next) 
IN LOOPP 0xb527c958 -> 0xb527c984 (next) 
IN LOOPP 0xb527c984 -> 0xb527c9b0 (next) 
IN LOOPP 0xb527c9b0 -> 0xb527c9dc (next) 
IN LOOPP 0xb527c9dc -> 0xb527ca08 (next) 
IN LOOPP 0xb527ca08 -> 0xb527ca34 (next) 
IN LOOPP 0xb527ca34 -> 0xb527ca60 (next) 
IN LOOPP 0xb527ca60 -> 0xb527ca8c (next) 
IN LOOPP 0xb527ca8c -> 0xb527cab8 (next) 
IN LOOPP 0xb527cab8 -> 0xb527cae4 (next) 
IN LOOPP 0xb527cae4 -> 0xb527cb10 (next) 
IN LOOPP 0xb527cb10 -> 0xb527cb3c (next) 
IN LOOPP 0xb527cb3c -> 0xb527cb68 (next) 
IN LOOPP 0xb527cb68 -> 0xb527cb94 (next) 
IN LOOPP 0xb527cb94 -> 0xb527cbc0 (next) 
IN LOOPP 0xb527cbc0 -> 0xb527cbec (next) 
IN LOOPP 0xb527cbec -> 0xb527cc18 (next) 
IN LOOPP 0xb527cc18 -> 0xb527cc44 (next) 
IN LOOPP 0xb527cc44 -> 0xb527cc70 (next) 
IN LOOPP 0xb527cc70 -> 0xb527cc9c (next) 
IN LOOPP 0xb527cc9c -> 0xb527ccc8 (next) 
IN LOOPP 0xb527ccc8 -> 0xb527ccf4 (next) 
IN LOOPP 0xb527ccf4 -> 0xb527cd20 (next) 
IN LOOPP 0xb527cd20 -> 0xb527cd4c (next) 
IN LOOPP 0xb527cd4c -> 0xb527cd78 (next) 
IN LOOPP 0xb527cd78 -> 0xb527cda4 (next) 
IN LOOPP 0xb527cda4 -> 0xb527cdd0 (next) 
IN LOOPP 0xb527cdd0 -> 0xb527cdfc (next) 
IN LOOPP 0xb527cdfc -> 0xb527ce28 (next) 
IN LOOPP 0xb527ce28 -> 0xb527ce54 (next) 
IN LOOPP 0xb527ce54 -> 0xb527ce80 (next) 
IN LOOPP 0xb527ce80 -> 0xb527ceac (next) 
IN LOOPP 0xb527ceac -> 0xb527ced8 (next) 
IN LOOPP 0xb527ced8 -> 0xb527cf04 (next) 
IN LOOPP 0xb527cf04 -> 0xb527cf30 (next) 
IN LOOPP 0xb527cf30 -> 0xb527cf5c (next) 
IN LOOPP 0xb527cf5c -> 0xb527cf88 (next) 
IN LOOPP 0xb527cf88 -> 0xb527cfb4 (next) 
IN LOOPP 0xb527cfb4 -> 0xb527cfe0 (next) 
IN LOOPP 0xb527cfe0 -> 0xb527d00c (next) 
IN LOOPP 0xb527d00c -> 0xb527d038 (next) 
IN LOOPP 0xb527d038 -> 0xb527d064 (next) 
IN LOOPP 0xb527d064 -> 0xb527d090 (next) 
IN LOOPP 0xb527d090 -> 0xb527d0bc (next) 
IN LOOPP 0xb527d0bc -> 0xb527d0e8 (next) 
IN LOOPP 0xb527d0e8 -> 0xb527d114 (next) 
IN LOOPP 0xb527d114 -> 0xb527d140 (next) 
IN LOOPP 0xb527d140 -> 0xb527d16c (next) 
IN LOOPP 0xb527d16c -> 0xb527d198 (next) 
IN LOOPP 0xb527d198 -> 0xb527d1c4 (next) 
IN LOOPP 0xb527d1c4 -> 0xb527d1f0 (next) 
IN LOOPP 0xb527d1f0 -> 0xb527d21c (next) 
IN LOOPP 0xb527d21c -> 0xb527d248 (next) 
IN LOOPP 0xb527d248 -> 0xb527d274 (next) 
IN LOOPP 0xb527d274 -> 0xb527d2a0 (next) 
IN LOOPP 0xb527d2a0 -> 0xb527d2cc (next) 
IN LOOPP 0xb527d2cc -> 0xb527d2f8 (next) 
IN LOOPP 0xb527d2f8 -> 0xb527d324 (next) 
IN LOOPP 0xb527d324 -> 0xb527d350 (next) 
IN LOOPP 0xb527d350 -> 0xb527d37c (next) 
IN LOOPP 0xb527d37c -> 0xb527d3a8 (next) 
IN LOOPP 0xb527d3a8 -> 0xb527d3d4 (next) 
IN LOOPP 0xb527d3d4 -> 0xb527d400 (next) 
IN LOOPP 0xb527d400 -> 0xb527d42c (next) 
IN LOOPP 0xb527d42c -> 0xb527d458 (next) 
IN LOOPP 0xb527d458 -> 0xb527d484 (next) 
IN LOOPP 0xb527d484 -> 0xb527d4b0 (next) 
IN LOOPP 0xb527d4b0 -> 0xb527d4dc (next) 
IN LOOPP 0xb527d4dc -> 0xb527d508 (next) 
IN LOOPP 0xb527d508 -> 0xb527d534 (next) 
IN LOOPP 0xb527d534 -> 0xb527d560 (next) 
IN LOOPP 0xb527d560 -> 0xb527d58c (next) 
IN LOOPP 0xb527d58c -> 0xb527d5b8 (next) 
IN LOOPP 0xb527d5b8 -> 0xb527d5e4 (next) 
IN LOOPP 0xb527d5e4 -> 0xb527d610 (next) 
IN LOOPP 0xb527d610 -> 0xb527d63c (next) 
IN LOOPP 0xb527d63c -> 0xb527d668 (next) 
IN LOOPP 0xb527d668 -> 0xb527d694 (next) 
IN LOOPP 0xb527d694 -> 0xb527d6c0 (next) 
IN LOOPP 0xb527d6c0 -> 0xb527d6ec (next) 
IN LOOPP 0xb527d6ec -> 0xb527d718 (next) 
IN LOOPP 0xb527d718 -> 0xb527d744 (next) 
IN LOOPP 0xb527d744 -> 0xb527d770 (next) 
IN LOOPP 0xb527d770 -> 0xb527d79c (next) 
IN LOOPP 0xb527d79c -> 0xb527d7c8 (next) 
IN LOOPP 0xb527d7c8 -> 0xb527d7f4 (next) 
IN LOOPP 0xb527d7f4 -> 0xb527d820 (next) 
IN LOOPP 0xb527d820 -> 0xb527d84c (next) 
IN LOOPP 0xb527d84c -> 0xb527d878 (next) 
IN LOOPP 0xb527d878 -> 0xb527d8a4 (next) 
IN LOOPP 0xb527d8a4 -> 0xb527d8d0 (next) 
IN LOOPP 0xb527d8d0 -> 0xb527d8fc (next) 
IN LOOPP 0xb527d8fc -> 0xb527d928 (next) 
IN LOOPP 0xb527d928 -> 0xb527d954 (next) 
IN LOOPP 0xb527d954 -> 0xb527d980 (next) 
IN LOOPP 0xb527d980 -> 0xb527d9ac (next) 
IN LOOPP 0xb527d9ac -> 0xb527d9d8 (next) 
IN LOOPP 0xb527d9d8 -> 0xb527da04 (next) 
IN LOOPP 0xb527da04 -> 0xb527da30 (next) 
IN LOOPP 0xb527da30 -> 0xb527da5c (next) 
IN LOOPP 0xb527da5c -> 0xb527da88 (next) 
IN LOOPP 0xb527da88 -> 0xb527dab4 (next) 
IN LOOPP 0xb527dab4 -> 0xb527dae0 (next) 
IN LOOPP 0xb527dae0 -> 0xb527db0c (next) 
IN LOOPP 0xb527db0c -> 0xb527db38 (next) 
IN LOOPP 0xb527db38 -> 0xb527db64 (next) 
IN LOOPP 0xb527db64 -> 0xb527db90 (next) 
IN LOOPP 0xb527db90 -> 0xb527dbbc (next) 
IN LOOPP 0xb527dbbc -> 0xb527dbe8 (next) 
IN LOOPP 0xb527dbe8 -> 0xb527dc14 (next) 
IN LOOPP 0xb527dc14 -> 0xb527dc40 (next) 
IN LOOPP 0xb527dc40 -> 0xb527dc6c (next) 
IN LOOPP 0xb527dc6c -> 0xb527dc98 (next) 
IN LOOPP 0xb527dc98 -> 0xb527dcc4 (next) 
IN LOOPP 0xb527dcc4 -> 0xb527dcf0 (next) 
IN LOOPP 0xb527dcf0 -> 0xb527dd1c (next) 
IN LOOPP 0xb527dd1c -> 0xb527dd48 (next) 
IN LOOPP 0xb527dd48 -> 0xb527dd74 (next) 
IN LOOPP 0xb527dd74 -> 0xb527dda0 (next) 
IN LOOPP 0xb527dda0 -> 0xb527ddcc (next) 
IN LOOPP 0xb527ddcc -> 0xb53f003c (next) 
IN LOOPP 0xb53f003c -> 0xb53f0068 (next) 
IN LOOPP 0xb53f0068 -> 0xb53f0094 (next) 
IN LOOPP 0xb53f0094 -> 0xb53f00c0 (next) 
IN LOOPP 0xb53f00c0 -> 0xb53f00ec (next) 
IN LOOPP 0xb53f00ec -> 0xb53f0118 (next) 
IN LOOPP 0xb53f0118 -> 0xb53f0144 (next) 
IN LOOPP 0xb53f0144 -> 0xb53f0170 (next) 
IN LOOPP 0xb53f0170 -> 0xb53f019c (next) 
IN LOOPP 0xb53f019c -> 0xb53f01c8 (next) 
IN LOOPP 0xb53f01c8 -> 0xb53f01f4 (next) 
IN LOOPP 0xb53f01f4 -> 0xb53f0220 (next) 
IN LOOPP 0xb53f0220 -> 0xb53f024c (next) 
IN LOOPP 0xb53f024c -> 0xb53f0278 (next) 
IN LOOPP 0xb53f0278 -> 0xb53f02a4 (next) 
IN LOOPP 0xb53f02a4 -> 0xb53f02d0 (next) 
IN LOOPP 0xb53f02d0 -> 0xb53f02fc (next) 
IN LOOPP 0xb53f02fc -> 0xb53f0328 (next) 
IN LOOPP 0xb53f0328 -> 0xb53f0354 (next) 
IN LOOPP 0xb53f0354 -> 0xb53f0380 (next) 
IN LOOPP 0xb53f0380 -> 0xb53f03ac (next) 
IN LOOPP 0xb53f03ac -> 0xb53f03d8 (next) 
IN LOOPP 0xb53f03d8 -> 0xb53f0404 (next) 
IN LOOPP 0xb53f0404 -> 0xb53f0430 (next) 
IN LOOPP 0xb53f0430 -> 0xb53f045c (next) 
IN LOOPP 0xb53f045c -> 0xb53f0488 (next) 
IN LOOPP 0xb53f0488 -> 0xb53f04b4 (next) 
IN LOOPP 0xb53f04b4 -> 0xb53f04e0 (next) 
IN LOOPP 0xb53f04e0 -> 0xb53f050c (next) 
IN LOOPP 0xb53f050c -> 0xb53f0538 (next) 
IN LOOPP 0xb53f0538 -> 0xb53f0564 (next) 
IN LOOPP 0xb53f0564 -> 0xb53f0590 (next) 
IN LOOPP 0xb53f0590 -> 0xb53f05bc (next) 
IN LOOPP 0xb53f05bc -> 0xb53f05e8 (next) 
IN LOOPP 0xb53f05e8 -> 0xb53f0614 (next) 
IN LOOPP 0xb53f0614 -> 0xb53f0640 (next) 
IN LOOPP 0xb53f0640 -> 0xb53f066c (next) 
IN LOOPP 0xb53f066c -> 0xb53f0698 (next) 
IN LOOPP 0xb53f0698 -> 0xb53f06c4 (next) 
IN LOOPP 0xb53f06c4 -> 0xb53f06f0 (next) 
IN LOOPP 0xb53f06f0 -> 0xb53f071c (next) 
IN LOOPP 0xb53f071c -> 0xb53f0748 (next) 
IN LOOPP 0xb53f0748 -> 0xb53f0774 (next) 
IN LOOPP 0xb53f0774 -> 0xb53f07a0 (next) 
IN LOOPP 0xb53f07a0 -> 0xb53f07cc (next) 
IN LOOPP 0xb53f07cc -> 0xb53f07f8 (next) 
IN LOOPP 0xb53f07f8 -> 0xb53f0824 (next) 
IN LOOPP 0xb53f0824 -> 0xb53f0850 (next) 
IN LOOPP 0xb53f0850 -> 0xb53f087c (next) 
IN LOOPP 0xb53f087c -> 0xb53f08a8 (next) 
IN LOOPP 0xb53f08a8 -> 0xb53f08d4 (next) 
IN LOOPP 0xb53f08d4 -> 0xb53f0900 (next) 
IN LOOPP 0xb53f0900 -> 0xb53f092c (next) 
IN LOOPP 0xb53f092c -> 0xb53f0958 (next) 
IN LOOPP 0xb53f0958 -> 0xb53f0984 (next) 
IN LOOPP 0xb53f0984 -> 0xb53f09b0 (next) 
IN LOOPP 0xb53f09b0 -> 0xb53f09dc (next) 
IN LOOPP 0xb53f09dc -> 0xb53f0a08 (next) 
IN LOOPP 0xb53f0a08 -> 0xb53f0a34 (next) 
IN LOOPP 0xb53f0a34 -> (nil) (next) 
Add 0xb53f09dc we set the next to null 
Prev: 0xb53f0a34, current: (nil) 
Page to decrease counter: 0xb53f0000 from 62 
230 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb546a000 -- 0xb546c000| 

 COUNT: 1  - ends at 0xb546a03c 
	 2 -> (nil) -- 0x2000| 
	 3 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 4 -> 0xb5468000 -- 0xb546a000| 

 COUNT: 1  - ends at 0xb546803c 
	 5 -> 0xb546c000 -- 0xb546e000| 

 COUNT: 1  - ends at 0xb546c03c 
	 6 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1509 TO FREE BLOCK 0xb5327e80  OF SIZE 125
coalescing blocks if possible
trying to coalesce a block at ptr 0xb5327e80 and of size: 128 
couldn't find buddy 
not from recursion, so find pointer and add to list 
should be scanning bitmap by page and deleting pages as needed
Bitmap page at 0xb527c000 
 Lists page at 0xb527c000 
 Printing lists: 
	 0 -> (nil) -- 0x2000| 
	 1 -> 0xb546a000 -- 0xb546c000| 

 COUNT: 1  - ends at 0xb546a03c 
	 2 -> 0xb52ce000 -- 0xb52d0000| 

 COUNT: 1  - ends at 0xb52ce03c 
	 3 -> 0xb5448000 -- 0xb544a000| 

 COUNT: 1  - ends at 0xb544803c 
	 4 -> 0xb5468000 -- 0xb546a000| 

 COUNT: 1  - ends at 0xb546803c 
	 5 -> 0xb546c000 -- 0xb546e000| 

 COUNT: 1  - ends at 0xb546c03c 
	 6 -> 0xb544a000 -- 0xb544c000| 

 COUNT: 1  - ends at 0xb544a03c 
	 7 -> (nil) -- 0x2000| 
	 8 -> (nil) -- 0x2000| 
some stuff left.. wait 
size of node is 16 

 REQUEST NUMBER 1510 TO ALLOCATE BLOCK OF SIZE 15
Adjusted size to: 32
removing node 0xb546a03c of size 64 
*** freeing page for lists of size 1
created new node at 0xb546a04c whose previous is 0xb546a03c and size is 16 so prev+16 =0xb546a04c 
RETURN ADDRESS 0xb546a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5457cc0
removing node 0xb546a03c of size 32 


 REQUEST NUMBER 1511 TO ALLOCATE BLOCK OF SIZE 24
Adjusted size to: 32
RETURN ADDRESS 0xb546a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb5457ce0
removing node 0xb546a03c of size 32 
*** freeing page for lists of size 0


 REQUEST NUMBER 1512 TO ALLOCATE BLOCK OF SIZE 1862
Adjusted size to: 2048
RETURN ADDRESS 0xb544a03c
RETURN ADDRESS IS ----------------------->>>>> 0xb545f800
removing node 0xb544a03c of size 2048 
*** freeing page for lists of size 6


 REQUEST NUMBER 1513 TO ALLOCATE BLOCK OF SIZE 216
Adjusted size to: 256
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5457d00
removing node 0xb544803c of size 256 
*** freeing page for lists of size 3


 REQUEST NUMBER 1514 TO ALLOCATE BLOCK OF SIZE 11
Adjusted size to: 32
removing node 0xb52ce03c of size 128 
*** freeing page for lists of size 2
created new node at 0xb52ce04c whose previous is 0xb52ce03c and size is 16 so prev+16 =0xb52ce04c 
removing node 0xb52ce03c of size 64 
created new node at 0xb544804c whose previous is 0xb544803c and size is 16 so prev+16 =0xb544804c 
RETURN ADDRESS 0xb544803c
RETURN ADDRESS IS ----------------------->>>>> 0xb5327e80
removing node 0xb544803c of size 32 


 REQUEST NUMBER 1515 TO FREE BLOCK 0xb545c000  OF SIZE 5077
removing pageNode to page with ptr (nil) 
IN THE LOOp 0xb527c03c 
IN THE LOOp 0xb527c068 
IN THE LOOp 0xb527c094 
IN THE LOOp 0xb527c0c0 
IN THE LOOp 0xb527c0ec 
IN THE LOOp 0xb527c118 
IN THE LOOp 0xb527c144 
IN THE LOOp 0xb527c170 
IN THE LOOp 0xb527c19c 
IN THE LOOp 0xb527c1c8 
IN THE LOOp 0xb527c1f4 
IN THE LOOp 0xb527c220 
IN THE LOOp 0xb527c24c 
IN THE LOOp 0xb527c278 
IN THE LOOp 0xb527c2a4 
IN THE LOOp 0xb527c2d0 
IN THE LOOp 0xb527c2fc 
IN THE LOOp 0xb527c328 
IN THE LOOp 0xb527c354 
IN THE LOOp 0xb527c380 
IN THE LOOp 0xb527c3ac 
IN THE LOOp 0xb527c3d8 
IN THE LOOp 0xb527c404 
IN THE LOOp 0xb527c430 
IN THE LOOp 0xb527c45c 
IN THE LOOp 0xb527c488 
IN THE LOOp 0xb527c4b4 
IN THE LOOp 0xb527c4e0 
IN THE LOOp 0xb527c50c 
IN THE LOOp 0xb527c538 
IN THE LOOp 0xb527c564 
IN THE LOOp 0xb527c590 
IN THE LOOp 0xb527c5bc 
IN THE LOOp 0xb527c5e8 
IN THE LOOp 0xb527c614 
IN THE LOOp 0xb527c640 
IN THE LOOp 0xb527c66c 
IN THE LOOp 0xb527c698 
IN THE LOOp 0xb527c6c4 
IN THE LOOp 0xb527c6f0 
IN THE LOOp 0xb527c71c 
IN THE LOOp 0xb527c748 
IN THE LOOp 0xb527c774 
IN THE LOOp 0xb527c7a0 
IN THE LOOp 0xb527c7cc 
IN THE LOOp 0xb527c7f8 
IN THE LOOp 0xb527c824 
IN THE LOOp 0xb527c850 
IN THE LOOp 0xb527c87c 
IN THE LOOp 0xb527c8a8 
IN THE LOOp 0xb527c8d4 
IN THE LOOp 0xb527c900 
IN THE LOOp 0xb527c92c 
IN THE LOOp 0xb527c958 
IN THE LOOp 0xb527c984 
IN THE LOOp 0xb527c9b0 
IN THE LOOp 0xb527c9dc 
IN THE LOOp 0xb527ca08 
IN THE LOOp 0xb527ca34 
IN THE LOOp 0xb527ca60 
IN THE LOOp 0xb527ca8c 
IN THE LOOp 0xb527cab8 
IN THE LOOp 0xb527cae4 
IN THE LOOp 0xb527cb10 
IN THE LOOp 0xb527cb3c 
IN THE LOOp 0xb527cb68 
IN THE LOOp 0xb527cb94 
IN THE LOOp 0xb527cbc0 
IN THE LOOp 0xb527cbec 
IN THE LOOp 0xb527cc18 
IN THE LOOp 0xb527cc44 
IN THE LOOp 0xb527cc70 
IN THE LOOp 0xb527cc9c 
IN THE LOOp 0xb527ccc8 
IN THE LOOp 0xb527ccf4 
IN THE LOOp 0xb527cd20 
IN THE LOOp 0xb527cd4c 
IN THE LOOp 0xb527cd78 
IN THE LOOp 0xb527cda4 
IN THE LOOp 0xb527cdd0 
IN THE LOOp 0xb527cdfc 
IN THE LOOp 0xb527ce28 
IN THE LOOp 0xb527ce54 
IN THE LOOp 0xb527ce80 
IN THE LOOp 0xb527ceac 
IN THE LOOp 0xb527ced8 
IN THE LOOp 0xb527cf04 
IN THE LOOp 0xb527cf30 
IN THE LOOp 0xb527cf5c 
IN THE LOOp 0xb527cf88 
IN THE LOOp 0xb527cfb4 
IN THE LOOp 0xb527cfe0 
IN THE LOOp 0xb527d00c 
IN THE LOOp 0xb527d038 
IN THE LOOp 0xb527d064 
IN THE LOOp 0xb527d090 
IN THE LOOp 0xb527d0bc 
IN THE LOOp 0xb527d0e8 
IN THE LOOp 0xb527d114 
IN THE LOOp 0xb527d140 
IN THE LOOp 0xb527d16c 
IN THE LOOp 0xb527d198 
IN THE LOOp 0xb527d1c4 
IN THE LOOp 0xb527d1f0 
IN THE LOOp 0xb527d21c 
IN THE LOOp 0xb527d248 
IN THE LOOp 0xb527d274 
IN THE LOOp 0xb527d2a0 
IN THE LOOp 0xb527d2cc 
IN THE LOOp 0xb527d2f8 
IN THE LOOp 0xb527d324 
IN THE LOOp 0xb527d350 
IN THE LOOp 0xb527d37c 
IN THE LOOp 0xb527d3a8 
IN THE LOOp 0xb527d3d4 
IN THE LOOp 0xb527d400 
IN THE LOOp 0xb527d42c 
IN THE LOOp 0xb527d458 
IN THE LOOp 0xb527d484 
IN THE LOOp 0xb527d4b0 
IN THE LOOp 0xb527d4dc 
IN THE LOOp 0xb527d508 
IN THE LOOp 0xb527d534 
IN THE LOOp 0xb527d560 
IN THE LOOp 0xb527d58c 
IN THE LOOp 0xb527d5b8 
IN THE LOOp 0xb527d5e4 
IN THE LOOp 0xb527d610 
IN THE LOOp 0xb527d63c 
IN THE LOOp 0xb527d668 
IN THE LOOp 0xb527d694 
IN THE LOOp 0xb527d6c0 
IN THE LOOp 0xb527d6ec 
IN THE LOOp 0xb527d718 
IN THE LOOp 0xb527d744 
IN THE LOOp 0xb527d770 
IN THE LOOp 0xb527d79c 
IN THE LOOp 0xb527d7c8 
IN THE LOOp 0xb527d7f4 
IN THE LOOp 0xb527d820 
IN THE LOOp 0xb527d84c 
IN THE LOOp 0xb527d878 
IN THE LOOp 0xb527d8a4 
IN THE LOOp 0xb527d8d0 
IN THE LOOp 0xb527d8fc 
IN THE LOOp 0xb527d928 
IN THE LOOp 0xb527d954 
IN THE LOOp 0xb527d980 
IN THE LOOp 0xb527d9ac 
IN THE LOOp 0xb527d9d8 
IN THE LOOp 0xb527da04 
IN THE LOOp 0xb527da30 
IN THE LOOp 0xb527da5c 
IN THE LOOp 0xb527da88 
IN THE LOOp 0xb527dab4 
IN THE LOOp 0xb527dae0 
IN THE LOOp 0xb527db0c 
IN THE LOOp 0xb527db38 
IN THE LOOp 0xb527db64 
IN THE LOOp 0xb527db90 
IN THE LOOp 0xb527dbbc 
IN THE LOOp 0xb527dbe8 
IN THE LOOp 0xb527dc14 
IN THE LOOp 0xb527dc40 
IN THE LOOp 0xb527dc6c 
IN THE LOOp 0xb527dc98 
IN THE LOOp 0xb527dcc4 
IN THE LOOp 0xb527dcf0 
IN THE LOOp 0xb527dd1c 
IN THE LOOp 0xb527dd48 
IN THE LOOp 0xb527dd74 
IN THE LOOp 0xb527dda0 
IN THE LOOp 0xb527ddcc 
IN THE LOOp 0xb53f003c 
IN THE LOOp 0xb53f0068 
IN THE LOOp 0xb53f0094 
IN THE LOOp 0xb53f00c0 
IN THE LOOp 0xb53f00ec 
IN THE LOOp 0xb53f0118 
IN THE LOOp 0xb53f0144 
IN THE LOOp 0xb53f0170 
IN THE LOOp 0xb53f019c 
IN THE LOOp 0xb53f01c8 
IN THE LOOp 0xb53f01f4 
IN THE LOOp 0xb53f0220 
IN THE LOOp 0xb53f024c 
IN THE LOOp 0xb53f0278 
IN THE LOOp 0xb53f02a4 
IN THE LOOp 0xb53f02d0 
IN THE LOOp 0xb53f02fc 
IN THE LOOp 0xb53f0328 
IN THE LOOp 0xb53f0354 
IN THE LOOp 0xb53f0380 
IN THE LOOp 0xb53f03ac 
IN THE LOOp 0xb53f03d8 
IN THE LOOp 0xb53f0404 
IN THE LOOp 0xb53f0430 
IN THE LOOp 0xb53f045c 
IN THE LOOp 0xb53f0488 
IN THE LOOp 0xb53f04b4 
IN THE LOOp 0xb53f04e0 
IN THE LOOp 0xb53f050c 
IN THE LOOp 0xb53f0538 
IN THE LOOp 0xb53f0564 
IN THE LOOp 0xb53f0590 
IN THE LOOp 0xb53f05bc 
IN THE LOOp 0xb53f05e8 
IN THE LOOp 0xb53f0614 
IN THE LOOp 0xb53f0640 
IN THE LOOp 0xb53f066c 
IN THE LOOp 0xb53f0698 
IN THE LOOp 0xb53f06c4 
IN THE LOOp 0xb53f06f0 
IN THE LOOp 0xb53f071c 
IN THE LOOp 0xb53f0748 
IN THE LOOp 0xb53f0774 
IN THE LOOp 0xb53f07a0 
IN THE LOOp 0xb53f07cc 
IN THE LOOp 0xb53f07f8 
IN THE LOOp 0xb53f0824 
IN THE LOOp 0xb53f0850 
IN THE LOOp 0xb53f087c 
IN THE LO